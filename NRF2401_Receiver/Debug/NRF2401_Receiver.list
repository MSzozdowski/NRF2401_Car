
NRF2401_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e24  08004e24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e24  08004e24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e24  08004e24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08004e9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004e9c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3f5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277d  00000000  00000000  0002e48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00030c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00031bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001973c  00000000  00000000  00032a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010894  00000000  00000000  0004c194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0cd  00000000  00000000  0005ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaaf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a00  00000000  00000000  000eab48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c6c 	.word	0x08004c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c6c 	.word	0x08004c6c

0800014c <Clock_Init>:
static uint32_t tick; //100us tickrate

TIM_HandleTypeDef *clock_t;

void Clock_Init(TIM_HandleTypeDef *htim)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	clock_t = htim;
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <Clock_Init+0x24>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f002 fe0c 	bl	8002d78 <HAL_TIM_Base_Start_IT>
	tick = 0;
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <Clock_Init+0x28>)
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
}
 8000166:	bf00      	nop
 8000168:	3708      	adds	r7, #8
 800016a:	46bd      	mov	sp, r7
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20000090 	.word	0x20000090
 8000174:	2000008c 	.word	0x2000008c

08000178 <Clock_GetTick>:

uint32_t Clock_GetTick()
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	return tick;
 800017c:	4b02      	ldr	r3, [pc, #8]	; (8000188 <Clock_GetTick+0x10>)
 800017e:	681b      	ldr	r3, [r3, #0]
}
 8000180:	4618      	mov	r0, r3
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000008c 	.word	0x2000008c

0800018c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	if(htim == clock_t)
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d104      	bne.n	80001a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
		tick+=100;
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	3364      	adds	r3, #100	; 0x64
 80001a4:	4a04      	ldr	r2, [pc, #16]	; (80001b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80001a6:	6013      	str	r3, [r2, #0]
	}
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000090 	.word	0x20000090
 80001b8:	2000008c 	.word	0x2000008c

080001bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	f107 0310 	add.w	r3, r7, #16
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d0:	4b41      	ldr	r3, [pc, #260]	; (80002d8 <MX_GPIO_Init+0x11c>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a40      	ldr	r2, [pc, #256]	; (80002d8 <MX_GPIO_Init+0x11c>)
 80001d6:	f043 0310 	orr.w	r3, r3, #16
 80001da:	6193      	str	r3, [r2, #24]
 80001dc:	4b3e      	ldr	r3, [pc, #248]	; (80002d8 <MX_GPIO_Init+0x11c>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	f003 0310 	and.w	r3, r3, #16
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001e8:	4b3b      	ldr	r3, [pc, #236]	; (80002d8 <MX_GPIO_Init+0x11c>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a3a      	ldr	r2, [pc, #232]	; (80002d8 <MX_GPIO_Init+0x11c>)
 80001ee:	f043 0320 	orr.w	r3, r3, #32
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b38      	ldr	r3, [pc, #224]	; (80002d8 <MX_GPIO_Init+0x11c>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f003 0320 	and.w	r3, r3, #32
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b35      	ldr	r3, [pc, #212]	; (80002d8 <MX_GPIO_Init+0x11c>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a34      	ldr	r2, [pc, #208]	; (80002d8 <MX_GPIO_Init+0x11c>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <MX_GPIO_Init+0x11c>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <MX_GPIO_Init+0x11c>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a2e      	ldr	r2, [pc, #184]	; (80002d8 <MX_GPIO_Init+0x11c>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <MX_GPIO_Init+0x11c>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0308 	and.w	r3, r3, #8
 800022c:	603b      	str	r3, [r7, #0]
 800022e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	4829      	ldr	r0, [pc, #164]	; (80002dc <MX_GPIO_Init+0x120>)
 8000236:	f001 fb8e 	bl	8001956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	4827      	ldr	r0, [pc, #156]	; (80002e0 <MX_GPIO_Init+0x124>)
 8000242:	f001 fb88 	bl	8001956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	4826      	ldr	r0, [pc, #152]	; (80002e4 <MX_GPIO_Init+0x128>)
 800024c:	f001 fb83 	bl	8001956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000256:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <MX_GPIO_Init+0x12c>)
 8000258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800025e:	f107 0310 	add.w	r3, r7, #16
 8000262:	4619      	mov	r1, r3
 8000264:	481d      	ldr	r0, [pc, #116]	; (80002dc <MX_GPIO_Init+0x120>)
 8000266:	f001 f9db 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026e:	2301      	movs	r3, #1
 8000270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000272:	2300      	movs	r3, #0
 8000274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000276:	2303      	movs	r3, #3
 8000278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	4619      	mov	r1, r3
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <MX_GPIO_Init+0x120>)
 8000282:	f001 f9cd 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	4619      	mov	r1, r3
 800029e:	4810      	ldr	r0, [pc, #64]	; (80002e0 <MX_GPIO_Init+0x124>)
 80002a0:	f001 f9be 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80002a4:	2340      	movs	r3, #64	; 0x40
 80002a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	2301      	movs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b0:	2303      	movs	r3, #3
 80002b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	4619      	mov	r1, r3
 80002ba:	480a      	ldr	r0, [pc, #40]	; (80002e4 <MX_GPIO_Init+0x128>)
 80002bc:	f001 f9b0 	bl	8001620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	2028      	movs	r0, #40	; 0x28
 80002c6:	f001 f974 	bl	80015b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002ca:	2028      	movs	r0, #40	; 0x28
 80002cc:	f001 f98d 	bl	80015ea <HAL_NVIC_EnableIRQ>

}
 80002d0:	bf00      	nop
 80002d2:	3720      	adds	r7, #32
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40011000 	.word	0x40011000
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40010c00 	.word	0x40010c00
 80002e8:	10110000 	.word	0x10110000

080002ec <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b0a      	cmp	r3, #10
 80002f8:	d109      	bne.n	800030e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80002fa:	230d      	movs	r3, #13
 80002fc:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, 1000);
 80002fe:	f107 010f 	add.w	r1, r7, #15
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	2201      	movs	r2, #1
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <__io_putchar+0x3c>)
 800030a:	f003 f92c 	bl	8003566 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 800030e:	1d39      	adds	r1, r7, #4
 8000310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000314:	2201      	movs	r2, #1
 8000316:	4804      	ldr	r0, [pc, #16]	; (8000328 <__io_putchar+0x3c>)
 8000318:	f003 f925 	bl	8003566 <HAL_UART_Transmit>
    return 1;
 800031c:	2301      	movs	r3, #1
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000158 	.word	0x20000158

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000330:	f000 ffe2 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f81a 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f7ff ff40 	bl	80001bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800033c:	f000 ff4e 	bl	80011dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000340:	f000 fd4c 	bl	8000ddc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000344:	f000 fedc 	bl	8001100 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000348:	f000 f851 	bl	80003ee <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Clock_Init(&htim1);
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <main+0x38>)
 800034e:	f7ff fefd 	bl	800014c <Clock_Init>
  NRF_Init(&hspi1, 'r');
 8000352:	2172      	movs	r1, #114	; 0x72
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <main+0x3c>)
 8000356:	f000 fb9f 	bl	8000a98 <NRF_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NRF_process(0);
 800035a:	2000      	movs	r0, #0
 800035c:	f000 fbfe 	bl	8000b5c <NRF_process>
 8000360:	e7fb      	b.n	800035a <main+0x2e>
 8000362:	bf00      	nop
 8000364:	20000110 	.word	0x20000110
 8000368:	200000b4 	.word	0x200000b4

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	; 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f003 fa88 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000396:	2310      	movs	r3, #16
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800039e:	2300      	movs	r3, #0
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fb0d 	bl	80019cc <HAL_RCC_OscConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003b8:	f000 f825 	bl	8000406 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003bc:	230f      	movs	r3, #15
 80003be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c0:	2302      	movs	r3, #2
 80003c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fd7a 	bl	8001ed0 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003e2:	f000 f810 	bl	8000406 <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3740      	adds	r7, #64	; 0x40
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	2019      	movs	r0, #25
 80003f8:	f001 f8db 	bl	80015b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80003fc:	2019      	movs	r0, #25
 80003fe:	f001 f8f4 	bl	80015ea <HAL_NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}

08000406 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040a:	b672      	cpsid	i
}
 800040c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040e:	e7fe      	b.n	800040e <Error_Handler+0x8>

08000410 <NRF_Write>:
char nrf_mode;

static uint8_t addr_p0_backup[NRF24_ADD_WIDTH];

void NRF_Write(uint8_t *Data, uint8_t Length)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(NRF_spi, Data, Length, 1000);
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <NRF_Write+0x28>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	b29a      	uxth	r2, r3
 8000424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	f001 ff6d 	bl	8002308 <HAL_SPI_Transmit>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000094 	.word	0x20000094

0800043c <NRF_Read>:

void NRF_Read(uint8_t *Data, uint8_t Length)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(NRF_spi, Data, Length, 1000);
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <NRF_Read+0x28>)
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	b29a      	uxth	r2, r3
 8000450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	f002 f893 	bl	8002580 <HAL_SPI_Receive>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000094 	.word	0x20000094

08000468 <NRF_ReadRegister>:

uint8_t NRF_ReadRegister(uint8_t reg)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_LOW
 8000476:	2200      	movs	r2, #0
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <NRF_ReadRegister+0x44>)
 800047c:	f001 fa6b 	bl	8001956 <HAL_GPIO_WritePin>
	NRF_Write(&reg, 1);
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	2101      	movs	r1, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffc3 	bl	8000410 <NRF_Write>
	NRF_Read(&reg_value, 1);
 800048a:	f107 030f 	add.w	r3, r7, #15
 800048e:	2101      	movs	r1, #1
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ffd3 	bl	800043c <NRF_Read>
	NRF_CSN_HIGH
 8000496:	2201      	movs	r2, #1
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	4804      	ldr	r0, [pc, #16]	; (80004ac <NRF_ReadRegister+0x44>)
 800049c:	f001 fa5b 	bl	8001956 <HAL_GPIO_WritePin>

	return reg_value;
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40011000 	.word	0x40011000

080004b0 <NRF_ReadRegisters>:

void NRF_ReadRegisters(uint8_t reg, uint8_t* data, uint8_t length)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_LOW
 80004c4:	2200      	movs	r2, #0
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <NRF_ReadRegisters+0x44>)
 80004ca:	f001 fa44 	bl	8001956 <HAL_GPIO_WritePin>
	NRF_Write(&reg, 1);
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff9c 	bl	8000410 <NRF_Write>
	NRF_Read(data, length);
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	4619      	mov	r1, r3
 80004dc:	6838      	ldr	r0, [r7, #0]
 80004de:	f7ff ffad 	bl	800043c <NRF_Read>
	NRF_CSN_HIGH
 80004e2:	2201      	movs	r2, #1
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <NRF_ReadRegisters+0x44>)
 80004e8:	f001 fa35 	bl	8001956 <HAL_GPIO_WritePin>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40011000 	.word	0x40011000

080004f8 <NRF_WriteRegister>:

void NRF_WriteRegister(uint8_t reg, uint8_t data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	460a      	mov	r2, r1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	4613      	mov	r3, r2
 8000506:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = NRF24_CMD_W_REGISTER | reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	b2db      	uxtb	r3, r3
 8000510:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	737b      	strb	r3, [r7, #13]

	NRF_CSN_LOW
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <NRF_WriteRegister+0x48>)
 800051c:	f001 fa1b 	bl	8001956 <HAL_GPIO_WritePin>
	NRF_Write(buffer, 2);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2102      	movs	r1, #2
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff72 	bl	8000410 <NRF_Write>
	NRF_CSN_HIGH
 800052c:	2201      	movs	r2, #1
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <NRF_WriteRegister+0x48>)
 8000532:	f001 fa10 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40011000 	.word	0x40011000

08000544 <NRF_WriteRegisters>:

void NRF_WriteRegisters(uint8_t reg, uint8_t* data, uint8_t length)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	b2db      	uxtb	r3, r3
 800055c:	71fb      	strb	r3, [r7, #7]

	NRF_CSN_LOW
 800055e:	2200      	movs	r2, #0
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <NRF_WriteRegisters+0x4c>)
 8000564:	f001 f9f7 	bl	8001956 <HAL_GPIO_WritePin>
	NRF_Write(&reg, 1);
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff4f 	bl	8000410 <NRF_Write>
	NRF_Write(data, length);
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	4619      	mov	r1, r3
 8000576:	6838      	ldr	r0, [r7, #0]
 8000578:	f7ff ff4a 	bl	8000410 <NRF_Write>
	NRF_CSN_HIGH
 800057c:	2201      	movs	r2, #1
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <NRF_WriteRegisters+0x4c>)
 8000582:	f001 f9e8 	bl	8001956 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40011000 	.word	0x40011000

08000594 <NRF_SendCommand>:

void NRF_SendCommand(uint8_t command)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_LOW
 800059e:	2200      	movs	r2, #0
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <NRF_SendCommand+0x30>)
 80005a4:	f001 f9d7 	bl	8001956 <HAL_GPIO_WritePin>
	NRF_Write(&command, 1);
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff2f 	bl	8000410 <NRF_Write>
	NRF_CSN_HIGH
 80005b2:	2201      	movs	r2, #1
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	4803      	ldr	r0, [pc, #12]	; (80005c4 <NRF_SendCommand+0x30>)
 80005b8:	f001 f9cd 	bl	8001956 <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40011000 	.word	0x40011000

080005c8 <NRF_TX_Mode>:

void NRF_TX_Mode(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t config = NRF_ReadConfigRegister();
 80005ce:	f000 f815 	bl	80005fc <NRF_ReadConfigRegister>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	config &= ~(1<<NRF24_PRIM_RX);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f023 0301 	bic.w	r3, r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
	NRF_WriteConfigRegister(config);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f813 	bl	800060c <NRF_WriteConfigRegister>

	NRF_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80005e6:	2070      	movs	r0, #112	; 0x70
 80005e8:	f000 f88c 	bl	8000704 <NRF_WriteStatus>

	NRF_FlushRX();
 80005ec:	f000 f898 	bl	8000720 <NRF_FlushRX>
	NRF_FlushTX();
 80005f0:	f000 f89d 	bl	800072e <NRF_FlushTX>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <NRF_ReadConfigRegister>:

uint8_t NRF_ReadConfigRegister()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	return NRF_ReadRegister(NRF24_CONFIG);
 8000600:	2000      	movs	r0, #0
 8000602:	f7ff ff31 	bl	8000468 <NRF_ReadRegister>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}

0800060c <NRF_WriteConfigRegister>:

void NRF_WriteConfigRegister(uint8_t config)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	NRF_WriteRegister(NRF24_CONFIG, config);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ff6c 	bl	80004f8 <NRF_WriteRegister>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <NRF_RX_Mode>:

void NRF_RX_Mode(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	uint8_t config = NRF_ReadConfigRegister();
 800062e:	f7ff ffe5 	bl	80005fc <NRF_ReadConfigRegister>
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	NRF_SetRXAddress(0, addr_p0_backup);
 8000636:	490b      	ldr	r1, [pc, #44]	; (8000664 <NRF_RX_Mode+0x3c>)
 8000638:	2000      	movs	r0, #0
 800063a:	f000 f967 	bl	800090c <NRF_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]

	NRF_WriteConfigRegister(config);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffdf 	bl	800060c <NRF_WriteConfigRegister>

	NRF_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 800064e:	2070      	movs	r0, #112	; 0x70
 8000650:	f000 f858 	bl	8000704 <NRF_WriteStatus>

	NRF_FlushRX();
 8000654:	f000 f864 	bl	8000720 <NRF_FlushRX>
	NRF_FlushTX();
 8000658:	f000 f869 	bl	800072e <NRF_FlushTX>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000b0 	.word	0x200000b0

08000668 <NRF_SetOutputPower>:

void NRF_SetOutputPower(uint8_t output_power)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_RF_SETUP);
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff fef8 	bl	8000468 <NRF_ReadRegister>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
	reg_value |= (output_power << 1);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	b25a      	sxtb	r2, r3
 8000682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000686:	4313      	orrs	r3, r2
 8000688:	b25b      	sxtb	r3, r3
 800068a:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_RF_SETUP, reg_value);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4619      	mov	r1, r3
 8000690:	2006      	movs	r0, #6
 8000692:	f7ff ff31 	bl	80004f8 <NRF_WriteRegister>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <NRF_SetDataRate>:

void NRF_SetDataRate(uint8_t data_rate)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_RF_SETUP);
 80006a8:	2006      	movs	r0, #6
 80006aa:	f7ff fedd 	bl	8000468 <NRF_ReadRegister>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]

	if(data_rate == NRF24_RF_DR_250KBPS)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d104      	bne.n	80006c2 <NRF_SetDataRate+0x24>
		reg_value |= (1 << NRF24_RF_DR_LOW);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e00f      	b.n	80006e2 <NRF_SetDataRate+0x44>
	else if(data_rate == NRF24_RF_DR_2MBPS)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d104      	bne.n	80006d2 <NRF_SetDataRate+0x34>
		reg_value |= (1 << NRF24_RF_DR_HIGH);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e007      	b.n	80006e2 <NRF_SetDataRate+0x44>
	else //NRF24_RF_DR_1MBPS
	{
		reg_value &= ~(1 << NRF24_RF_DR_LOW);
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f023 0320 	bic.w	r3, r3, #32
 80006d8:	73fb      	strb	r3, [r7, #15]
		reg_value &= ~(1 << NRF24_RF_DR_HIGH);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	f023 0308 	bic.w	r3, r3, #8
 80006e0:	73fb      	strb	r3, [r7, #15]
	}

	NRF_WriteRegister(NRF24_RF_SETUP, reg_value);
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4619      	mov	r1, r3
 80006e6:	2006      	movs	r0, #6
 80006e8:	f7ff ff06 	bl	80004f8 <NRF_WriteRegister>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <NRF_ReadStatus>:

uint8_t NRF_ReadStatus(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	return (NRF_ReadRegister(NRF24_STATUS));
 80006f8:	2007      	movs	r0, #7
 80006fa:	f7ff feb5 	bl	8000468 <NRF_ReadRegister>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	bd80      	pop	{r7, pc}

08000704 <NRF_WriteStatus>:

void NRF_WriteStatus(uint8_t status)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	NRF_WriteRegister(NRF24_STATUS, status);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4619      	mov	r1, r3
 8000712:	2007      	movs	r0, #7
 8000714:	f7ff fef0 	bl	80004f8 <NRF_WriteRegister>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <NRF_FlushRX>:

void NRF_FlushRX(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	NRF_SendCommand(NRF24_CMD_FLUSH_RX);
 8000724:	20e2      	movs	r0, #226	; 0xe2
 8000726:	f7ff ff35 	bl	8000594 <NRF_SendCommand>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <NRF_FlushTX>:

void NRF_FlushTX(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
	NRF_SendCommand(NRF24_CMD_FLUSH_TX);
 8000732:	20e1      	movs	r0, #225	; 0xe1
 8000734:	f7ff ff2e 	bl	8000594 <NRF_SendCommand>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <NRF_SetCRC>:

void NRF_SetCRC(uint8_t crc_en, uint8_t crc_length)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = NRF_ReadRegister(NRF24_CONFIG);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff fe8b 	bl	8000468 <NRF_ReadRegister>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]

	if(crc_en == NRF24_EN_CRC)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d110      	bne.n	800077e <NRF_SetCRC+0x42>
	{
		reg_value |= (1 << NRF24_EN_CRC);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	73fb      	strb	r3, [r7, #15]
		if(crc_length == NRF24_CRC_WIDTH_2B)
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d104      	bne.n	8000774 <NRF_SetCRC+0x38>
			reg_value |= (1 << NRF24_CRCO);
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	e008      	b.n	8000786 <NRF_SetCRC+0x4a>
		else
			reg_value &= ~(1 << NRF24_CRCO);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f023 0304 	bic.w	r3, r3, #4
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e003      	b.n	8000786 <NRF_SetCRC+0x4a>
	}
	else
	{
		reg_value &= ~(1 << NRF24_EN_CRC);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f023 0308 	bic.w	r3, r3, #8
 8000784:	73fb      	strb	r3, [r7, #15]
	}
	NRF_WriteRegister(NRF24_CONFIG, reg_value);
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4619      	mov	r1, r3
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff feb4 	bl	80004f8 <NRF_WriteRegister>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <NRF_SetRetransmission>:

void NRF_SetRetransmission(uint8_t retransmission_delay, uint8_t retranmission_repeat)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]

	reg_value = (retransmission_delay << 4) ;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	73fb      	strb	r3, [r7, #15]
	reg_value |= retranmission_repeat;
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	73fb      	strb	r3, [r7, #15]

	NRF_WriteRegister(NRF24_SETUP_RETR, reg_value);
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	4619      	mov	r1, r3
 80007be:	2004      	movs	r0, #4
 80007c0:	f7ff fe9a 	bl	80004f8 <NRF_WriteRegister>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <NRF_SetChannel>:

void NRF_SetChannel(uint8_t channel)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	NRF_WriteRegister(NRF24_RF_CH, channel);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4619      	mov	r1, r3
 80007da:	2005      	movs	r0, #5
 80007dc:	f7ff fe8c 	bl	80004f8 <NRF_WriteRegister>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <NRF_SetPayloadSize>:

void NRF_SetPayloadSize(uint8_t pipe_number, uint8_t size)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	71bb      	strb	r3, [r7, #6]
	NRF_WriteRegister((NRF24_RX_PW_P0 + pipe_number), size);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	3311      	adds	r3, #17
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	79ba      	ldrb	r2, [r7, #6]
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe78 	bl	80004f8 <NRF_WriteRegister>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <NRF_PowerUp>:

void NRF_PowerUp(uint8_t power_up)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_CONFIG);
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fe24 	bl	8000468 <NRF_ReadRegister>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
	reg_value |= (power_up << NRF24_PWR_UP);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b25a      	sxtb	r2, r3
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4313      	orrs	r3, r2
 8000830:	b25b      	sxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_CONFIG, reg_value);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	4619      	mov	r1, r3
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fe5d 	bl	80004f8 <NRF_WriteRegister>
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <NRF_SetDataPipe>:

void NRF_SetDataPipe(uint8_t pipe_number)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	73fb      	strb	r3, [r7, #15]
	reg_value |= (1 << pipe_number);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2201      	movs	r2, #1
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	b25a      	sxtb	r2, r3
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4313      	orrs	r3, r2
 8000864:	b25b      	sxtb	r3, r3
 8000866:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_EN_RXADDR, reg_value);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	4619      	mov	r1, r3
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fe43 	bl	80004f8 <NRF_WriteRegister>
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <NRF_EnableAutoACK>:

void NRF_EnableAutoACK(uint8_t pipe_number, uint8_t enable)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	460a      	mov	r2, r1
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	4613      	mov	r3, r2
 8000888:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = NRF_ReadRegister(NRF24_EN_AA);
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fdec 	bl	8000468 <NRF_ReadRegister>
 8000890:	4603      	mov	r3, r0
 8000892:	73fb      	strb	r3, [r7, #15]
	if(enable)
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00a      	beq.n	80008b0 <NRF_EnableAutoACK+0x36>
		reg_value |= (1 << pipe_number);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2201      	movs	r2, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	b25a      	sxtb	r2, r3
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e00b      	b.n	80008c8 <NRF_EnableAutoACK+0x4e>
	else
		reg_value &= ~(1 << pipe_number);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2201      	movs	r2, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4013      	ands	r3, r2
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	73fb      	strb	r3, [r7, #15]

	NRF_WriteRegister(NRF24_EN_AA, reg_value);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4619      	mov	r1, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fe13 	bl	80004f8 <NRF_WriteRegister>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <NRF_SetAddressWidth>:

void NRF_SetAddressWidth(uint8_t address_width)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_SETUP_AW);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff fdbf 	bl	8000468 <NRF_ReadRegister>
 80008ea:	4603      	mov	r3, r0
 80008ec:	73fb      	strb	r3, [r7, #15]

	reg_value |= address_width;
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_SETUP_AW, (reg_value - 2));
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	3b02      	subs	r3, #2
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	2003      	movs	r0, #3
 8000900:	f7ff fdfa 	bl	80004f8 <NRF_WriteRegister>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <NRF_SetRXAddress>:

void NRF_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
	if((pipe == 0) || (pipe == 1))
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <NRF_SetRXAddress+0x18>
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d11d      	bne.n	8000960 <NRF_SetRXAddress+0x54>
	{
		uint8_t address_rev[NRF24_ADD_WIDTH];
		for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e00d      	b.n	8000946 <NRF_SetRXAddress+0x3a>
			address_rev[NRF24_ADD_WIDTH - 1 - i] = address[i];
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	441a      	add	r2, r3
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	f1c3 0302 	rsb	r3, r3, #2
 8000936:	7812      	ldrb	r2, [r2, #0]
 8000938:	3310      	adds	r3, #16
 800093a:	443b      	add	r3, r7
 800093c:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	3301      	adds	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d9ee      	bls.n	800092a <NRF_SetRXAddress+0x1e>
		NRF_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADD_WIDTH);
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	330a      	adds	r3, #10
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f107 010c 	add.w	r1, r7, #12
 8000956:	2203      	movs	r2, #3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fdf3 	bl	8000544 <NRF_WriteRegisters>
	{
 800095e:	e00a      	b.n	8000976 <NRF_SetRXAddress+0x6a>
	}
	else
		NRF_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADD_WIDTH-1]);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	330a      	adds	r3, #10
 8000964:	b2da      	uxtb	r2, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	3302      	adds	r3, #2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	4610      	mov	r0, r2
 8000970:	f7ff fdc2 	bl	80004f8 <NRF_WriteRegister>
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <NRF_SetTXAddress>:

void NRF_SetTXAddress(uint8_t* address)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint8_t address_rev[NRF24_ADD_WIDTH];

	NRF_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADD_WIDTH);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2203      	movs	r2, #3
 800098e:	4619      	mov	r1, r3
 8000990:	200a      	movs	r0, #10
 8000992:	f7ff fd8d 	bl	80004b0 <NRF_ReadRegisters>

	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e00c      	b.n	80009b6 <NRF_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADD_WIDTH - 1 - i] = address_rev[i];
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	f1c3 0302 	rsb	r3, r3, #2
 80009a4:	3210      	adds	r2, #16
 80009a6:	443a      	add	r2, r7
 80009a8:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <NRF_SetTXAddress+0x88>)
 80009ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d9ef      	bls.n	800099c <NRF_SetTXAddress+0x1c>

	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
 80009c0:	e00d      	b.n	80009de <NRF_SetTXAddress+0x5e>
		address_rev[NRF24_ADD_WIDTH - 1 - i] = address[i];
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	441a      	add	r2, r3
 80009c8:	7bbb      	ldrb	r3, [r7, #14]
 80009ca:	f1c3 0302 	rsb	r3, r3, #2
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	3310      	adds	r3, #16
 80009d2:	443b      	add	r3, r7
 80009d4:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	3301      	adds	r3, #1
 80009dc:	73bb      	strb	r3, [r7, #14]
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d9ee      	bls.n	80009c2 <NRF_SetTXAddress+0x42>

	NRF_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADD_WIDTH);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2203      	movs	r2, #3
 80009ea:	4619      	mov	r1, r3
 80009ec:	200a      	movs	r0, #10
 80009ee:	f7ff fda9 	bl	8000544 <NRF_WriteRegisters>
	NRF_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADD_WIDTH);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2203      	movs	r2, #3
 80009f8:	4619      	mov	r1, r3
 80009fa:	2010      	movs	r0, #16
 80009fc:	f7ff fda2 	bl	8000544 <NRF_WriteRegisters>
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000b0 	.word	0x200000b0

08000a0c <NRF_TXPayload>:

void NRF_TXPayload(uint8_t *data, uint8_t size)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
	NRF_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	20a0      	movs	r0, #160	; 0xa0
 8000a1e:	f7ff fd91 	bl	8000544 <NRF_WriteRegisters>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <NRF_ReadRXPaylaod>:

void NRF_ReadRXPaylaod(uint8_t *data)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	NRF_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8000a32:	2201      	movs	r2, #1
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	2061      	movs	r0, #97	; 0x61
 8000a38:	f7ff fd3a 	bl	80004b0 <NRF_ReadRegisters>
	NRF_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff fd5a 	bl	80004f8 <NRF_WriteRegister>
	if(NRF_ReadStatus() & (1<<NRF24_TX_DS))
 8000a44:	f7ff fe56 	bl	80006f4 <NRF_ReadStatus>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <NRF_ReadRXPaylaod+0x30>
		NRF_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8000a52:	2120      	movs	r1, #32
 8000a54:	2007      	movs	r0, #7
 8000a56:	f7ff fd4f 	bl	80004f8 <NRF_WriteRegister>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <NRF_DataAvailable>:

uint8_t NRF_DataAvailable(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
	uint8_t status = NRF_ReadStatus();
 8000a68:	f7ff fe44 	bl	80006f4 <NRF_ReadStatus>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
	if ((status & (1 << 6)))
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d009      	beq.n	8000a8e <NRF_DataAvailable+0x2c>
	{
		status |= (1<<6);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	71fb      	strb	r3, [r7, #7]
		NRF_WriteStatus(status);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe3d 	bl	8000704 <NRF_WriteStatus>
		return 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <NRF_DataAvailable+0x2e>
	}
	return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <NRF_Init>:

void NRF_Init(SPI_HandleTypeDef *hspi, char mode)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	NRF_spi = hspi;
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <NRF_Init+0xa4>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]

	NRF_CE_LOW
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4824      	ldr	r0, [pc, #144]	; (8000b40 <NRF_Init+0xa8>)
 8000ab0:	f000 ff51 	bl	8001956 <HAL_GPIO_WritePin>
	NRF_SetOutputPower(NRF24_PA_PWR_0dBM);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f7ff fdd7 	bl	8000668 <NRF_SetOutputPower>
	NRF_SetDataRate(NRF24_RF_DR_250KBPS);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fdef 	bl	800069e <NRF_SetDataRate>
	NRF_SetCRC(CRC_ENABLED, NRF24_CRC_WIDTH_1B);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff fe3a 	bl	800073c <NRF_SetCRC>
	NRF_SetRetransmission(NRF24_RETRANSMISSION_DELAY, NRF24_RETRANMISSION_REPEAT);
 8000ac8:	2107      	movs	r1, #7
 8000aca:	2004      	movs	r0, #4
 8000acc:	f7ff fe64 	bl	8000798 <NRF_SetRetransmission>

	NRF_SetDataPipe(NRF24_PIPE_NUMBER);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff feb8 	bl	8000846 <NRF_SetDataPipe>
	NRF_EnableAutoACK(NRF24_PIPE_NUMBER, NRF24_EN_AUTO_ACK);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fece 	bl	800087a <NRF_EnableAutoACK>
	NRF_SetPayloadSize(NRF24_PIPE_NUMBER, NRF24_PAYLOAD_SIZE);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fe81 	bl	80007e8 <NRF_SetPayloadSize>

	NRF_SetChannel(NRF24_CHANNEL);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f7ff fe70 	bl	80007cc <NRF_SetChannel>
	NRF_SetAddressWidth(NRF24_ADD_WIDTH);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f7ff fef4 	bl	80008da <NRF_SetAddressWidth>

	NRF_SetRXAddress(NRF24_PIPE_NUMBER, (uint8_t*)"Odb");
 8000af2:	4914      	ldr	r1, [pc, #80]	; (8000b44 <NRF_Init+0xac>)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff ff09 	bl	800090c <NRF_SetRXAddress>
	NRF_SetTXAddress((uint8_t*)"Nad");
 8000afa:	4813      	ldr	r0, [pc, #76]	; (8000b48 <NRF_Init+0xb0>)
 8000afc:	f7ff ff40 	bl	8000980 <NRF_SetTXAddress>

	nrf_mode = mode;
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <NRF_Init+0xb4>)
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	7013      	strb	r3, [r2, #0]
	if(nrf_mode == 't')
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <NRF_Init+0xb4>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b74      	cmp	r3, #116	; 0x74
 8000b0c:	d105      	bne.n	8000b1a <NRF_Init+0x82>
	{
		NRF_TX_Mode();
 8000b0e:	f7ff fd5b 	bl	80005c8 <NRF_TX_Mode>
		printf("Configured as transmitter \n");
 8000b12:	480f      	ldr	r0, [pc, #60]	; (8000b50 <NRF_Init+0xb8>)
 8000b14:	f002 ff4a 	bl	80039ac <puts>
		NRF_RX_Mode();
		printf("Configured as receiver \n");
	}
	else
		printf("No mode selected \n");
}
 8000b18:	e00c      	b.n	8000b34 <NRF_Init+0x9c>
	else if (nrf_mode == 'r')
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <NRF_Init+0xb4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b72      	cmp	r3, #114	; 0x72
 8000b20:	d105      	bne.n	8000b2e <NRF_Init+0x96>
		NRF_RX_Mode();
 8000b22:	f7ff fd81 	bl	8000628 <NRF_RX_Mode>
		printf("Configured as receiver \n");
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <NRF_Init+0xbc>)
 8000b28:	f002 ff40 	bl	80039ac <puts>
}
 8000b2c:	e002      	b.n	8000b34 <NRF_Init+0x9c>
		printf("No mode selected \n");
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <NRF_Init+0xc0>)
 8000b30:	f002 ff3c 	bl	80039ac <puts>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	08004c84 	.word	0x08004c84
 8000b48:	08004c88 	.word	0x08004c88
 8000b4c:	200000ac 	.word	0x200000ac
 8000b50:	08004c8c 	.word	0x08004c8c
 8000b54:	08004ca8 	.word	0x08004ca8
 8000b58:	08004cc0 	.word	0x08004cc0

08000b5c <NRF_process>:

void NRF_process(uint8_t message)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if(NRF_Faults != NRF_NO_ERROR)
 8000b66:	4b8d      	ldr	r3, [pc, #564]	; (8000d9c <NRF_process+0x240>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <NRF_process+0x18>
		NRF_State = NRF_IDLE;
 8000b6e:	4b8c      	ldr	r3, [pc, #560]	; (8000da0 <NRF_process+0x244>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	701a      	strb	r2, [r3, #0]

	switch (NRF_State)
 8000b74:	4b8a      	ldr	r3, [pc, #552]	; (8000da0 <NRF_process+0x244>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b07      	cmp	r3, #7
 8000b7a:	f200 810a 	bhi.w	8000d92 <NRF_process+0x236>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <NRF_process+0x28>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000ba5 	.word	0x08000ba5
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000bd9 	.word	0x08000bd9
 8000b90:	08000c69 	.word	0x08000c69
 8000b94:	08000c45 	.word	0x08000c45
 8000b98:	08000c83 	.word	0x08000c83
 8000b9c:	08000cf3 	.word	0x08000cf3
 8000ba0:	08000d11 	.word	0x08000d11
	{
	case NRF_POWER_DOWN:
		NRF_PowerUp(NRF24_POWER_ON);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff fe33 	bl	8000810 <NRF_PowerUp>
		lastTick100us = Clock_GetTick();
 8000baa:	f7ff fae5 	bl	8000178 <Clock_GetTick>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a7c      	ldr	r2, [pc, #496]	; (8000da4 <NRF_process+0x248>)
 8000bb2:	6013      	str	r3, [r2, #0]
		NRF_State = NRF_START_UP;
 8000bb4:	4b7a      	ldr	r3, [pc, #488]	; (8000da0 <NRF_process+0x244>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e0ea      	b.n	8000d92 <NRF_process+0x236>

	case NRF_START_UP:
		if(Clock_GetTick() - lastTick100us >= NRF_START_UP_TIME)
 8000bbc:	f7ff fadc 	bl	8000178 <Clock_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4b78      	ldr	r3, [pc, #480]	; (8000da4 <NRF_process+0x248>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bcc:	f0c0 80d4 	bcc.w	8000d78 <NRF_process+0x21c>
			NRF_State = NRF_STANBY1;
 8000bd0:	4b73      	ldr	r3, [pc, #460]	; (8000da0 <NRF_process+0x244>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]
		break;
 8000bd6:	e0cf      	b.n	8000d78 <NRF_process+0x21c>

	case NRF_STANBY1:
		lastTick100us = Clock_GetTick();
 8000bd8:	f7ff face 	bl	8000178 <Clock_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a71      	ldr	r2, [pc, #452]	; (8000da4 <NRF_process+0x248>)
 8000be0:	6013      	str	r3, [r2, #0]
		if(nrf_mode == 't')
 8000be2:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <NRF_process+0x24c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b74      	cmp	r3, #116	; 0x74
 8000be8:	d11b      	bne.n	8000c22 <NRF_process+0xc6>
		{
			uint8_t message_length = sprintf((char *) tx_buffer, "%d", message);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	461a      	mov	r2, r3
 8000bee:	496f      	ldr	r1, [pc, #444]	; (8000dac <NRF_process+0x250>)
 8000bf0:	486f      	ldr	r0, [pc, #444]	; (8000db0 <NRF_process+0x254>)
 8000bf2:	f002 fee3 	bl	80039bc <siprintf>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	737b      	strb	r3, [r7, #13]

			if(message_length != NRF24_PAYLOAD_SIZE)
 8000bfa:	7b7b      	ldrb	r3, [r7, #13]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d002      	beq.n	8000c06 <NRF_process+0xaa>
				NRF_Faults = NRF_DIFFRENT_MESSAGE_SIZE;
 8000c00:	4b66      	ldr	r3, [pc, #408]	; (8000d9c <NRF_process+0x240>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	701a      	strb	r2, [r3, #0]

			NRF_TXPayload(tx_buffer, message_length);
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4869      	ldr	r0, [pc, #420]	; (8000db0 <NRF_process+0x254>)
 8000c0c:	f7ff fefe 	bl	8000a0c <NRF_TXPayload>

			NRF_CE_HIGH
 8000c10:	2201      	movs	r2, #1
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4867      	ldr	r0, [pc, #412]	; (8000db4 <NRF_process+0x258>)
 8000c16:	f000 fe9e 	bl	8001956 <HAL_GPIO_WritePin>
			NRF_State = NRF_TX_SETTING;
 8000c1a:	4b61      	ldr	r3, [pc, #388]	; (8000da0 <NRF_process+0x244>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	701a      	strb	r2, [r3, #0]
			NRF_State = NRF_RX_SETTING;
		}

		else
			NRF_Faults = NRF_NO_MODE;
		break;
 8000c20:	e0b7      	b.n	8000d92 <NRF_process+0x236>
		else if(nrf_mode == 'r')
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <NRF_process+0x24c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b72      	cmp	r3, #114	; 0x72
 8000c28:	d108      	bne.n	8000c3c <NRF_process+0xe0>
			NRF_CE_HIGH
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	4861      	ldr	r0, [pc, #388]	; (8000db4 <NRF_process+0x258>)
 8000c30:	f000 fe91 	bl	8001956 <HAL_GPIO_WritePin>
			NRF_State = NRF_RX_SETTING;
 8000c34:	4b5a      	ldr	r3, [pc, #360]	; (8000da0 <NRF_process+0x244>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	701a      	strb	r2, [r3, #0]
		break;
 8000c3a:	e0aa      	b.n	8000d92 <NRF_process+0x236>
			NRF_Faults = NRF_NO_MODE;
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <NRF_process+0x240>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		break;
 8000c42:	e0a6      	b.n	8000d92 <NRF_process+0x236>

	case NRF_TX_SETTING:
		if(Clock_GetTick() - lastTick100us >= NRF_SETTING_TIME)
 8000c44:	f7ff fa98 	bl	8000178 <Clock_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <NRF_process+0x248>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2bc7      	cmp	r3, #199	; 0xc7
 8000c52:	f240 8093 	bls.w	8000d7c <NRF_process+0x220>
		{
			NRF_State = NRF_TX_MODE;
 8000c56:	4b52      	ldr	r3, [pc, #328]	; (8000da0 <NRF_process+0x244>)
 8000c58:	2205      	movs	r2, #5
 8000c5a:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 8000c5c:	f000 fba4 	bl	80013a8 <HAL_GetTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <NRF_process+0x25c>)
 8000c64:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c66:	e089      	b.n	8000d7c <NRF_process+0x220>

	case NRF_RX_SETTING:
		if(Clock_GetTick() - lastTick100us >= NRF_SETTING_TIME)
 8000c68:	f7ff fa86 	bl	8000178 <Clock_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <NRF_process+0x248>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2bc7      	cmp	r3, #199	; 0xc7
 8000c76:	f240 8083 	bls.w	8000d80 <NRF_process+0x224>
			NRF_State = NRF_RX_MODE;
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <NRF_process+0x244>)
 8000c7c:	2206      	movs	r2, #6
 8000c7e:	701a      	strb	r2, [r3, #0]
		break;
 8000c80:	e07e      	b.n	8000d80 <NRF_process+0x224>

	case NRF_TX_MODE:;
		uint8_t fifo_status = NRF_ReadRegister(NRF24_FIFO_STATUS);
 8000c82:	2017      	movs	r0, #23
 8000c84:	f7ff fbf0 	bl	8000468 <NRF_ReadRegister>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
		uint8_t status = NRF_ReadStatus();
 8000c8c:	f7ff fd32 	bl	80006f4 <NRF_ReadStatus>
 8000c90:	4603      	mov	r3, r0
 8000c92:	73bb      	strb	r3, [r7, #14]

		if(status & (1 << NRF24_MAX_RT))
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <NRF_process+0x148>
			NRF_Faults = NRF_MAX_RETRANSMITS_FLAG;
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <NRF_process+0x240>)
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	701a      	strb	r2, [r3, #0]

		if(status & (1 << NRF24_TX_FULL))
 8000ca4:	7bbb      	ldrb	r3, [r7, #14]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <NRF_process+0x158>
			NRF_Faults = NRF_TX_FIFO_FULL;
 8000cae:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <NRF_process+0x240>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	701a      	strb	r2, [r3, #0]

		if((HAL_GetTick() - last_tick >= 1000) && (status & (1 << NRF24_TX_DS)) && (fifo_status & (1 << NRF24_TX_EMPTY)))
 8000cb4:	f000 fb78 	bl	80013a8 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <NRF_process+0x25c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc4:	d35e      	bcc.n	8000d84 <NRF_process+0x228>
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f003 0320 	and.w	r3, r3, #32
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d059      	beq.n	8000d84 <NRF_process+0x228>
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d054      	beq.n	8000d84 <NRF_process+0x228>
		{
			printf("Correct transmission \n");
 8000cda:	4838      	ldr	r0, [pc, #224]	; (8000dbc <NRF_process+0x260>)
 8000cdc:	f002 fe66 	bl	80039ac <puts>
			NRF_CE_LOW
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	4833      	ldr	r0, [pc, #204]	; (8000db4 <NRF_process+0x258>)
 8000ce6:	f000 fe36 	bl	8001956 <HAL_GPIO_WritePin>
			NRF_State = NRF_STANBY1;
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <NRF_process+0x244>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cf0:	e048      	b.n	8000d84 <NRF_process+0x228>

	case NRF_RX_MODE:
		if(NRF_DataAvailable())
 8000cf2:	f7ff feb6 	bl	8000a62 <NRF_DataAvailable>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d045      	beq.n	8000d88 <NRF_process+0x22c>
		{
			NRF_ReadRXPaylaod(rx_buffer);
 8000cfc:	4830      	ldr	r0, [pc, #192]	; (8000dc0 <NRF_process+0x264>)
 8000cfe:	f7ff fe94 	bl	8000a2a <NRF_ReadRXPaylaod>
			printf("Received message: %c \n", rx_buffer[0]);
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <NRF_process+0x264>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	482e      	ldr	r0, [pc, #184]	; (8000dc4 <NRF_process+0x268>)
 8000d0a:	f002 fdc9 	bl	80038a0 <iprintf>
		}
		break;
 8000d0e:	e03b      	b.n	8000d88 <NRF_process+0x22c>

	case NRF_IDLE:
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <NRF_process+0x26c>)
 8000d16:	f000 fe07 	bl	8001928 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d135      	bne.n	8000d8c <NRF_process+0x230>
		{
			HAL_Delay(20);
 8000d20:	2014      	movs	r0, #20
 8000d22:	f000 fb4b 	bl	80013bc <HAL_Delay>
			while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){};
 8000d26:	bf00      	nop
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <NRF_process+0x26c>)
 8000d2e:	f000 fdfb 	bl	8001928 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f7      	beq.n	8000d28 <NRF_process+0x1cc>
			switch(NRF_Faults)
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <NRF_process+0x240>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d826      	bhi.n	8000d90 <NRF_process+0x234>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <NRF_process+0x1ec>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000d59 	.word	0x08000d59
 8000d4c:	08000d61 	.word	0x08000d61
 8000d50:	08000d69 	.word	0x08000d69
 8000d54:	08000d71 	.word	0x08000d71
			{
				case NRF_NO_MODE:
					printf("NRF_NO_MODE \n");
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <NRF_process+0x270>)
 8000d5a:	f002 fe27 	bl	80039ac <puts>
				break;
 8000d5e:	e018      	b.n	8000d92 <NRF_process+0x236>

				case NRF_DIFFRENT_MESSAGE_SIZE:
					printf("NRF_DIFFRENT_MESSAGE_SIZE \n");
 8000d60:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <NRF_process+0x274>)
 8000d62:	f002 fe23 	bl	80039ac <puts>
					break;
 8000d66:	e014      	b.n	8000d92 <NRF_process+0x236>

				case NRF_MAX_RETRANSMITS_FLAG:
					printf("NRF_MAX_RETRANSMITS_FLAG \n");
 8000d68:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <NRF_process+0x278>)
 8000d6a:	f002 fe1f 	bl	80039ac <puts>
					break;
 8000d6e:	e010      	b.n	8000d92 <NRF_process+0x236>

				case NRF_TX_FIFO_FULL:
					printf("NRF_TX_FIFO_FULL \n");
 8000d70:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <NRF_process+0x27c>)
 8000d72:	f002 fe1b 	bl	80039ac <puts>
					break;
 8000d76:	e00c      	b.n	8000d92 <NRF_process+0x236>
		break;
 8000d78:	bf00      	nop
 8000d7a:	e00a      	b.n	8000d92 <NRF_process+0x236>
		break;
 8000d7c:	bf00      	nop
 8000d7e:	e008      	b.n	8000d92 <NRF_process+0x236>
		break;
 8000d80:	bf00      	nop
 8000d82:	e006      	b.n	8000d92 <NRF_process+0x236>
		break;
 8000d84:	bf00      	nop
 8000d86:	e004      	b.n	8000d92 <NRF_process+0x236>
		break;
 8000d88:	bf00      	nop
 8000d8a:	e002      	b.n	8000d92 <NRF_process+0x236>

				default:
				break;
			}
		}
 8000d8c:	bf00      	nop
 8000d8e:	e000      	b.n	8000d92 <NRF_process+0x236>
				break;
 8000d90:	bf00      	nop
	}
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000099 	.word	0x20000099
 8000da0:	20000098 	.word	0x20000098
 8000da4:	200000a4 	.word	0x200000a4
 8000da8:	200000ac 	.word	0x200000ac
 8000dac:	08004cd4 	.word	0x08004cd4
 8000db0:	2000009c 	.word	0x2000009c
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	200000a8 	.word	0x200000a8
 8000dbc:	08004cd8 	.word	0x08004cd8
 8000dc0:	200000a0 	.word	0x200000a0
 8000dc4:	08004cf0 	.word	0x08004cf0
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	08004d08 	.word	0x08004d08
 8000dd0:	08004d18 	.word	0x08004d18
 8000dd4:	08004d34 	.word	0x08004d34
 8000dd8:	08004d50 	.word	0x08004d50

08000ddc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <MX_SPI1_Init+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000de8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e10:	2220      	movs	r2, #32
 8000e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e28:	220a      	movs	r2, #10
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_SPI1_Init+0x64>)
 8000e2e:	f001 f9e7 	bl	8002200 <HAL_SPI_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e38:	f7ff fae5 	bl	8000406 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000b4 	.word	0x200000b4
 8000e44:	40013000 	.word	0x40013000

08000e48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d12f      	bne.n	8000ec8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e98:	23a0      	movs	r3, #160	; 0xa0
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_SPI_MspInit+0x90>)
 8000eac:	f000 fbb8 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb0:	2340      	movs	r3, #64	; 0x40
 8000eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_SPI_MspInit+0x90>)
 8000ec4:	f000 fbac 	bl	8001620 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x60>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_MspInit+0x60>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f9fd 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_UP_IRQHandler+0x10>)
 8000f96:	f001 ff41 	bl	8002e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000110 	.word	0x20000110

08000fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fac:	f000 fcec 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
	}

return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e009      	b.n	8001014 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f96f 	bl	80002ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf1      	blt.n	8001000 <_write+0x12>
	}
	return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_close>:

int _close(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return -1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104c:	605a      	str	r2, [r3, #4]
	return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <_isatty>:

int _isatty(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f002 fbc0 	bl	800383c <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20005000 	.word	0x20005000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	2000010c 	.word	0x2000010c
 80010f0:	200001b0 	.word	0x200001b0

080010f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM1_Init+0x98>)
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <MX_TIM1_Init+0x9c>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM1_Init+0x98>)
 8001124:	f240 227f 	movw	r2, #639	; 0x27f
 8001128:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM1_Init+0x98>)
 8001132:	2209      	movs	r2, #9
 8001134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM1_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM1_Init+0x98>)
 800114a:	f001 fdc5 	bl	8002cd8 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001154:	f7ff f957 	bl	8000406 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM1_Init+0x98>)
 8001166:	f001 ff61 	bl	800302c <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001170:	f7ff f949 	bl	8000406 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM1_Init+0x98>)
 8001182:	f002 f933 	bl	80033ec <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800118c:	f7ff f93b 	bl	8000406 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000110 	.word	0x20000110
 800119c:	40012c00 	.word	0x40012c00

080011a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_TIM_Base_MspInit+0x34>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10b      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_TIM_Base_MspInit+0x38>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_TIM_Base_MspInit+0x38>)
 80011b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011bc:	6193      	str	r3, [r2, #24]
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_TIM_Base_MspInit+0x38>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40021000 	.word	0x40021000

080011dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART2_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART2_UART_Init+0x4c>)
 8001214:	f002 f95a 	bl	80034cc <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f7ff f8f2 	bl	8000406 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000158 	.word	0x20000158
 800122c:	40004400 	.word	0x40004400

08001230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x70>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d123      	bne.n	8001298 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0x74>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <HAL_UART_MspInit+0x74>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	61d3      	str	r3, [r2, #28]
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_MspInit+0x74>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_UART_MspInit+0x74>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_UART_MspInit+0x74>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_UART_MspInit+0x74>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001280:	230c      	movs	r3, #12
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_UART_MspInit+0x78>)
 8001294:	f000 f9c4 	bl	8001620 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010800 	.word	0x40010800

080012ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012d2:	f7ff ff0f 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f002 fab7 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012da:	f7ff f827 	bl	800032c <main>
  bx lr
 80012de:	4770      	bx	lr
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	08004e2c 	.word	0x08004e2c
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	200001b0 	.word	0x200001b0

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x28>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f947 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fde2 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f95f 	bl	8001606 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f927 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x1c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x20>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <HAL_IncTick+0x20>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000008 	.word	0x20000008
 80013a4:	2000019c 	.word	0x2000019c

080013a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_GetTick+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	2000019c 	.word	0x2000019c

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff fff0 	bl	80013a8 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffe0 	bl	80013a8 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <__NVIC_EnableIRQ+0x34>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff90 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff2d 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff42 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff35 	bl	8001468 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b08b      	sub	sp, #44	; 0x2c
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	e169      	b.n	8001908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001634:	2201      	movs	r2, #1
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 8158 	bne.w	8001902 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a9a      	ldr	r2, [pc, #616]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d05e      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 800165c:	4a98      	ldr	r2, [pc, #608]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d875      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001662:	4a98      	ldr	r2, [pc, #608]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d058      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001668:	4a96      	ldr	r2, [pc, #600]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d86f      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800166e:	4a96      	ldr	r2, [pc, #600]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d052      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001674:	4a94      	ldr	r2, [pc, #592]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d869      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800167a:	4a94      	ldr	r2, [pc, #592]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d04c      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001680:	4a92      	ldr	r2, [pc, #584]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d863      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001686:	4a92      	ldr	r2, [pc, #584]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d046      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 800168c:	4a90      	ldr	r2, [pc, #576]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d85d      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001692:	2b12      	cmp	r3, #18
 8001694:	d82a      	bhi.n	80016ec <HAL_GPIO_Init+0xcc>
 8001696:	2b12      	cmp	r3, #18
 8001698:	d859      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <HAL_GPIO_Init+0x80>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	0800171b 	.word	0x0800171b
 80016a4:	080016f5 	.word	0x080016f5
 80016a8:	08001707 	.word	0x08001707
 80016ac:	08001749 	.word	0x08001749
 80016b0:	0800174f 	.word	0x0800174f
 80016b4:	0800174f 	.word	0x0800174f
 80016b8:	0800174f 	.word	0x0800174f
 80016bc:	0800174f 	.word	0x0800174f
 80016c0:	0800174f 	.word	0x0800174f
 80016c4:	0800174f 	.word	0x0800174f
 80016c8:	0800174f 	.word	0x0800174f
 80016cc:	0800174f 	.word	0x0800174f
 80016d0:	0800174f 	.word	0x0800174f
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	0800174f 	.word	0x0800174f
 80016dc:	0800174f 	.word	0x0800174f
 80016e0:	0800174f 	.word	0x0800174f
 80016e4:	080016fd 	.word	0x080016fd
 80016e8:	08001711 	.word	0x08001711
 80016ec:	4a79      	ldr	r2, [pc, #484]	; (80018d4 <HAL_GPIO_Init+0x2b4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016f2:	e02c      	b.n	800174e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e029      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	3304      	adds	r3, #4
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e024      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	3308      	adds	r3, #8
 800170c:	623b      	str	r3, [r7, #32]
          break;
 800170e:	e01f      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	330c      	adds	r3, #12
 8001716:	623b      	str	r3, [r7, #32]
          break;
 8001718:	e01a      	b.n	8001750 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001722:	2304      	movs	r3, #4
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e013      	b.n	8001750 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	611a      	str	r2, [r3, #16]
          break;
 800173a:	e009      	b.n	8001750 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	615a      	str	r2, [r3, #20]
          break;
 8001746:	e003      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x130>
          break;
 800174e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d801      	bhi.n	800175a <HAL_GPIO_Init+0x13a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	e001      	b.n	800175e <HAL_GPIO_Init+0x13e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d802      	bhi.n	800176c <HAL_GPIO_Init+0x14c>
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x152>
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	3b08      	subs	r3, #8
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	210f      	movs	r1, #15
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	6a39      	ldr	r1, [r7, #32]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	431a      	orrs	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80b1 	beq.w	8001902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a40      	ldr	r2, [pc, #256]	; (80018e0 <HAL_GPIO_Init+0x2c0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d013      	beq.n	800180c <HAL_GPIO_Init+0x1ec>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1e8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3e      	ldr	r2, [pc, #248]	; (80018e8 <HAL_GPIO_Init+0x2c8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1e4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_GPIO_Init+0x2cc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1e0>
 80017fc:	2303      	movs	r3, #3
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001800:	2304      	movs	r3, #4
 8001802:	e004      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001804:	2302      	movs	r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 800180c:	2300      	movs	r3, #0
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	f002 0203 	and.w	r2, r2, #3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4093      	lsls	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181e:	492f      	ldr	r1, [pc, #188]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	492c      	ldr	r1, [pc, #176]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4928      	ldr	r1, [pc, #160]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4922      	ldr	r1, [pc, #136]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	491e      	ldr	r1, [pc, #120]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4918      	ldr	r1, [pc, #96]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4914      	ldr	r1, [pc, #80]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d021      	beq.n	80018f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
 80018bc:	e021      	b.n	8001902 <HAL_GPIO_Init+0x2e2>
 80018be:	bf00      	nop
 80018c0:	10320000 	.word	0x10320000
 80018c4:	10310000 	.word	0x10310000
 80018c8:	10220000 	.word	0x10220000
 80018cc:	10210000 	.word	0x10210000
 80018d0:	10120000 	.word	0x10120000
 80018d4:	10110000 	.word	0x10110000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40011400 	.word	0x40011400
 80018f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4909      	ldr	r1, [pc, #36]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018fe:	4013      	ands	r3, r2
 8001900:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3301      	adds	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f47f ae8e 	bne.w	8001634 <HAL_GPIO_Init+0x14>
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	372c      	adds	r7, #44	; 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e001      	b.n	800194a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001966:	787b      	ldrb	r3, [r7, #1]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001972:	e003      	b.n	800197c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	041a      	lsls	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
	...

08001988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f806 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e272      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8087 	beq.w	8001afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ec:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d00c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f8:	4b8f      	ldr	r3, [pc, #572]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d112      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5e>
 8001a04:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d10b      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	4b89      	ldr	r3, [pc, #548]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d06c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x12c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d168      	bne.n	8001af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e24c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x76>
 8001a34:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a7f      	ldr	r2, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e02e      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x98>
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a77      	ldr	r2, [pc, #476]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xbc>
 8001a6e:	4b72      	ldr	r3, [pc, #456]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a71      	ldr	r2, [pc, #452]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
 8001a88:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc7e 	bl	80013a8 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fc7a 	bl	80013a8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e200      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xe4>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc6a 	bl	80013a8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fc66 	bl	80013a8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1ec      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x10c>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d11c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x18c>
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x176>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e1c0      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4939      	ldr	r1, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	e03a      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fc1f 	bl	80013a8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fc1b 	bl	80013a8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1a1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4927      	ldr	r1, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fbfe 	bl	80013a8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fbfa 	bl	80013a8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e180      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d03a      	beq.n	8001c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d019      	beq.n	8001c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fbde 	bl	80013a8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fbda 	bl	80013a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e160      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 fad8 	bl	80021c4 <RCC_Delay>
 8001c14:	e01c      	b.n	8001c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fbc4 	bl	80013a8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c22:	e00f      	b.n	8001c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fbc0 	bl	80013a8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d908      	bls.n	8001c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e146      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	42420000 	.word	0x42420000
 8001c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b92      	ldr	r3, [pc, #584]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e9      	bne.n	8001c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a6 	beq.w	8001daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a87      	ldr	r2, [pc, #540]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b85      	ldr	r3, [pc, #532]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7e      	ldr	r2, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fb81 	bl	80013a8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7ff fb7d 	bl	80013a8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b64      	cmp	r3, #100	; 0x64
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e103      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x4c8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x312>
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e02d      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x334>
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6213      	str	r3, [r2, #32]
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	f023 0304 	bic.w	r3, r3, #4
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	e01c      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x356>
 8001d08:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a60      	ldr	r2, [pc, #384]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	4b5e      	ldr	r3, [pc, #376]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a5d      	ldr	r2, [pc, #372]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6213      	str	r3, [r2, #32]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x36e>
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d015      	beq.n	8001d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb31 	bl	80013a8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb2d 	bl	80013a8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0b1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ee      	beq.n	8001d4a <HAL_RCC_OscConfig+0x37e>
 8001d6c:	e014      	b.n	8001d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb1b 	bl	80013a8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fb17 	bl	80013a8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e09b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ee      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8087 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d061      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d146      	bne.n	8001e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff faeb 	bl	80013a8 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff fae7 	bl	80013a8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e06d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d108      	bne.n	8001e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4921      	ldr	r1, [pc, #132]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a19      	ldr	r1, [r3, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	430b      	orrs	r3, r1
 8001e22:	491b      	ldr	r1, [pc, #108]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fabb 	bl	80013a8 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff fab7 	bl	80013a8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e03d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x46a>
 8001e54:	e035      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff faa4 	bl	80013a8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff faa0 	bl	80013a8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e026      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x498>
 8001e82:	e01e      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e019      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_OscConfig+0x500>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d0      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4965      	ldr	r1, [pc, #404]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e073      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06b      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4936      	ldr	r1, [pc, #216]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f9f2 	bl	80013a8 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff f9ee 	bl	80013a8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e053      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4922      	ldr	r1, [pc, #136]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490a      	ldr	r1, [pc, #40]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1cc>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1d0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f950 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	08004d74 	.word	0x08004d74
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b490      	push	{r4, r7}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCC_GetSysClockFreq+0xac>)
 80020ac:	1d3c      	adds	r4, r7, #4
 80020ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b4:	f240 2301 	movw	r3, #513	; 0x201
 80020b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x40>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x46>
 80020e2:	e02b      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020e6:	623b      	str	r3, [r7, #32]
      break;
 80020e8:	e02b      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3328      	adds	r3, #40	; 0x28
 80020f4:	443b      	add	r3, r7
 80020f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0c5b      	lsrs	r3, r3, #17
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	3328      	adds	r3, #40	; 0x28
 8002112:	443b      	add	r3, r7
 8002114:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002118:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211e:	fb03 f202 	mul.w	r2, r3, r2
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	e004      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	623b      	str	r3, [r7, #32]
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800213e:	623b      	str	r3, [r7, #32]
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6a3b      	ldr	r3, [r7, #32]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bc90      	pop	{r4, r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	08004d64 	.word	0x08004d64
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	003d0900 	.word	0x003d0900

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <HAL_RCC_GetHCLKFreq+0x10>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000000 	.word	0x20000000

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002178:	f7ff fff2 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08004d84 	.word	0x08004d84

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffde 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004d84 	.word	0x08004d84

080021c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <RCC_Delay+0x34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <RCC_Delay+0x38>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a5b      	lsrs	r3, r3, #9
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e0:	bf00      	nop
  }
  while (Delay --);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	60fa      	str	r2, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <RCC_Delay+0x1c>
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000000 	.word	0x20000000
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e076      	b.n	8002300 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d108      	bne.n	800222c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002222:	d009      	beq.n	8002238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
 800222a:	e005      	b.n	8002238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fdf8 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	ea42 0103 	orr.w	r1, r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	0c1a      	lsrs	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f002 0204 	and.w	r2, r2, #4
 80022de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_SPI_Transmit+0x22>
 8002326:	2302      	movs	r3, #2
 8002328:	e126      	b.n	8002578 <HAL_SPI_Transmit+0x270>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002332:	f7ff f839 	bl	80013a8 <HAL_GetTick>
 8002336:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d002      	beq.n	800234e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002348:	2302      	movs	r3, #2
 800234a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800234c:	e10b      	b.n	8002566 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_SPI_Transmit+0x52>
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800235e:	e102      	b.n	8002566 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2203      	movs	r2, #3
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a6:	d10f      	bne.n	80023c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d007      	beq.n	80023e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ee:	d14b      	bne.n	8002488 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_SPI_Transmit+0xf6>
 80023f8:	8afb      	ldrh	r3, [r7, #22]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d13e      	bne.n	800247c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002422:	e02b      	b.n	800247c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d112      	bne.n	8002458 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	86da      	strh	r2, [r3, #54]	; 0x36
 8002456:	e011      	b.n	800247c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002458:	f7fe ffa6 	bl	80013a8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d803      	bhi.n	8002470 <HAL_SPI_Transmit+0x168>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d102      	bne.n	8002476 <HAL_SPI_Transmit+0x16e>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	77fb      	strb	r3, [r7, #31]
          goto error;
 800247a:	e074      	b.n	8002566 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ce      	bne.n	8002424 <HAL_SPI_Transmit+0x11c>
 8002486:	e04c      	b.n	8002522 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_SPI_Transmit+0x18e>
 8002490:	8afb      	ldrh	r3, [r7, #22]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d140      	bne.n	8002518 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024bc:	e02c      	b.n	8002518 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d113      	bne.n	80024f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80024f2:	e011      	b.n	8002518 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f4:	f7fe ff58 	bl	80013a8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d803      	bhi.n	800250c <HAL_SPI_Transmit+0x204>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d102      	bne.n	8002512 <HAL_SPI_Transmit+0x20a>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002516:	e026      	b.n	8002566 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1cd      	bne.n	80024be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fbb8 	bl	8002c9c <SPI_EndRxTxTransaction>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	77fb      	strb	r3, [r7, #31]
 8002562:	e000      	b.n	8002566 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002564:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002576:	7ffb      	ldrb	r3, [r7, #31]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259c:	d112      	bne.n	80025c4 <HAL_SPI_Receive+0x44>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10e      	bne.n	80025c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2204      	movs	r2, #4
 80025aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025ae:	88fa      	ldrh	r2, [r7, #6]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f8f1 	bl	80027a2 <HAL_SPI_TransmitReceive>
 80025c0:	4603      	mov	r3, r0
 80025c2:	e0ea      	b.n	800279a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_SPI_Receive+0x52>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0e3      	b.n	800279a <HAL_SPI_Receive+0x21a>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025da:	f7fe fee5 	bl	80013a8 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d002      	beq.n	80025f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
 80025ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025f0:	e0ca      	b.n	8002788 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_Receive+0x7e>
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002602:	e0c1      	b.n	8002788 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2204      	movs	r2, #4
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264a:	d10f      	bne.n	800266c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d007      	beq.n	800268a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d162      	bne.n	8002758 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002692:	e02e      	b.n	80026f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d115      	bne.n	80026ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f103 020c 	add.w	r2, r3, #12
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026cc:	e011      	b.n	80026f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ce:	f7fe fe6b 	bl	80013a8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d803      	bhi.n	80026e6 <HAL_SPI_Receive+0x166>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d102      	bne.n	80026ec <HAL_SPI_Receive+0x16c>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026f0:	e04a      	b.n	8002788 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1cb      	bne.n	8002694 <HAL_SPI_Receive+0x114>
 80026fc:	e031      	b.n	8002762 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d113      	bne.n	8002734 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	b292      	uxth	r2, r2
 8002718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	1c9a      	adds	r2, r3, #2
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002732:	e011      	b.n	8002758 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002734:	f7fe fe38 	bl	80013a8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d803      	bhi.n	800274c <HAL_SPI_Receive+0x1cc>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d102      	bne.n	8002752 <HAL_SPI_Receive+0x1d2>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002756:	e017      	b.n	8002788 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1cd      	bne.n	80026fe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa46 	bl	8002bf8 <SPI_EndRxTransaction>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	75fb      	strb	r3, [r7, #23]
 8002784:	e000      	b.n	8002788 <HAL_SPI_Receive+0x208>
  }

error :
 8002786:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08c      	sub	sp, #48	; 0x30
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027b0:	2301      	movs	r3, #1
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x26>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e18a      	b.n	8002ade <HAL_SPI_TransmitReceive+0x33c>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027d0:	f7fe fdea 	bl	80013a8 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d00f      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x70>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f8:	d107      	bne.n	800280a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_SPI_TransmitReceive+0x68>
 8002802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002806:	2b04      	cmp	r3, #4
 8002808:	d003      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002810:	e15b      	b.n	8002aca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x82>
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800282a:	e14e      	b.n	8002aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b04      	cmp	r3, #4
 8002836:	d003      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2205      	movs	r2, #5
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	887a      	ldrh	r2, [r7, #2]
 8002856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d007      	beq.n	8002894 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289c:	d178      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x10a>
 80028a6:	8b7b      	ldrh	r3, [r7, #26]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d166      	bne.n	800297a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d0:	e053      	b.n	800297a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x176>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_SPI_TransmitReceive+0x176>
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d113      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d119      	bne.n	800295a <HAL_SPI_TransmitReceive+0x1b8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d014      	beq.n	800295a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	b292      	uxth	r2, r2
 800293c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800295a:	f7fe fd25 	bl	80013a8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002966:	429a      	cmp	r2, r3
 8002968:	d807      	bhi.n	800297a <HAL_SPI_TransmitReceive+0x1d8>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d003      	beq.n	800297a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002978:	e0a7      	b.n	8002aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1a6      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x130>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1a1      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x130>
 800298e:	e07c      	b.n	8002a8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_TransmitReceive+0x1fc>
 8002998:	8b7b      	ldrh	r3, [r7, #26]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d16b      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c4:	e057      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d11c      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x26c>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d017      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x26c>
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d114      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d119      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x2ae>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d014      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a50:	f7fe fcaa 	bl	80013a8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d803      	bhi.n	8002a68 <HAL_SPI_TransmitReceive+0x2c6>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d102      	bne.n	8002a6e <HAL_SPI_TransmitReceive+0x2cc>
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a74:	e029      	b.n	8002aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1a2      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x224>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d19d      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f904 	bl	8002c9c <SPI_EndRxTxTransaction>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002aa6:	e010      	b.n	8002aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	e000      	b.n	8002aca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3730      	adds	r7, #48	; 0x30
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002af8:	f7fe fc56 	bl	80013a8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b08:	f7fe fc4e 	bl	80013a8 <HAL_GetTick>
 8002b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	0d1b      	lsrs	r3, r3, #20
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1e:	e054      	b.n	8002bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d050      	beq.n	8002bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b28:	f7fe fc3e 	bl	80013a8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d902      	bls.n	8002b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d13d      	bne.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b56:	d111      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b60:	d004      	beq.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d107      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	d10f      	bne.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e017      	b.n	8002bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d19b      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0c:	d111      	bne.n	8002c32 <SPI_EndRxTransaction+0x3a>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c16:	d004      	beq.n	8002c22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	d107      	bne.n	8002c32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c3a:	d117      	bne.n	8002c6c <SPI_EndRxTransaction+0x74>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c44:	d112      	bne.n	8002c6c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f7ff ff49 	bl	8002ae8 <SPI_WaitFlagStateUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01a      	beq.n	8002c92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e013      	b.n	8002c94 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff ff36 	bl	8002ae8 <SPI_WaitFlagStateUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e000      	b.n	8002c94 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7ff ff18 	bl	8002ae8 <SPI_WaitFlagStateUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e000      	b.n	8002cd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e041      	b.n	8002d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fa4e 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f000 fa70 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d001      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e03a      	b.n	8002e06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_TIM_Base_Start_IT+0x98>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x58>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x58>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_TIM_Base_Start_IT+0x9c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x58>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <HAL_TIM_Base_Start_IT+0xa0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d111      	bne.n	8002df4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d010      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	e007      	b.n	8002e04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800

08002e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0202 	mvn.w	r2, #2
 8002e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9b1 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9a4 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9b3 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0204 	mvn.w	r2, #4
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f987 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f97a 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f989 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d122      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d11b      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0208 	mvn.w	r2, #8
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f95d 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f950 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f95f 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0210 	mvn.w	r2, #16
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f933 	bl	80031c6 <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f926 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f935 	bl	80031d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0201 	mvn.w	r2, #1
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd f8f6 	bl	800018c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa77 	bl	80034ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8f9 	bl	80031ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0220 	mvn.w	r2, #32
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa42 	bl	80034a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_TIM_ConfigClockSource+0x18>
 8003040:	2302      	movs	r3, #2
 8003042:	e0b3      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x180>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307c:	d03e      	beq.n	80030fc <HAL_TIM_ConfigClockSource+0xd0>
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	f200 8087 	bhi.w	8003194 <HAL_TIM_ConfigClockSource+0x168>
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308a:	f000 8085 	beq.w	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	d87f      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 8003094:	2b70      	cmp	r3, #112	; 0x70
 8003096:	d01a      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xa2>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d87b      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 800309c:	2b60      	cmp	r3, #96	; 0x60
 800309e:	d050      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x116>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d877      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 80030a4:	2b50      	cmp	r3, #80	; 0x50
 80030a6:	d03c      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0xf6>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d873      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d058      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x136>
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d86f      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 80030b4:	2b30      	cmp	r3, #48	; 0x30
 80030b6:	d064      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x156>
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d86b      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d060      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x156>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d867      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05c      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x156>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d05a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030cc:	e062      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f000 f966 	bl	80033ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	609a      	str	r2, [r3, #8]
      break;
 80030fa:	e04e      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f000 f94f 	bl	80033ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311e:	609a      	str	r2, [r3, #8]
      break;
 8003120:	e03b      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	461a      	mov	r2, r3
 8003130:	f000 f8c6 	bl	80032c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2150      	movs	r1, #80	; 0x50
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f91d 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8003140:	e02b      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	461a      	mov	r2, r3
 8003150:	f000 f8e4 	bl	800331c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2160      	movs	r1, #96	; 0x60
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f90d 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8003160:	e01b      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	461a      	mov	r2, r3
 8003170:	f000 f8a6 	bl	80032c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2140      	movs	r1, #64	; 0x40
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f8fd 	bl	800337a <TIM_ITRx_SetConfig>
      break;
 8003180:	e00b      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f000 f8f4 	bl	800337a <TIM_ITRx_SetConfig>
        break;
 8003192:	e002      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003198:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <TIM_Base_SetConfig+0xb8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0x30>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0x30>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <TIM_Base_SetConfig+0xbc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a25      	ldr	r2, [pc, #148]	; (80032bc <TIM_Base_SetConfig+0xc0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <TIM_Base_SetConfig+0xb8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00b      	beq.n	800325e <TIM_Base_SetConfig+0x62>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d007      	beq.n	800325e <TIM_Base_SetConfig+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <TIM_Base_SetConfig+0xbc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <TIM_Base_SetConfig+0x62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <TIM_Base_SetConfig+0xc0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d108      	bne.n	8003270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <TIM_Base_SetConfig+0xb8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	615a      	str	r2, [r3, #20]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800

080032c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f023 0201 	bic.w	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 030a 	bic.w	r3, r3, #10
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f023 0210 	bic.w	r2, r3, #16
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	031b      	lsls	r3, r3, #12
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	621a      	str	r2, [r3, #32]
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	f043 0307 	orr.w	r3, r3, #7
 800339c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	021a      	lsls	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	609a      	str	r2, [r3, #8]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003400:	2302      	movs	r3, #2
 8003402:	e046      	b.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d009      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e03f      	b.n	800355e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fe9c 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f905 	bl	8003720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	; 0x28
 800356a:	af02      	add	r7, sp, #8
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	d17c      	bne.n	8003680 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_UART_Transmit+0x2c>
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e075      	b.n	8003682 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_UART_Transmit+0x3e>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e06e      	b.n	8003682 <HAL_UART_Transmit+0x11c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ba:	f7fd fef5 	bl	80013a8 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	d108      	bne.n	80035e8 <HAL_UART_Transmit+0x82>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e003      	b.n	80035f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035f8:	e02a      	b.n	8003650 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f840 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e036      	b.n	8003682 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003628:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	3302      	adds	r3, #2
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	e007      	b.n	8003642 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	3301      	adds	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1cf      	bne.n	80035fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	2140      	movs	r1, #64	; 0x40
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f810 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e006      	b.n	8003682 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	e02c      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d028      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <UART_WaitOnFlagUntilTimeout+0x30>
 80036aa:	f7fd fe7d 	bl	80013a8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d21d      	bcs.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e00f      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d0c3      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800375a:	f023 030c 	bic.w	r3, r3, #12
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	430b      	orrs	r3, r1
 8003766:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <UART_SetConfig+0x114>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d103      	bne.n	8003790 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7fe fd08 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	e002      	b.n	8003796 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7fe fcf0 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8003794:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <UART_SetConfig+0x118>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	0119      	lsls	r1, r3, #4
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009a      	lsls	r2, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <UART_SetConfig+0x118>)
 80037ce:	fba3 0302 	umull	r0, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2064      	movs	r0, #100	; 0x64
 80037d6:	fb00 f303 	mul.w	r3, r0, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	3332      	adds	r3, #50	; 0x32
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <UART_SetConfig+0x118>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ec:	4419      	add	r1, r3
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <UART_SetConfig+0x118>)
 8003806:	fba3 0302 	umull	r0, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <UART_SetConfig+0x118>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	440a      	add	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40013800 	.word	0x40013800
 8003838:	51eb851f 	.word	0x51eb851f

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	2000000c 	.word	0x2000000c

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	2600      	movs	r6, #0
 800384c:	4d0c      	ldr	r5, [pc, #48]	; (8003880 <__libc_init_array+0x38>)
 800384e:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	f001 fa08 	bl	8004c6c <_init>
 800385c:	2600      	movs	r6, #0
 800385e:	4d0a      	ldr	r5, [pc, #40]	; (8003888 <__libc_init_array+0x40>)
 8003860:	4c0a      	ldr	r4, [pc, #40]	; (800388c <__libc_init_array+0x44>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	08004e24 	.word	0x08004e24
 8003884:	08004e24 	.word	0x08004e24
 8003888:	08004e24 	.word	0x08004e24
 800388c:	08004e28 	.word	0x08004e28

08003890 <memset>:
 8003890:	4603      	mov	r3, r0
 8003892:	4402      	add	r2, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <iprintf>:
 80038a0:	b40f      	push	{r0, r1, r2, r3}
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <iprintf+0x2c>)
 80038a4:	b513      	push	{r0, r1, r4, lr}
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	b124      	cbz	r4, 80038b4 <iprintf+0x14>
 80038aa:	69a3      	ldr	r3, [r4, #24]
 80038ac:	b913      	cbnz	r3, 80038b4 <iprintf+0x14>
 80038ae:	4620      	mov	r0, r4
 80038b0:	f000 fa7a 	bl	8003da8 <__sinit>
 80038b4:	ab05      	add	r3, sp, #20
 80038b6:	4620      	mov	r0, r4
 80038b8:	9a04      	ldr	r2, [sp, #16]
 80038ba:	68a1      	ldr	r1, [r4, #8]
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f000 fdd9 	bl	8004474 <_vfiprintf_r>
 80038c2:	b002      	add	sp, #8
 80038c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c8:	b004      	add	sp, #16
 80038ca:	4770      	bx	lr
 80038cc:	2000000c 	.word	0x2000000c

080038d0 <_puts_r>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	460e      	mov	r6, r1
 80038d4:	4605      	mov	r5, r0
 80038d6:	b118      	cbz	r0, 80038e0 <_puts_r+0x10>
 80038d8:	6983      	ldr	r3, [r0, #24]
 80038da:	b90b      	cbnz	r3, 80038e0 <_puts_r+0x10>
 80038dc:	f000 fa64 	bl	8003da8 <__sinit>
 80038e0:	69ab      	ldr	r3, [r5, #24]
 80038e2:	68ac      	ldr	r4, [r5, #8]
 80038e4:	b913      	cbnz	r3, 80038ec <_puts_r+0x1c>
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 fa5e 	bl	8003da8 <__sinit>
 80038ec:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <_puts_r+0xd0>)
 80038ee:	429c      	cmp	r4, r3
 80038f0:	d120      	bne.n	8003934 <_puts_r+0x64>
 80038f2:	686c      	ldr	r4, [r5, #4]
 80038f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038f6:	07db      	lsls	r3, r3, #31
 80038f8:	d405      	bmi.n	8003906 <_puts_r+0x36>
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	0598      	lsls	r0, r3, #22
 80038fe:	d402      	bmi.n	8003906 <_puts_r+0x36>
 8003900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003902:	f000 faef 	bl	8003ee4 <__retarget_lock_acquire_recursive>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	0719      	lsls	r1, r3, #28
 800390a:	d51d      	bpl.n	8003948 <_puts_r+0x78>
 800390c:	6923      	ldr	r3, [r4, #16]
 800390e:	b1db      	cbz	r3, 8003948 <_puts_r+0x78>
 8003910:	3e01      	subs	r6, #1
 8003912:	68a3      	ldr	r3, [r4, #8]
 8003914:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003918:	3b01      	subs	r3, #1
 800391a:	60a3      	str	r3, [r4, #8]
 800391c:	bb39      	cbnz	r1, 800396e <_puts_r+0x9e>
 800391e:	2b00      	cmp	r3, #0
 8003920:	da38      	bge.n	8003994 <_puts_r+0xc4>
 8003922:	4622      	mov	r2, r4
 8003924:	210a      	movs	r1, #10
 8003926:	4628      	mov	r0, r5
 8003928:	f000 f868 	bl	80039fc <__swbuf_r>
 800392c:	3001      	adds	r0, #1
 800392e:	d011      	beq.n	8003954 <_puts_r+0x84>
 8003930:	250a      	movs	r5, #10
 8003932:	e011      	b.n	8003958 <_puts_r+0x88>
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <_puts_r+0xd4>)
 8003936:	429c      	cmp	r4, r3
 8003938:	d101      	bne.n	800393e <_puts_r+0x6e>
 800393a:	68ac      	ldr	r4, [r5, #8]
 800393c:	e7da      	b.n	80038f4 <_puts_r+0x24>
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <_puts_r+0xd8>)
 8003940:	429c      	cmp	r4, r3
 8003942:	bf08      	it	eq
 8003944:	68ec      	ldreq	r4, [r5, #12]
 8003946:	e7d5      	b.n	80038f4 <_puts_r+0x24>
 8003948:	4621      	mov	r1, r4
 800394a:	4628      	mov	r0, r5
 800394c:	f000 f8a8 	bl	8003aa0 <__swsetup_r>
 8003950:	2800      	cmp	r0, #0
 8003952:	d0dd      	beq.n	8003910 <_puts_r+0x40>
 8003954:	f04f 35ff 	mov.w	r5, #4294967295
 8003958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800395a:	07da      	lsls	r2, r3, #31
 800395c:	d405      	bmi.n	800396a <_puts_r+0x9a>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	059b      	lsls	r3, r3, #22
 8003962:	d402      	bmi.n	800396a <_puts_r+0x9a>
 8003964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003966:	f000 fabe 	bl	8003ee6 <__retarget_lock_release_recursive>
 800396a:	4628      	mov	r0, r5
 800396c:	bd70      	pop	{r4, r5, r6, pc}
 800396e:	2b00      	cmp	r3, #0
 8003970:	da04      	bge.n	800397c <_puts_r+0xac>
 8003972:	69a2      	ldr	r2, [r4, #24]
 8003974:	429a      	cmp	r2, r3
 8003976:	dc06      	bgt.n	8003986 <_puts_r+0xb6>
 8003978:	290a      	cmp	r1, #10
 800397a:	d004      	beq.n	8003986 <_puts_r+0xb6>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	6022      	str	r2, [r4, #0]
 8003982:	7019      	strb	r1, [r3, #0]
 8003984:	e7c5      	b.n	8003912 <_puts_r+0x42>
 8003986:	4622      	mov	r2, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 f837 	bl	80039fc <__swbuf_r>
 800398e:	3001      	adds	r0, #1
 8003990:	d1bf      	bne.n	8003912 <_puts_r+0x42>
 8003992:	e7df      	b.n	8003954 <_puts_r+0x84>
 8003994:	250a      	movs	r5, #10
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	6022      	str	r2, [r4, #0]
 800399c:	701d      	strb	r5, [r3, #0]
 800399e:	e7db      	b.n	8003958 <_puts_r+0x88>
 80039a0:	08004db0 	.word	0x08004db0
 80039a4:	08004dd0 	.word	0x08004dd0
 80039a8:	08004d90 	.word	0x08004d90

080039ac <puts>:
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <puts+0xc>)
 80039ae:	4601      	mov	r1, r0
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f7ff bf8d 	b.w	80038d0 <_puts_r>
 80039b6:	bf00      	nop
 80039b8:	2000000c 	.word	0x2000000c

080039bc <siprintf>:
 80039bc:	b40e      	push	{r1, r2, r3}
 80039be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039c2:	b500      	push	{lr}
 80039c4:	b09c      	sub	sp, #112	; 0x70
 80039c6:	ab1d      	add	r3, sp, #116	; 0x74
 80039c8:	9002      	str	r0, [sp, #8]
 80039ca:	9006      	str	r0, [sp, #24]
 80039cc:	9107      	str	r1, [sp, #28]
 80039ce:	9104      	str	r1, [sp, #16]
 80039d0:	4808      	ldr	r0, [pc, #32]	; (80039f4 <siprintf+0x38>)
 80039d2:	4909      	ldr	r1, [pc, #36]	; (80039f8 <siprintf+0x3c>)
 80039d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d8:	9105      	str	r1, [sp, #20]
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	a902      	add	r1, sp, #8
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	f000 fc20 	bl	8004224 <_svfiprintf_r>
 80039e4:	2200      	movs	r2, #0
 80039e6:	9b02      	ldr	r3, [sp, #8]
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	b01c      	add	sp, #112	; 0x70
 80039ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80039f0:	b003      	add	sp, #12
 80039f2:	4770      	bx	lr
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	ffff0208 	.word	0xffff0208

080039fc <__swbuf_r>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	460e      	mov	r6, r1
 8003a00:	4614      	mov	r4, r2
 8003a02:	4605      	mov	r5, r0
 8003a04:	b118      	cbz	r0, 8003a0e <__swbuf_r+0x12>
 8003a06:	6983      	ldr	r3, [r0, #24]
 8003a08:	b90b      	cbnz	r3, 8003a0e <__swbuf_r+0x12>
 8003a0a:	f000 f9cd 	bl	8003da8 <__sinit>
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <__swbuf_r+0x98>)
 8003a10:	429c      	cmp	r4, r3
 8003a12:	d12b      	bne.n	8003a6c <__swbuf_r+0x70>
 8003a14:	686c      	ldr	r4, [r5, #4]
 8003a16:	69a3      	ldr	r3, [r4, #24]
 8003a18:	60a3      	str	r3, [r4, #8]
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	071a      	lsls	r2, r3, #28
 8003a1e:	d52f      	bpl.n	8003a80 <__swbuf_r+0x84>
 8003a20:	6923      	ldr	r3, [r4, #16]
 8003a22:	b36b      	cbz	r3, 8003a80 <__swbuf_r+0x84>
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	b2f6      	uxtb	r6, r6
 8003a2a:	1ac0      	subs	r0, r0, r3
 8003a2c:	6963      	ldr	r3, [r4, #20]
 8003a2e:	4637      	mov	r7, r6
 8003a30:	4283      	cmp	r3, r0
 8003a32:	dc04      	bgt.n	8003a3e <__swbuf_r+0x42>
 8003a34:	4621      	mov	r1, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f922 	bl	8003c80 <_fflush_r>
 8003a3c:	bb30      	cbnz	r0, 8003a8c <__swbuf_r+0x90>
 8003a3e:	68a3      	ldr	r3, [r4, #8]
 8003a40:	3001      	adds	r0, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60a3      	str	r3, [r4, #8]
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	6022      	str	r2, [r4, #0]
 8003a4c:	701e      	strb	r6, [r3, #0]
 8003a4e:	6963      	ldr	r3, [r4, #20]
 8003a50:	4283      	cmp	r3, r0
 8003a52:	d004      	beq.n	8003a5e <__swbuf_r+0x62>
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	07db      	lsls	r3, r3, #31
 8003a58:	d506      	bpl.n	8003a68 <__swbuf_r+0x6c>
 8003a5a:	2e0a      	cmp	r6, #10
 8003a5c:	d104      	bne.n	8003a68 <__swbuf_r+0x6c>
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 f90d 	bl	8003c80 <_fflush_r>
 8003a66:	b988      	cbnz	r0, 8003a8c <__swbuf_r+0x90>
 8003a68:	4638      	mov	r0, r7
 8003a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <__swbuf_r+0x9c>)
 8003a6e:	429c      	cmp	r4, r3
 8003a70:	d101      	bne.n	8003a76 <__swbuf_r+0x7a>
 8003a72:	68ac      	ldr	r4, [r5, #8]
 8003a74:	e7cf      	b.n	8003a16 <__swbuf_r+0x1a>
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <__swbuf_r+0xa0>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	bf08      	it	eq
 8003a7c:	68ec      	ldreq	r4, [r5, #12]
 8003a7e:	e7ca      	b.n	8003a16 <__swbuf_r+0x1a>
 8003a80:	4621      	mov	r1, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f80c 	bl	8003aa0 <__swsetup_r>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d0cb      	beq.n	8003a24 <__swbuf_r+0x28>
 8003a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a90:	e7ea      	b.n	8003a68 <__swbuf_r+0x6c>
 8003a92:	bf00      	nop
 8003a94:	08004db0 	.word	0x08004db0
 8003a98:	08004dd0 	.word	0x08004dd0
 8003a9c:	08004d90 	.word	0x08004d90

08003aa0 <__swsetup_r>:
 8003aa0:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <__swsetup_r+0xcc>)
 8003aa2:	b570      	push	{r4, r5, r6, lr}
 8003aa4:	681d      	ldr	r5, [r3, #0]
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	b125      	cbz	r5, 8003ab6 <__swsetup_r+0x16>
 8003aac:	69ab      	ldr	r3, [r5, #24]
 8003aae:	b913      	cbnz	r3, 8003ab6 <__swsetup_r+0x16>
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 f979 	bl	8003da8 <__sinit>
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <__swsetup_r+0xd0>)
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d10f      	bne.n	8003adc <__swsetup_r+0x3c>
 8003abc:	686c      	ldr	r4, [r5, #4]
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ac4:	0719      	lsls	r1, r3, #28
 8003ac6:	d42c      	bmi.n	8003b22 <__swsetup_r+0x82>
 8003ac8:	06dd      	lsls	r5, r3, #27
 8003aca:	d411      	bmi.n	8003af0 <__swsetup_r+0x50>
 8003acc:	2309      	movs	r3, #9
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	e03e      	b.n	8003b5a <__swsetup_r+0xba>
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <__swsetup_r+0xd4>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	d101      	bne.n	8003ae6 <__swsetup_r+0x46>
 8003ae2:	68ac      	ldr	r4, [r5, #8]
 8003ae4:	e7eb      	b.n	8003abe <__swsetup_r+0x1e>
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <__swsetup_r+0xd8>)
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	bf08      	it	eq
 8003aec:	68ec      	ldreq	r4, [r5, #12]
 8003aee:	e7e6      	b.n	8003abe <__swsetup_r+0x1e>
 8003af0:	0758      	lsls	r0, r3, #29
 8003af2:	d512      	bpl.n	8003b1a <__swsetup_r+0x7a>
 8003af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af6:	b141      	cbz	r1, 8003b0a <__swsetup_r+0x6a>
 8003af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d002      	beq.n	8003b06 <__swsetup_r+0x66>
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 fa57 	bl	8003fb4 <_free_r>
 8003b06:	2300      	movs	r3, #0
 8003b08:	6363      	str	r3, [r4, #52]	; 0x34
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	2300      	movs	r3, #0
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	b94b      	cbnz	r3, 8003b3a <__swsetup_r+0x9a>
 8003b26:	89a3      	ldrh	r3, [r4, #12]
 8003b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b30:	d003      	beq.n	8003b3a <__swsetup_r+0x9a>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f9fd 	bl	8003f34 <__smakebuf_r>
 8003b3a:	89a0      	ldrh	r0, [r4, #12]
 8003b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b40:	f010 0301 	ands.w	r3, r0, #1
 8003b44:	d00a      	beq.n	8003b5c <__swsetup_r+0xbc>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60a3      	str	r3, [r4, #8]
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	61a3      	str	r3, [r4, #24]
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	b943      	cbnz	r3, 8003b66 <__swsetup_r+0xc6>
 8003b54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b58:	d1ba      	bne.n	8003ad0 <__swsetup_r+0x30>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	0781      	lsls	r1, r0, #30
 8003b5e:	bf58      	it	pl
 8003b60:	6963      	ldrpl	r3, [r4, #20]
 8003b62:	60a3      	str	r3, [r4, #8]
 8003b64:	e7f4      	b.n	8003b50 <__swsetup_r+0xb0>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e7f7      	b.n	8003b5a <__swsetup_r+0xba>
 8003b6a:	bf00      	nop
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	08004db0 	.word	0x08004db0
 8003b74:	08004dd0 	.word	0x08004dd0
 8003b78:	08004d90 	.word	0x08004d90

08003b7c <__sflush_r>:
 8003b7c:	898a      	ldrh	r2, [r1, #12]
 8003b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b80:	4605      	mov	r5, r0
 8003b82:	0710      	lsls	r0, r2, #28
 8003b84:	460c      	mov	r4, r1
 8003b86:	d457      	bmi.n	8003c38 <__sflush_r+0xbc>
 8003b88:	684b      	ldr	r3, [r1, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	dc04      	bgt.n	8003b98 <__sflush_r+0x1c>
 8003b8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	dc01      	bgt.n	8003b98 <__sflush_r+0x1c>
 8003b94:	2000      	movs	r0, #0
 8003b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	d0fa      	beq.n	8003b94 <__sflush_r+0x18>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ba4:	682f      	ldr	r7, [r5, #0]
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	d032      	beq.n	8003c10 <__sflush_r+0x94>
 8003baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	075a      	lsls	r2, r3, #29
 8003bb0:	d505      	bpl.n	8003bbe <__sflush_r+0x42>
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	1ac0      	subs	r0, r0, r3
 8003bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bb8:	b10b      	cbz	r3, 8003bbe <__sflush_r+0x42>
 8003bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bbc:	1ac0      	subs	r0, r0, r3
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	6a21      	ldr	r1, [r4, #32]
 8003bc8:	47b0      	blx	r6
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	d106      	bne.n	8003bde <__sflush_r+0x62>
 8003bd0:	6829      	ldr	r1, [r5, #0]
 8003bd2:	291d      	cmp	r1, #29
 8003bd4:	d82c      	bhi.n	8003c30 <__sflush_r+0xb4>
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <__sflush_r+0x100>)
 8003bd8:	40ca      	lsrs	r2, r1
 8003bda:	07d6      	lsls	r6, r2, #31
 8003bdc:	d528      	bpl.n	8003c30 <__sflush_r+0xb4>
 8003bde:	2200      	movs	r2, #0
 8003be0:	6062      	str	r2, [r4, #4]
 8003be2:	6922      	ldr	r2, [r4, #16]
 8003be4:	04d9      	lsls	r1, r3, #19
 8003be6:	6022      	str	r2, [r4, #0]
 8003be8:	d504      	bpl.n	8003bf4 <__sflush_r+0x78>
 8003bea:	1c42      	adds	r2, r0, #1
 8003bec:	d101      	bne.n	8003bf2 <__sflush_r+0x76>
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	b903      	cbnz	r3, 8003bf4 <__sflush_r+0x78>
 8003bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8003bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bf6:	602f      	str	r7, [r5, #0]
 8003bf8:	2900      	cmp	r1, #0
 8003bfa:	d0cb      	beq.n	8003b94 <__sflush_r+0x18>
 8003bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c00:	4299      	cmp	r1, r3
 8003c02:	d002      	beq.n	8003c0a <__sflush_r+0x8e>
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 f9d5 	bl	8003fb4 <_free_r>
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8003c0e:	e7c2      	b.n	8003b96 <__sflush_r+0x1a>
 8003c10:	6a21      	ldr	r1, [r4, #32]
 8003c12:	2301      	movs	r3, #1
 8003c14:	4628      	mov	r0, r5
 8003c16:	47b0      	blx	r6
 8003c18:	1c41      	adds	r1, r0, #1
 8003c1a:	d1c7      	bne.n	8003bac <__sflush_r+0x30>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0c4      	beq.n	8003bac <__sflush_r+0x30>
 8003c22:	2b1d      	cmp	r3, #29
 8003c24:	d001      	beq.n	8003c2a <__sflush_r+0xae>
 8003c26:	2b16      	cmp	r3, #22
 8003c28:	d101      	bne.n	8003c2e <__sflush_r+0xb2>
 8003c2a:	602f      	str	r7, [r5, #0]
 8003c2c:	e7b2      	b.n	8003b94 <__sflush_r+0x18>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	e7ae      	b.n	8003b96 <__sflush_r+0x1a>
 8003c38:	690f      	ldr	r7, [r1, #16]
 8003c3a:	2f00      	cmp	r7, #0
 8003c3c:	d0aa      	beq.n	8003b94 <__sflush_r+0x18>
 8003c3e:	0793      	lsls	r3, r2, #30
 8003c40:	bf18      	it	ne
 8003c42:	2300      	movne	r3, #0
 8003c44:	680e      	ldr	r6, [r1, #0]
 8003c46:	bf08      	it	eq
 8003c48:	694b      	ldreq	r3, [r1, #20]
 8003c4a:	1bf6      	subs	r6, r6, r7
 8003c4c:	600f      	str	r7, [r1, #0]
 8003c4e:	608b      	str	r3, [r1, #8]
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	dd9f      	ble.n	8003b94 <__sflush_r+0x18>
 8003c54:	4633      	mov	r3, r6
 8003c56:	463a      	mov	r2, r7
 8003c58:	4628      	mov	r0, r5
 8003c5a:	6a21      	ldr	r1, [r4, #32]
 8003c5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c60:	47e0      	blx	ip
 8003c62:	2800      	cmp	r0, #0
 8003c64:	dc06      	bgt.n	8003c74 <__sflush_r+0xf8>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	e790      	b.n	8003b96 <__sflush_r+0x1a>
 8003c74:	4407      	add	r7, r0
 8003c76:	1a36      	subs	r6, r6, r0
 8003c78:	e7ea      	b.n	8003c50 <__sflush_r+0xd4>
 8003c7a:	bf00      	nop
 8003c7c:	20400001 	.word	0x20400001

08003c80 <_fflush_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	690b      	ldr	r3, [r1, #16]
 8003c84:	4605      	mov	r5, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	b913      	cbnz	r3, 8003c90 <_fflush_r+0x10>
 8003c8a:	2500      	movs	r5, #0
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	b118      	cbz	r0, 8003c9a <_fflush_r+0x1a>
 8003c92:	6983      	ldr	r3, [r0, #24]
 8003c94:	b90b      	cbnz	r3, 8003c9a <_fflush_r+0x1a>
 8003c96:	f000 f887 	bl	8003da8 <__sinit>
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <_fflush_r+0x6c>)
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	d11b      	bne.n	8003cd8 <_fflush_r+0x58>
 8003ca0:	686c      	ldr	r4, [r5, #4]
 8003ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ef      	beq.n	8003c8a <_fflush_r+0xa>
 8003caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cac:	07d0      	lsls	r0, r2, #31
 8003cae:	d404      	bmi.n	8003cba <_fflush_r+0x3a>
 8003cb0:	0599      	lsls	r1, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_fflush_r+0x3a>
 8003cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb6:	f000 f915 	bl	8003ee4 <__retarget_lock_acquire_recursive>
 8003cba:	4628      	mov	r0, r5
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f7ff ff5d 	bl	8003b7c <__sflush_r>
 8003cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	07da      	lsls	r2, r3, #31
 8003cc8:	d4e0      	bmi.n	8003c8c <_fflush_r+0xc>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	059b      	lsls	r3, r3, #22
 8003cce:	d4dd      	bmi.n	8003c8c <_fflush_r+0xc>
 8003cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cd2:	f000 f908 	bl	8003ee6 <__retarget_lock_release_recursive>
 8003cd6:	e7d9      	b.n	8003c8c <_fflush_r+0xc>
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <_fflush_r+0x70>)
 8003cda:	429c      	cmp	r4, r3
 8003cdc:	d101      	bne.n	8003ce2 <_fflush_r+0x62>
 8003cde:	68ac      	ldr	r4, [r5, #8]
 8003ce0:	e7df      	b.n	8003ca2 <_fflush_r+0x22>
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <_fflush_r+0x74>)
 8003ce4:	429c      	cmp	r4, r3
 8003ce6:	bf08      	it	eq
 8003ce8:	68ec      	ldreq	r4, [r5, #12]
 8003cea:	e7da      	b.n	8003ca2 <_fflush_r+0x22>
 8003cec:	08004db0 	.word	0x08004db0
 8003cf0:	08004dd0 	.word	0x08004dd0
 8003cf4:	08004d90 	.word	0x08004d90

08003cf8 <std>:
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8003d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d06:	6083      	str	r3, [r0, #8]
 8003d08:	8181      	strh	r1, [r0, #12]
 8003d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d0c:	81c2      	strh	r2, [r0, #14]
 8003d0e:	6183      	str	r3, [r0, #24]
 8003d10:	4619      	mov	r1, r3
 8003d12:	2208      	movs	r2, #8
 8003d14:	305c      	adds	r0, #92	; 0x5c
 8003d16:	f7ff fdbb 	bl	8003890 <memset>
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <std+0x38>)
 8003d1c:	6224      	str	r4, [r4, #32]
 8003d1e:	6263      	str	r3, [r4, #36]	; 0x24
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <std+0x3c>)
 8003d22:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <std+0x40>)
 8003d26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <std+0x44>)
 8003d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	bf00      	nop
 8003d30:	08004a21 	.word	0x08004a21
 8003d34:	08004a43 	.word	0x08004a43
 8003d38:	08004a7b 	.word	0x08004a7b
 8003d3c:	08004a9f 	.word	0x08004a9f

08003d40 <_cleanup_r>:
 8003d40:	4901      	ldr	r1, [pc, #4]	; (8003d48 <_cleanup_r+0x8>)
 8003d42:	f000 b8af 	b.w	8003ea4 <_fwalk_reent>
 8003d46:	bf00      	nop
 8003d48:	08003c81 	.word	0x08003c81

08003d4c <__sfmoreglue>:
 8003d4c:	2268      	movs	r2, #104	; 0x68
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	1e4d      	subs	r5, r1, #1
 8003d52:	4355      	muls	r5, r2
 8003d54:	460e      	mov	r6, r1
 8003d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d5a:	f000 f993 	bl	8004084 <_malloc_r>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	b140      	cbz	r0, 8003d74 <__sfmoreglue+0x28>
 8003d62:	2100      	movs	r1, #0
 8003d64:	e9c0 1600 	strd	r1, r6, [r0]
 8003d68:	300c      	adds	r0, #12
 8003d6a:	60a0      	str	r0, [r4, #8]
 8003d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d70:	f7ff fd8e 	bl	8003890 <memset>
 8003d74:	4620      	mov	r0, r4
 8003d76:	bd70      	pop	{r4, r5, r6, pc}

08003d78 <__sfp_lock_acquire>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__sfp_lock_acquire+0x8>)
 8003d7a:	f000 b8b3 	b.w	8003ee4 <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	200001a1 	.word	0x200001a1

08003d84 <__sfp_lock_release>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__sfp_lock_release+0x8>)
 8003d86:	f000 b8ae 	b.w	8003ee6 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	200001a1 	.word	0x200001a1

08003d90 <__sinit_lock_acquire>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__sinit_lock_acquire+0x8>)
 8003d92:	f000 b8a7 	b.w	8003ee4 <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	200001a2 	.word	0x200001a2

08003d9c <__sinit_lock_release>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__sinit_lock_release+0x8>)
 8003d9e:	f000 b8a2 	b.w	8003ee6 <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	200001a2 	.word	0x200001a2

08003da8 <__sinit>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4604      	mov	r4, r0
 8003dac:	f7ff fff0 	bl	8003d90 <__sinit_lock_acquire>
 8003db0:	69a3      	ldr	r3, [r4, #24]
 8003db2:	b11b      	cbz	r3, 8003dbc <__sinit+0x14>
 8003db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db8:	f7ff bff0 	b.w	8003d9c <__sinit_lock_release>
 8003dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <__sinit+0x68>)
 8003dc4:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <__sinit+0x6c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dca:	42a3      	cmp	r3, r4
 8003dcc:	bf08      	it	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	bf08      	it	eq
 8003dd4:	61a3      	streq	r3, [r4, #24]
 8003dd6:	f000 f81f 	bl	8003e18 <__sfp>
 8003dda:	6060      	str	r0, [r4, #4]
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f000 f81b 	bl	8003e18 <__sfp>
 8003de2:	60a0      	str	r0, [r4, #8]
 8003de4:	4620      	mov	r0, r4
 8003de6:	f000 f817 	bl	8003e18 <__sfp>
 8003dea:	2200      	movs	r2, #0
 8003dec:	2104      	movs	r1, #4
 8003dee:	60e0      	str	r0, [r4, #12]
 8003df0:	6860      	ldr	r0, [r4, #4]
 8003df2:	f7ff ff81 	bl	8003cf8 <std>
 8003df6:	2201      	movs	r2, #1
 8003df8:	2109      	movs	r1, #9
 8003dfa:	68a0      	ldr	r0, [r4, #8]
 8003dfc:	f7ff ff7c 	bl	8003cf8 <std>
 8003e00:	2202      	movs	r2, #2
 8003e02:	2112      	movs	r1, #18
 8003e04:	68e0      	ldr	r0, [r4, #12]
 8003e06:	f7ff ff77 	bl	8003cf8 <std>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61a3      	str	r3, [r4, #24]
 8003e0e:	e7d1      	b.n	8003db4 <__sinit+0xc>
 8003e10:	08004d8c 	.word	0x08004d8c
 8003e14:	08003d41 	.word	0x08003d41

08003e18 <__sfp>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	4607      	mov	r7, r0
 8003e1c:	f7ff ffac 	bl	8003d78 <__sfp_lock_acquire>
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <__sfp+0x84>)
 8003e22:	681e      	ldr	r6, [r3, #0]
 8003e24:	69b3      	ldr	r3, [r6, #24]
 8003e26:	b913      	cbnz	r3, 8003e2e <__sfp+0x16>
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f7ff ffbd 	bl	8003da8 <__sinit>
 8003e2e:	3648      	adds	r6, #72	; 0x48
 8003e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	d503      	bpl.n	8003e40 <__sfp+0x28>
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	b30b      	cbz	r3, 8003e80 <__sfp+0x68>
 8003e3c:	6836      	ldr	r6, [r6, #0]
 8003e3e:	e7f7      	b.n	8003e30 <__sfp+0x18>
 8003e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e44:	b9d5      	cbnz	r5, 8003e7c <__sfp+0x64>
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <__sfp+0x88>)
 8003e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4c:	60e3      	str	r3, [r4, #12]
 8003e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8003e50:	f000 f847 	bl	8003ee2 <__retarget_lock_init_recursive>
 8003e54:	f7ff ff96 	bl	8003d84 <__sfp_lock_release>
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e64:	6025      	str	r5, [r4, #0]
 8003e66:	61a5      	str	r5, [r4, #24]
 8003e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e6c:	f7ff fd10 	bl	8003890 <memset>
 8003e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e78:	4620      	mov	r0, r4
 8003e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e7c:	3468      	adds	r4, #104	; 0x68
 8003e7e:	e7d9      	b.n	8003e34 <__sfp+0x1c>
 8003e80:	2104      	movs	r1, #4
 8003e82:	4638      	mov	r0, r7
 8003e84:	f7ff ff62 	bl	8003d4c <__sfmoreglue>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	6030      	str	r0, [r6, #0]
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d1d5      	bne.n	8003e3c <__sfp+0x24>
 8003e90:	f7ff ff78 	bl	8003d84 <__sfp_lock_release>
 8003e94:	230c      	movs	r3, #12
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	e7ee      	b.n	8003e78 <__sfp+0x60>
 8003e9a:	bf00      	nop
 8003e9c:	08004d8c 	.word	0x08004d8c
 8003ea0:	ffff0001 	.word	0xffff0001

08003ea4 <_fwalk_reent>:
 8003ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	4688      	mov	r8, r1
 8003eac:	2700      	movs	r7, #0
 8003eae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8003eba:	d505      	bpl.n	8003ec8 <_fwalk_reent+0x24>
 8003ebc:	6824      	ldr	r4, [r4, #0]
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	d1f7      	bne.n	8003eb2 <_fwalk_reent+0xe>
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec8:	89ab      	ldrh	r3, [r5, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d907      	bls.n	8003ede <_fwalk_reent+0x3a>
 8003ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	d003      	beq.n	8003ede <_fwalk_reent+0x3a>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4630      	mov	r0, r6
 8003eda:	47c0      	blx	r8
 8003edc:	4307      	orrs	r7, r0
 8003ede:	3568      	adds	r5, #104	; 0x68
 8003ee0:	e7e9      	b.n	8003eb6 <_fwalk_reent+0x12>

08003ee2 <__retarget_lock_init_recursive>:
 8003ee2:	4770      	bx	lr

08003ee4 <__retarget_lock_acquire_recursive>:
 8003ee4:	4770      	bx	lr

08003ee6 <__retarget_lock_release_recursive>:
 8003ee6:	4770      	bx	lr

08003ee8 <__swhatbuf_r>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	460e      	mov	r6, r1
 8003eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	461d      	mov	r5, r3
 8003ef6:	b096      	sub	sp, #88	; 0x58
 8003ef8:	da08      	bge.n	8003f0c <__swhatbuf_r+0x24>
 8003efa:	2200      	movs	r2, #0
 8003efc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	061a      	lsls	r2, r3, #24
 8003f04:	d410      	bmi.n	8003f28 <__swhatbuf_r+0x40>
 8003f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0a:	e00e      	b.n	8003f2a <__swhatbuf_r+0x42>
 8003f0c:	466a      	mov	r2, sp
 8003f0e:	f000 fded 	bl	8004aec <_fstat_r>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	dbf1      	blt.n	8003efa <__swhatbuf_r+0x12>
 8003f16:	9a01      	ldr	r2, [sp, #4]
 8003f18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f20:	425a      	negs	r2, r3
 8003f22:	415a      	adcs	r2, r3
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	e7ee      	b.n	8003f06 <__swhatbuf_r+0x1e>
 8003f28:	2340      	movs	r3, #64	; 0x40
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	b016      	add	sp, #88	; 0x58
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f34 <__smakebuf_r>:
 8003f34:	898b      	ldrh	r3, [r1, #12]
 8003f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f38:	079d      	lsls	r5, r3, #30
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	d507      	bpl.n	8003f50 <__smakebuf_r+0x1c>
 8003f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	2301      	movs	r3, #1
 8003f4a:	6163      	str	r3, [r4, #20]
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	466a      	mov	r2, sp
 8003f52:	ab01      	add	r3, sp, #4
 8003f54:	f7ff ffc8 	bl	8003ee8 <__swhatbuf_r>
 8003f58:	9900      	ldr	r1, [sp, #0]
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	f000 f891 	bl	8004084 <_malloc_r>
 8003f62:	b948      	cbnz	r0, 8003f78 <__smakebuf_r+0x44>
 8003f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f68:	059a      	lsls	r2, r3, #22
 8003f6a:	d4ef      	bmi.n	8003f4c <__smakebuf_r+0x18>
 8003f6c:	f023 0303 	bic.w	r3, r3, #3
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	81a3      	strh	r3, [r4, #12]
 8003f76:	e7e3      	b.n	8003f40 <__smakebuf_r+0xc>
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <__smakebuf_r+0x7c>)
 8003f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	6020      	str	r0, [r4, #0]
 8003f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f84:	81a3      	strh	r3, [r4, #12]
 8003f86:	9b00      	ldr	r3, [sp, #0]
 8003f88:	6120      	str	r0, [r4, #16]
 8003f8a:	6163      	str	r3, [r4, #20]
 8003f8c:	9b01      	ldr	r3, [sp, #4]
 8003f8e:	b15b      	cbz	r3, 8003fa8 <__smakebuf_r+0x74>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f96:	f000 fdbb 	bl	8004b10 <_isatty_r>
 8003f9a:	b128      	cbz	r0, 8003fa8 <__smakebuf_r+0x74>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	89a0      	ldrh	r0, [r4, #12]
 8003faa:	4305      	orrs	r5, r0
 8003fac:	81a5      	strh	r5, [r4, #12]
 8003fae:	e7cd      	b.n	8003f4c <__smakebuf_r+0x18>
 8003fb0:	08003d41 	.word	0x08003d41

08003fb4 <_free_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d040      	beq.n	800403e <_free_r+0x8a>
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f0c      	subs	r4, r1, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	18e4      	addlt	r4, r4, r3
 8003fc8:	f000 fdfa 	bl	8004bc0 <__malloc_lock>
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <_free_r+0x8c>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	b933      	cbnz	r3, 8003fe0 <_free_r+0x2c>
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6014      	str	r4, [r2, #0]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fdc:	f000 bdf6 	b.w	8004bcc <__malloc_unlock>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d908      	bls.n	8003ff6 <_free_r+0x42>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	1821      	adds	r1, r4, r0
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	bf01      	itttt	eq
 8003fec:	6819      	ldreq	r1, [r3, #0]
 8003fee:	685b      	ldreq	r3, [r3, #4]
 8003ff0:	1809      	addeq	r1, r1, r0
 8003ff2:	6021      	streq	r1, [r4, #0]
 8003ff4:	e7ed      	b.n	8003fd2 <_free_r+0x1e>
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b10b      	cbz	r3, 8004000 <_free_r+0x4c>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d9fa      	bls.n	8003ff6 <_free_r+0x42>
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	1850      	adds	r0, r2, r1
 8004004:	42a0      	cmp	r0, r4
 8004006:	d10b      	bne.n	8004020 <_free_r+0x6c>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	4401      	add	r1, r0
 800400c:	1850      	adds	r0, r2, r1
 800400e:	4283      	cmp	r3, r0
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	d1e0      	bne.n	8003fd6 <_free_r+0x22>
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4401      	add	r1, r0
 800401a:	6011      	str	r1, [r2, #0]
 800401c:	6053      	str	r3, [r2, #4]
 800401e:	e7da      	b.n	8003fd6 <_free_r+0x22>
 8004020:	d902      	bls.n	8004028 <_free_r+0x74>
 8004022:	230c      	movs	r3, #12
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	e7d6      	b.n	8003fd6 <_free_r+0x22>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	1821      	adds	r1, r4, r0
 800402c:	428b      	cmp	r3, r1
 800402e:	bf01      	itttt	eq
 8004030:	6819      	ldreq	r1, [r3, #0]
 8004032:	685b      	ldreq	r3, [r3, #4]
 8004034:	1809      	addeq	r1, r1, r0
 8004036:	6021      	streq	r1, [r4, #0]
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	6054      	str	r4, [r2, #4]
 800403c:	e7cb      	b.n	8003fd6 <_free_r+0x22>
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200001a4 	.word	0x200001a4

08004044 <sbrk_aligned>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4e0e      	ldr	r6, [pc, #56]	; (8004080 <sbrk_aligned+0x3c>)
 8004048:	460c      	mov	r4, r1
 800404a:	6831      	ldr	r1, [r6, #0]
 800404c:	4605      	mov	r5, r0
 800404e:	b911      	cbnz	r1, 8004056 <sbrk_aligned+0x12>
 8004050:	f000 fcd6 	bl	8004a00 <_sbrk_r>
 8004054:	6030      	str	r0, [r6, #0]
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	f000 fcd1 	bl	8004a00 <_sbrk_r>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d00a      	beq.n	8004078 <sbrk_aligned+0x34>
 8004062:	1cc4      	adds	r4, r0, #3
 8004064:	f024 0403 	bic.w	r4, r4, #3
 8004068:	42a0      	cmp	r0, r4
 800406a:	d007      	beq.n	800407c <sbrk_aligned+0x38>
 800406c:	1a21      	subs	r1, r4, r0
 800406e:	4628      	mov	r0, r5
 8004070:	f000 fcc6 	bl	8004a00 <_sbrk_r>
 8004074:	3001      	adds	r0, #1
 8004076:	d101      	bne.n	800407c <sbrk_aligned+0x38>
 8004078:	f04f 34ff 	mov.w	r4, #4294967295
 800407c:	4620      	mov	r0, r4
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	200001a8 	.word	0x200001a8

08004084 <_malloc_r>:
 8004084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004088:	1ccd      	adds	r5, r1, #3
 800408a:	f025 0503 	bic.w	r5, r5, #3
 800408e:	3508      	adds	r5, #8
 8004090:	2d0c      	cmp	r5, #12
 8004092:	bf38      	it	cc
 8004094:	250c      	movcc	r5, #12
 8004096:	2d00      	cmp	r5, #0
 8004098:	4607      	mov	r7, r0
 800409a:	db01      	blt.n	80040a0 <_malloc_r+0x1c>
 800409c:	42a9      	cmp	r1, r5
 800409e:	d905      	bls.n	80040ac <_malloc_r+0x28>
 80040a0:	230c      	movs	r3, #12
 80040a2:	2600      	movs	r6, #0
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4630      	mov	r0, r6
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ac:	4e2e      	ldr	r6, [pc, #184]	; (8004168 <_malloc_r+0xe4>)
 80040ae:	f000 fd87 	bl	8004bc0 <__malloc_lock>
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	461c      	mov	r4, r3
 80040b6:	bb34      	cbnz	r4, 8004106 <_malloc_r+0x82>
 80040b8:	4629      	mov	r1, r5
 80040ba:	4638      	mov	r0, r7
 80040bc:	f7ff ffc2 	bl	8004044 <sbrk_aligned>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	4604      	mov	r4, r0
 80040c4:	d14d      	bne.n	8004162 <_malloc_r+0xde>
 80040c6:	6834      	ldr	r4, [r6, #0]
 80040c8:	4626      	mov	r6, r4
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	d140      	bne.n	8004150 <_malloc_r+0xcc>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	4631      	mov	r1, r6
 80040d2:	4638      	mov	r0, r7
 80040d4:	eb04 0803 	add.w	r8, r4, r3
 80040d8:	f000 fc92 	bl	8004a00 <_sbrk_r>
 80040dc:	4580      	cmp	r8, r0
 80040de:	d13a      	bne.n	8004156 <_malloc_r+0xd2>
 80040e0:	6821      	ldr	r1, [r4, #0]
 80040e2:	3503      	adds	r5, #3
 80040e4:	1a6d      	subs	r5, r5, r1
 80040e6:	f025 0503 	bic.w	r5, r5, #3
 80040ea:	3508      	adds	r5, #8
 80040ec:	2d0c      	cmp	r5, #12
 80040ee:	bf38      	it	cc
 80040f0:	250c      	movcc	r5, #12
 80040f2:	4638      	mov	r0, r7
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7ff ffa5 	bl	8004044 <sbrk_aligned>
 80040fa:	3001      	adds	r0, #1
 80040fc:	d02b      	beq.n	8004156 <_malloc_r+0xd2>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	442b      	add	r3, r5
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	e00e      	b.n	8004124 <_malloc_r+0xa0>
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	1b52      	subs	r2, r2, r5
 800410a:	d41e      	bmi.n	800414a <_malloc_r+0xc6>
 800410c:	2a0b      	cmp	r2, #11
 800410e:	d916      	bls.n	800413e <_malloc_r+0xba>
 8004110:	1961      	adds	r1, r4, r5
 8004112:	42a3      	cmp	r3, r4
 8004114:	6025      	str	r5, [r4, #0]
 8004116:	bf18      	it	ne
 8004118:	6059      	strne	r1, [r3, #4]
 800411a:	6863      	ldr	r3, [r4, #4]
 800411c:	bf08      	it	eq
 800411e:	6031      	streq	r1, [r6, #0]
 8004120:	5162      	str	r2, [r4, r5]
 8004122:	604b      	str	r3, [r1, #4]
 8004124:	4638      	mov	r0, r7
 8004126:	f104 060b 	add.w	r6, r4, #11
 800412a:	f000 fd4f 	bl	8004bcc <__malloc_unlock>
 800412e:	f026 0607 	bic.w	r6, r6, #7
 8004132:	1d23      	adds	r3, r4, #4
 8004134:	1af2      	subs	r2, r6, r3
 8004136:	d0b6      	beq.n	80040a6 <_malloc_r+0x22>
 8004138:	1b9b      	subs	r3, r3, r6
 800413a:	50a3      	str	r3, [r4, r2]
 800413c:	e7b3      	b.n	80040a6 <_malloc_r+0x22>
 800413e:	6862      	ldr	r2, [r4, #4]
 8004140:	42a3      	cmp	r3, r4
 8004142:	bf0c      	ite	eq
 8004144:	6032      	streq	r2, [r6, #0]
 8004146:	605a      	strne	r2, [r3, #4]
 8004148:	e7ec      	b.n	8004124 <_malloc_r+0xa0>
 800414a:	4623      	mov	r3, r4
 800414c:	6864      	ldr	r4, [r4, #4]
 800414e:	e7b2      	b.n	80040b6 <_malloc_r+0x32>
 8004150:	4634      	mov	r4, r6
 8004152:	6876      	ldr	r6, [r6, #4]
 8004154:	e7b9      	b.n	80040ca <_malloc_r+0x46>
 8004156:	230c      	movs	r3, #12
 8004158:	4638      	mov	r0, r7
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	f000 fd36 	bl	8004bcc <__malloc_unlock>
 8004160:	e7a1      	b.n	80040a6 <_malloc_r+0x22>
 8004162:	6025      	str	r5, [r4, #0]
 8004164:	e7de      	b.n	8004124 <_malloc_r+0xa0>
 8004166:	bf00      	nop
 8004168:	200001a4 	.word	0x200001a4

0800416c <__ssputs_r>:
 800416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	688e      	ldr	r6, [r1, #8]
 8004172:	4682      	mov	sl, r0
 8004174:	429e      	cmp	r6, r3
 8004176:	460c      	mov	r4, r1
 8004178:	4690      	mov	r8, r2
 800417a:	461f      	mov	r7, r3
 800417c:	d838      	bhi.n	80041f0 <__ssputs_r+0x84>
 800417e:	898a      	ldrh	r2, [r1, #12]
 8004180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004184:	d032      	beq.n	80041ec <__ssputs_r+0x80>
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	6909      	ldr	r1, [r1, #16]
 800418a:	3301      	adds	r3, #1
 800418c:	eba5 0901 	sub.w	r9, r5, r1
 8004190:	6965      	ldr	r5, [r4, #20]
 8004192:	444b      	add	r3, r9
 8004194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800419c:	106d      	asrs	r5, r5, #1
 800419e:	429d      	cmp	r5, r3
 80041a0:	bf38      	it	cc
 80041a2:	461d      	movcc	r5, r3
 80041a4:	0553      	lsls	r3, r2, #21
 80041a6:	d531      	bpl.n	800420c <__ssputs_r+0xa0>
 80041a8:	4629      	mov	r1, r5
 80041aa:	f7ff ff6b 	bl	8004084 <_malloc_r>
 80041ae:	4606      	mov	r6, r0
 80041b0:	b950      	cbnz	r0, 80041c8 <__ssputs_r+0x5c>
 80041b2:	230c      	movs	r3, #12
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	f8ca 3000 	str.w	r3, [sl]
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c8:	464a      	mov	r2, r9
 80041ca:	6921      	ldr	r1, [r4, #16]
 80041cc:	f000 fcd0 	bl	8004b70 <memcpy>
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	6126      	str	r6, [r4, #16]
 80041de:	444e      	add	r6, r9
 80041e0:	6026      	str	r6, [r4, #0]
 80041e2:	463e      	mov	r6, r7
 80041e4:	6165      	str	r5, [r4, #20]
 80041e6:	eba5 0509 	sub.w	r5, r5, r9
 80041ea:	60a5      	str	r5, [r4, #8]
 80041ec:	42be      	cmp	r6, r7
 80041ee:	d900      	bls.n	80041f2 <__ssputs_r+0x86>
 80041f0:	463e      	mov	r6, r7
 80041f2:	4632      	mov	r2, r6
 80041f4:	4641      	mov	r1, r8
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	f000 fcc8 	bl	8004b8c <memmove>
 80041fc:	68a3      	ldr	r3, [r4, #8]
 80041fe:	2000      	movs	r0, #0
 8004200:	1b9b      	subs	r3, r3, r6
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	4433      	add	r3, r6
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	e7db      	b.n	80041c4 <__ssputs_r+0x58>
 800420c:	462a      	mov	r2, r5
 800420e:	f000 fce3 	bl	8004bd8 <_realloc_r>
 8004212:	4606      	mov	r6, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	d1e1      	bne.n	80041dc <__ssputs_r+0x70>
 8004218:	4650      	mov	r0, sl
 800421a:	6921      	ldr	r1, [r4, #16]
 800421c:	f7ff feca 	bl	8003fb4 <_free_r>
 8004220:	e7c7      	b.n	80041b2 <__ssputs_r+0x46>
	...

08004224 <_svfiprintf_r>:
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	4698      	mov	r8, r3
 800422a:	898b      	ldrh	r3, [r1, #12]
 800422c:	4607      	mov	r7, r0
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	460d      	mov	r5, r1
 8004232:	4614      	mov	r4, r2
 8004234:	b09d      	sub	sp, #116	; 0x74
 8004236:	d50e      	bpl.n	8004256 <_svfiprintf_r+0x32>
 8004238:	690b      	ldr	r3, [r1, #16]
 800423a:	b963      	cbnz	r3, 8004256 <_svfiprintf_r+0x32>
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	f7ff ff21 	bl	8004084 <_malloc_r>
 8004242:	6028      	str	r0, [r5, #0]
 8004244:	6128      	str	r0, [r5, #16]
 8004246:	b920      	cbnz	r0, 8004252 <_svfiprintf_r+0x2e>
 8004248:	230c      	movs	r3, #12
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e0d1      	b.n	80043f6 <_svfiprintf_r+0x1d2>
 8004252:	2340      	movs	r3, #64	; 0x40
 8004254:	616b      	str	r3, [r5, #20]
 8004256:	2300      	movs	r3, #0
 8004258:	9309      	str	r3, [sp, #36]	; 0x24
 800425a:	2320      	movs	r3, #32
 800425c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004260:	2330      	movs	r3, #48	; 0x30
 8004262:	f04f 0901 	mov.w	r9, #1
 8004266:	f8cd 800c 	str.w	r8, [sp, #12]
 800426a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004410 <_svfiprintf_r+0x1ec>
 800426e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004272:	4623      	mov	r3, r4
 8004274:	469a      	mov	sl, r3
 8004276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800427a:	b10a      	cbz	r2, 8004280 <_svfiprintf_r+0x5c>
 800427c:	2a25      	cmp	r2, #37	; 0x25
 800427e:	d1f9      	bne.n	8004274 <_svfiprintf_r+0x50>
 8004280:	ebba 0b04 	subs.w	fp, sl, r4
 8004284:	d00b      	beq.n	800429e <_svfiprintf_r+0x7a>
 8004286:	465b      	mov	r3, fp
 8004288:	4622      	mov	r2, r4
 800428a:	4629      	mov	r1, r5
 800428c:	4638      	mov	r0, r7
 800428e:	f7ff ff6d 	bl	800416c <__ssputs_r>
 8004292:	3001      	adds	r0, #1
 8004294:	f000 80aa 	beq.w	80043ec <_svfiprintf_r+0x1c8>
 8004298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800429a:	445a      	add	r2, fp
 800429c:	9209      	str	r2, [sp, #36]	; 0x24
 800429e:	f89a 3000 	ldrb.w	r3, [sl]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80a2 	beq.w	80043ec <_svfiprintf_r+0x1c8>
 80042a8:	2300      	movs	r3, #0
 80042aa:	f04f 32ff 	mov.w	r2, #4294967295
 80042ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042b2:	f10a 0a01 	add.w	sl, sl, #1
 80042b6:	9304      	str	r3, [sp, #16]
 80042b8:	9307      	str	r3, [sp, #28]
 80042ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042be:	931a      	str	r3, [sp, #104]	; 0x68
 80042c0:	4654      	mov	r4, sl
 80042c2:	2205      	movs	r2, #5
 80042c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c8:	4851      	ldr	r0, [pc, #324]	; (8004410 <_svfiprintf_r+0x1ec>)
 80042ca:	f000 fc43 	bl	8004b54 <memchr>
 80042ce:	9a04      	ldr	r2, [sp, #16]
 80042d0:	b9d8      	cbnz	r0, 800430a <_svfiprintf_r+0xe6>
 80042d2:	06d0      	lsls	r0, r2, #27
 80042d4:	bf44      	itt	mi
 80042d6:	2320      	movmi	r3, #32
 80042d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042dc:	0711      	lsls	r1, r2, #28
 80042de:	bf44      	itt	mi
 80042e0:	232b      	movmi	r3, #43	; 0x2b
 80042e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ea:	2b2a      	cmp	r3, #42	; 0x2a
 80042ec:	d015      	beq.n	800431a <_svfiprintf_r+0xf6>
 80042ee:	4654      	mov	r4, sl
 80042f0:	2000      	movs	r0, #0
 80042f2:	f04f 0c0a 	mov.w	ip, #10
 80042f6:	9a07      	ldr	r2, [sp, #28]
 80042f8:	4621      	mov	r1, r4
 80042fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042fe:	3b30      	subs	r3, #48	; 0x30
 8004300:	2b09      	cmp	r3, #9
 8004302:	d94e      	bls.n	80043a2 <_svfiprintf_r+0x17e>
 8004304:	b1b0      	cbz	r0, 8004334 <_svfiprintf_r+0x110>
 8004306:	9207      	str	r2, [sp, #28]
 8004308:	e014      	b.n	8004334 <_svfiprintf_r+0x110>
 800430a:	eba0 0308 	sub.w	r3, r0, r8
 800430e:	fa09 f303 	lsl.w	r3, r9, r3
 8004312:	4313      	orrs	r3, r2
 8004314:	46a2      	mov	sl, r4
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	e7d2      	b.n	80042c0 <_svfiprintf_r+0x9c>
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	1d19      	adds	r1, r3, #4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	9103      	str	r1, [sp, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfbb      	ittet	lt
 8004326:	425b      	neglt	r3, r3
 8004328:	f042 0202 	orrlt.w	r2, r2, #2
 800432c:	9307      	strge	r3, [sp, #28]
 800432e:	9307      	strlt	r3, [sp, #28]
 8004330:	bfb8      	it	lt
 8004332:	9204      	strlt	r2, [sp, #16]
 8004334:	7823      	ldrb	r3, [r4, #0]
 8004336:	2b2e      	cmp	r3, #46	; 0x2e
 8004338:	d10c      	bne.n	8004354 <_svfiprintf_r+0x130>
 800433a:	7863      	ldrb	r3, [r4, #1]
 800433c:	2b2a      	cmp	r3, #42	; 0x2a
 800433e:	d135      	bne.n	80043ac <_svfiprintf_r+0x188>
 8004340:	9b03      	ldr	r3, [sp, #12]
 8004342:	3402      	adds	r4, #2
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	9203      	str	r2, [sp, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfb8      	it	lt
 800434e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004414 <_svfiprintf_r+0x1f0>
 8004358:	2203      	movs	r2, #3
 800435a:	4650      	mov	r0, sl
 800435c:	7821      	ldrb	r1, [r4, #0]
 800435e:	f000 fbf9 	bl	8004b54 <memchr>
 8004362:	b140      	cbz	r0, 8004376 <_svfiprintf_r+0x152>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	eba0 000a 	sub.w	r0, r0, sl
 800436a:	fa03 f000 	lsl.w	r0, r3, r0
 800436e:	9b04      	ldr	r3, [sp, #16]
 8004370:	3401      	adds	r4, #1
 8004372:	4303      	orrs	r3, r0
 8004374:	9304      	str	r3, [sp, #16]
 8004376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437a:	2206      	movs	r2, #6
 800437c:	4826      	ldr	r0, [pc, #152]	; (8004418 <_svfiprintf_r+0x1f4>)
 800437e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004382:	f000 fbe7 	bl	8004b54 <memchr>
 8004386:	2800      	cmp	r0, #0
 8004388:	d038      	beq.n	80043fc <_svfiprintf_r+0x1d8>
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <_svfiprintf_r+0x1f8>)
 800438c:	bb1b      	cbnz	r3, 80043d6 <_svfiprintf_r+0x1b2>
 800438e:	9b03      	ldr	r3, [sp, #12]
 8004390:	3307      	adds	r3, #7
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	3308      	adds	r3, #8
 8004398:	9303      	str	r3, [sp, #12]
 800439a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439c:	4433      	add	r3, r6
 800439e:	9309      	str	r3, [sp, #36]	; 0x24
 80043a0:	e767      	b.n	8004272 <_svfiprintf_r+0x4e>
 80043a2:	460c      	mov	r4, r1
 80043a4:	2001      	movs	r0, #1
 80043a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043aa:	e7a5      	b.n	80042f8 <_svfiprintf_r+0xd4>
 80043ac:	2300      	movs	r3, #0
 80043ae:	f04f 0c0a 	mov.w	ip, #10
 80043b2:	4619      	mov	r1, r3
 80043b4:	3401      	adds	r4, #1
 80043b6:	9305      	str	r3, [sp, #20]
 80043b8:	4620      	mov	r0, r4
 80043ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043be:	3a30      	subs	r2, #48	; 0x30
 80043c0:	2a09      	cmp	r2, #9
 80043c2:	d903      	bls.n	80043cc <_svfiprintf_r+0x1a8>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0c5      	beq.n	8004354 <_svfiprintf_r+0x130>
 80043c8:	9105      	str	r1, [sp, #20]
 80043ca:	e7c3      	b.n	8004354 <_svfiprintf_r+0x130>
 80043cc:	4604      	mov	r4, r0
 80043ce:	2301      	movs	r3, #1
 80043d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043d4:	e7f0      	b.n	80043b8 <_svfiprintf_r+0x194>
 80043d6:	ab03      	add	r3, sp, #12
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	462a      	mov	r2, r5
 80043dc:	4638      	mov	r0, r7
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <_svfiprintf_r+0x1fc>)
 80043e0:	a904      	add	r1, sp, #16
 80043e2:	f3af 8000 	nop.w
 80043e6:	1c42      	adds	r2, r0, #1
 80043e8:	4606      	mov	r6, r0
 80043ea:	d1d6      	bne.n	800439a <_svfiprintf_r+0x176>
 80043ec:	89ab      	ldrh	r3, [r5, #12]
 80043ee:	065b      	lsls	r3, r3, #25
 80043f0:	f53f af2c 	bmi.w	800424c <_svfiprintf_r+0x28>
 80043f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043f6:	b01d      	add	sp, #116	; 0x74
 80043f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fc:	ab03      	add	r3, sp, #12
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	462a      	mov	r2, r5
 8004402:	4638      	mov	r0, r7
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <_svfiprintf_r+0x1fc>)
 8004406:	a904      	add	r1, sp, #16
 8004408:	f000 f9d4 	bl	80047b4 <_printf_i>
 800440c:	e7eb      	b.n	80043e6 <_svfiprintf_r+0x1c2>
 800440e:	bf00      	nop
 8004410:	08004df0 	.word	0x08004df0
 8004414:	08004df6 	.word	0x08004df6
 8004418:	08004dfa 	.word	0x08004dfa
 800441c:	00000000 	.word	0x00000000
 8004420:	0800416d 	.word	0x0800416d

08004424 <__sfputc_r>:
 8004424:	6893      	ldr	r3, [r2, #8]
 8004426:	b410      	push	{r4}
 8004428:	3b01      	subs	r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	6093      	str	r3, [r2, #8]
 800442e:	da07      	bge.n	8004440 <__sfputc_r+0x1c>
 8004430:	6994      	ldr	r4, [r2, #24]
 8004432:	42a3      	cmp	r3, r4
 8004434:	db01      	blt.n	800443a <__sfputc_r+0x16>
 8004436:	290a      	cmp	r1, #10
 8004438:	d102      	bne.n	8004440 <__sfputc_r+0x1c>
 800443a:	bc10      	pop	{r4}
 800443c:	f7ff bade 	b.w	80039fc <__swbuf_r>
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	1c58      	adds	r0, r3, #1
 8004444:	6010      	str	r0, [r2, #0]
 8004446:	7019      	strb	r1, [r3, #0]
 8004448:	4608      	mov	r0, r1
 800444a:	bc10      	pop	{r4}
 800444c:	4770      	bx	lr

0800444e <__sfputs_r>:
 800444e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004450:	4606      	mov	r6, r0
 8004452:	460f      	mov	r7, r1
 8004454:	4614      	mov	r4, r2
 8004456:	18d5      	adds	r5, r2, r3
 8004458:	42ac      	cmp	r4, r5
 800445a:	d101      	bne.n	8004460 <__sfputs_r+0x12>
 800445c:	2000      	movs	r0, #0
 800445e:	e007      	b.n	8004470 <__sfputs_r+0x22>
 8004460:	463a      	mov	r2, r7
 8004462:	4630      	mov	r0, r6
 8004464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004468:	f7ff ffdc 	bl	8004424 <__sfputc_r>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d1f3      	bne.n	8004458 <__sfputs_r+0xa>
 8004470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004474 <_vfiprintf_r>:
 8004474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004478:	460d      	mov	r5, r1
 800447a:	4614      	mov	r4, r2
 800447c:	4698      	mov	r8, r3
 800447e:	4606      	mov	r6, r0
 8004480:	b09d      	sub	sp, #116	; 0x74
 8004482:	b118      	cbz	r0, 800448c <_vfiprintf_r+0x18>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_vfiprintf_r+0x18>
 8004488:	f7ff fc8e 	bl	8003da8 <__sinit>
 800448c:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <_vfiprintf_r+0x240>)
 800448e:	429d      	cmp	r5, r3
 8004490:	d11b      	bne.n	80044ca <_vfiprintf_r+0x56>
 8004492:	6875      	ldr	r5, [r6, #4]
 8004494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004496:	07d9      	lsls	r1, r3, #31
 8004498:	d405      	bmi.n	80044a6 <_vfiprintf_r+0x32>
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	059a      	lsls	r2, r3, #22
 800449e:	d402      	bmi.n	80044a6 <_vfiprintf_r+0x32>
 80044a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044a2:	f7ff fd1f 	bl	8003ee4 <__retarget_lock_acquire_recursive>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	d501      	bpl.n	80044b0 <_vfiprintf_r+0x3c>
 80044ac:	692b      	ldr	r3, [r5, #16]
 80044ae:	b9eb      	cbnz	r3, 80044ec <_vfiprintf_r+0x78>
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff faf4 	bl	8003aa0 <__swsetup_r>
 80044b8:	b1c0      	cbz	r0, 80044ec <_vfiprintf_r+0x78>
 80044ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044bc:	07dc      	lsls	r4, r3, #31
 80044be:	d50e      	bpl.n	80044de <_vfiprintf_r+0x6a>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	b01d      	add	sp, #116	; 0x74
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <_vfiprintf_r+0x244>)
 80044cc:	429d      	cmp	r5, r3
 80044ce:	d101      	bne.n	80044d4 <_vfiprintf_r+0x60>
 80044d0:	68b5      	ldr	r5, [r6, #8]
 80044d2:	e7df      	b.n	8004494 <_vfiprintf_r+0x20>
 80044d4:	4b79      	ldr	r3, [pc, #484]	; (80046bc <_vfiprintf_r+0x248>)
 80044d6:	429d      	cmp	r5, r3
 80044d8:	bf08      	it	eq
 80044da:	68f5      	ldreq	r5, [r6, #12]
 80044dc:	e7da      	b.n	8004494 <_vfiprintf_r+0x20>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	0598      	lsls	r0, r3, #22
 80044e2:	d4ed      	bmi.n	80044c0 <_vfiprintf_r+0x4c>
 80044e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e6:	f7ff fcfe 	bl	8003ee6 <__retarget_lock_release_recursive>
 80044ea:	e7e9      	b.n	80044c0 <_vfiprintf_r+0x4c>
 80044ec:	2300      	movs	r3, #0
 80044ee:	9309      	str	r3, [sp, #36]	; 0x24
 80044f0:	2320      	movs	r3, #32
 80044f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044f6:	2330      	movs	r3, #48	; 0x30
 80044f8:	f04f 0901 	mov.w	r9, #1
 80044fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004500:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046c0 <_vfiprintf_r+0x24c>
 8004504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004508:	4623      	mov	r3, r4
 800450a:	469a      	mov	sl, r3
 800450c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004510:	b10a      	cbz	r2, 8004516 <_vfiprintf_r+0xa2>
 8004512:	2a25      	cmp	r2, #37	; 0x25
 8004514:	d1f9      	bne.n	800450a <_vfiprintf_r+0x96>
 8004516:	ebba 0b04 	subs.w	fp, sl, r4
 800451a:	d00b      	beq.n	8004534 <_vfiprintf_r+0xc0>
 800451c:	465b      	mov	r3, fp
 800451e:	4622      	mov	r2, r4
 8004520:	4629      	mov	r1, r5
 8004522:	4630      	mov	r0, r6
 8004524:	f7ff ff93 	bl	800444e <__sfputs_r>
 8004528:	3001      	adds	r0, #1
 800452a:	f000 80aa 	beq.w	8004682 <_vfiprintf_r+0x20e>
 800452e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004530:	445a      	add	r2, fp
 8004532:	9209      	str	r2, [sp, #36]	; 0x24
 8004534:	f89a 3000 	ldrb.w	r3, [sl]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80a2 	beq.w	8004682 <_vfiprintf_r+0x20e>
 800453e:	2300      	movs	r3, #0
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004548:	f10a 0a01 	add.w	sl, sl, #1
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004554:	931a      	str	r3, [sp, #104]	; 0x68
 8004556:	4654      	mov	r4, sl
 8004558:	2205      	movs	r2, #5
 800455a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455e:	4858      	ldr	r0, [pc, #352]	; (80046c0 <_vfiprintf_r+0x24c>)
 8004560:	f000 faf8 	bl	8004b54 <memchr>
 8004564:	9a04      	ldr	r2, [sp, #16]
 8004566:	b9d8      	cbnz	r0, 80045a0 <_vfiprintf_r+0x12c>
 8004568:	06d1      	lsls	r1, r2, #27
 800456a:	bf44      	itt	mi
 800456c:	2320      	movmi	r3, #32
 800456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004572:	0713      	lsls	r3, r2, #28
 8004574:	bf44      	itt	mi
 8004576:	232b      	movmi	r3, #43	; 0x2b
 8004578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457c:	f89a 3000 	ldrb.w	r3, [sl]
 8004580:	2b2a      	cmp	r3, #42	; 0x2a
 8004582:	d015      	beq.n	80045b0 <_vfiprintf_r+0x13c>
 8004584:	4654      	mov	r4, sl
 8004586:	2000      	movs	r0, #0
 8004588:	f04f 0c0a 	mov.w	ip, #10
 800458c:	9a07      	ldr	r2, [sp, #28]
 800458e:	4621      	mov	r1, r4
 8004590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004594:	3b30      	subs	r3, #48	; 0x30
 8004596:	2b09      	cmp	r3, #9
 8004598:	d94e      	bls.n	8004638 <_vfiprintf_r+0x1c4>
 800459a:	b1b0      	cbz	r0, 80045ca <_vfiprintf_r+0x156>
 800459c:	9207      	str	r2, [sp, #28]
 800459e:	e014      	b.n	80045ca <_vfiprintf_r+0x156>
 80045a0:	eba0 0308 	sub.w	r3, r0, r8
 80045a4:	fa09 f303 	lsl.w	r3, r9, r3
 80045a8:	4313      	orrs	r3, r2
 80045aa:	46a2      	mov	sl, r4
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	e7d2      	b.n	8004556 <_vfiprintf_r+0xe2>
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	1d19      	adds	r1, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	9103      	str	r1, [sp, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfbb      	ittet	lt
 80045bc:	425b      	neglt	r3, r3
 80045be:	f042 0202 	orrlt.w	r2, r2, #2
 80045c2:	9307      	strge	r3, [sp, #28]
 80045c4:	9307      	strlt	r3, [sp, #28]
 80045c6:	bfb8      	it	lt
 80045c8:	9204      	strlt	r2, [sp, #16]
 80045ca:	7823      	ldrb	r3, [r4, #0]
 80045cc:	2b2e      	cmp	r3, #46	; 0x2e
 80045ce:	d10c      	bne.n	80045ea <_vfiprintf_r+0x176>
 80045d0:	7863      	ldrb	r3, [r4, #1]
 80045d2:	2b2a      	cmp	r3, #42	; 0x2a
 80045d4:	d135      	bne.n	8004642 <_vfiprintf_r+0x1ce>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	3402      	adds	r4, #2
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	9203      	str	r2, [sp, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bfb8      	it	lt
 80045e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045e8:	9305      	str	r3, [sp, #20]
 80045ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80046c4 <_vfiprintf_r+0x250>
 80045ee:	2203      	movs	r2, #3
 80045f0:	4650      	mov	r0, sl
 80045f2:	7821      	ldrb	r1, [r4, #0]
 80045f4:	f000 faae 	bl	8004b54 <memchr>
 80045f8:	b140      	cbz	r0, 800460c <_vfiprintf_r+0x198>
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	eba0 000a 	sub.w	r0, r0, sl
 8004600:	fa03 f000 	lsl.w	r0, r3, r0
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	3401      	adds	r4, #1
 8004608:	4303      	orrs	r3, r0
 800460a:	9304      	str	r3, [sp, #16]
 800460c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004610:	2206      	movs	r2, #6
 8004612:	482d      	ldr	r0, [pc, #180]	; (80046c8 <_vfiprintf_r+0x254>)
 8004614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004618:	f000 fa9c 	bl	8004b54 <memchr>
 800461c:	2800      	cmp	r0, #0
 800461e:	d03f      	beq.n	80046a0 <_vfiprintf_r+0x22c>
 8004620:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <_vfiprintf_r+0x258>)
 8004622:	bb1b      	cbnz	r3, 800466c <_vfiprintf_r+0x1f8>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	3307      	adds	r3, #7
 8004628:	f023 0307 	bic.w	r3, r3, #7
 800462c:	3308      	adds	r3, #8
 800462e:	9303      	str	r3, [sp, #12]
 8004630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004632:	443b      	add	r3, r7
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	e767      	b.n	8004508 <_vfiprintf_r+0x94>
 8004638:	460c      	mov	r4, r1
 800463a:	2001      	movs	r0, #1
 800463c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004640:	e7a5      	b.n	800458e <_vfiprintf_r+0x11a>
 8004642:	2300      	movs	r3, #0
 8004644:	f04f 0c0a 	mov.w	ip, #10
 8004648:	4619      	mov	r1, r3
 800464a:	3401      	adds	r4, #1
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	4620      	mov	r0, r4
 8004650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004654:	3a30      	subs	r2, #48	; 0x30
 8004656:	2a09      	cmp	r2, #9
 8004658:	d903      	bls.n	8004662 <_vfiprintf_r+0x1ee>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0c5      	beq.n	80045ea <_vfiprintf_r+0x176>
 800465e:	9105      	str	r1, [sp, #20]
 8004660:	e7c3      	b.n	80045ea <_vfiprintf_r+0x176>
 8004662:	4604      	mov	r4, r0
 8004664:	2301      	movs	r3, #1
 8004666:	fb0c 2101 	mla	r1, ip, r1, r2
 800466a:	e7f0      	b.n	800464e <_vfiprintf_r+0x1da>
 800466c:	ab03      	add	r3, sp, #12
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	462a      	mov	r2, r5
 8004672:	4630      	mov	r0, r6
 8004674:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <_vfiprintf_r+0x25c>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	f3af 8000 	nop.w
 800467c:	4607      	mov	r7, r0
 800467e:	1c78      	adds	r0, r7, #1
 8004680:	d1d6      	bne.n	8004630 <_vfiprintf_r+0x1bc>
 8004682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004684:	07d9      	lsls	r1, r3, #31
 8004686:	d405      	bmi.n	8004694 <_vfiprintf_r+0x220>
 8004688:	89ab      	ldrh	r3, [r5, #12]
 800468a:	059a      	lsls	r2, r3, #22
 800468c:	d402      	bmi.n	8004694 <_vfiprintf_r+0x220>
 800468e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004690:	f7ff fc29 	bl	8003ee6 <__retarget_lock_release_recursive>
 8004694:	89ab      	ldrh	r3, [r5, #12]
 8004696:	065b      	lsls	r3, r3, #25
 8004698:	f53f af12 	bmi.w	80044c0 <_vfiprintf_r+0x4c>
 800469c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800469e:	e711      	b.n	80044c4 <_vfiprintf_r+0x50>
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	462a      	mov	r2, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <_vfiprintf_r+0x25c>)
 80046aa:	a904      	add	r1, sp, #16
 80046ac:	f000 f882 	bl	80047b4 <_printf_i>
 80046b0:	e7e4      	b.n	800467c <_vfiprintf_r+0x208>
 80046b2:	bf00      	nop
 80046b4:	08004db0 	.word	0x08004db0
 80046b8:	08004dd0 	.word	0x08004dd0
 80046bc:	08004d90 	.word	0x08004d90
 80046c0:	08004df0 	.word	0x08004df0
 80046c4:	08004df6 	.word	0x08004df6
 80046c8:	08004dfa 	.word	0x08004dfa
 80046cc:	00000000 	.word	0x00000000
 80046d0:	0800444f 	.word	0x0800444f

080046d4 <_printf_common>:
 80046d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	4616      	mov	r6, r2
 80046da:	4699      	mov	r9, r3
 80046dc:	688a      	ldr	r2, [r1, #8]
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	4607      	mov	r7, r0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bfb8      	it	lt
 80046e6:	4613      	movlt	r3, r2
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ee:	460c      	mov	r4, r1
 80046f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046f4:	b10a      	cbz	r2, 80046fa <_printf_common+0x26>
 80046f6:	3301      	adds	r3, #1
 80046f8:	6033      	str	r3, [r6, #0]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	0699      	lsls	r1, r3, #26
 80046fe:	bf42      	ittt	mi
 8004700:	6833      	ldrmi	r3, [r6, #0]
 8004702:	3302      	addmi	r3, #2
 8004704:	6033      	strmi	r3, [r6, #0]
 8004706:	6825      	ldr	r5, [r4, #0]
 8004708:	f015 0506 	ands.w	r5, r5, #6
 800470c:	d106      	bne.n	800471c <_printf_common+0x48>
 800470e:	f104 0a19 	add.w	sl, r4, #25
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	6832      	ldr	r2, [r6, #0]
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	42ab      	cmp	r3, r5
 800471a:	dc28      	bgt.n	800476e <_printf_common+0x9a>
 800471c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004720:	1e13      	subs	r3, r2, #0
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	bf18      	it	ne
 8004726:	2301      	movne	r3, #1
 8004728:	0692      	lsls	r2, r2, #26
 800472a:	d42d      	bmi.n	8004788 <_printf_common+0xb4>
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004734:	47c0      	blx	r8
 8004736:	3001      	adds	r0, #1
 8004738:	d020      	beq.n	800477c <_printf_common+0xa8>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	68e5      	ldr	r5, [r4, #12]
 800473e:	f003 0306 	and.w	r3, r3, #6
 8004742:	2b04      	cmp	r3, #4
 8004744:	bf18      	it	ne
 8004746:	2500      	movne	r5, #0
 8004748:	6832      	ldr	r2, [r6, #0]
 800474a:	f04f 0600 	mov.w	r6, #0
 800474e:	68a3      	ldr	r3, [r4, #8]
 8004750:	bf08      	it	eq
 8004752:	1aad      	subeq	r5, r5, r2
 8004754:	6922      	ldr	r2, [r4, #16]
 8004756:	bf08      	it	eq
 8004758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800475c:	4293      	cmp	r3, r2
 800475e:	bfc4      	itt	gt
 8004760:	1a9b      	subgt	r3, r3, r2
 8004762:	18ed      	addgt	r5, r5, r3
 8004764:	341a      	adds	r4, #26
 8004766:	42b5      	cmp	r5, r6
 8004768:	d11a      	bne.n	80047a0 <_printf_common+0xcc>
 800476a:	2000      	movs	r0, #0
 800476c:	e008      	b.n	8004780 <_printf_common+0xac>
 800476e:	2301      	movs	r3, #1
 8004770:	4652      	mov	r2, sl
 8004772:	4649      	mov	r1, r9
 8004774:	4638      	mov	r0, r7
 8004776:	47c0      	blx	r8
 8004778:	3001      	adds	r0, #1
 800477a:	d103      	bne.n	8004784 <_printf_common+0xb0>
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004784:	3501      	adds	r5, #1
 8004786:	e7c4      	b.n	8004712 <_printf_common+0x3e>
 8004788:	2030      	movs	r0, #48	; 0x30
 800478a:	18e1      	adds	r1, r4, r3
 800478c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004796:	4422      	add	r2, r4
 8004798:	3302      	adds	r3, #2
 800479a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800479e:	e7c5      	b.n	800472c <_printf_common+0x58>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4622      	mov	r2, r4
 80047a4:	4649      	mov	r1, r9
 80047a6:	4638      	mov	r0, r7
 80047a8:	47c0      	blx	r8
 80047aa:	3001      	adds	r0, #1
 80047ac:	d0e6      	beq.n	800477c <_printf_common+0xa8>
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7d9      	b.n	8004766 <_printf_common+0x92>
	...

080047b4 <_printf_i>:
 80047b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	7e0f      	ldrb	r7, [r1, #24]
 80047ba:	4691      	mov	r9, r2
 80047bc:	2f78      	cmp	r7, #120	; 0x78
 80047be:	4680      	mov	r8, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	469a      	mov	sl, r3
 80047c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047ca:	d807      	bhi.n	80047dc <_printf_i+0x28>
 80047cc:	2f62      	cmp	r7, #98	; 0x62
 80047ce:	d80a      	bhi.n	80047e6 <_printf_i+0x32>
 80047d0:	2f00      	cmp	r7, #0
 80047d2:	f000 80d9 	beq.w	8004988 <_printf_i+0x1d4>
 80047d6:	2f58      	cmp	r7, #88	; 0x58
 80047d8:	f000 80a4 	beq.w	8004924 <_printf_i+0x170>
 80047dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047e4:	e03a      	b.n	800485c <_printf_i+0xa8>
 80047e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047ea:	2b15      	cmp	r3, #21
 80047ec:	d8f6      	bhi.n	80047dc <_printf_i+0x28>
 80047ee:	a101      	add	r1, pc, #4	; (adr r1, 80047f4 <_printf_i+0x40>)
 80047f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	08004861 	.word	0x08004861
 80047fc:	080047dd 	.word	0x080047dd
 8004800:	080047dd 	.word	0x080047dd
 8004804:	080047dd 	.word	0x080047dd
 8004808:	080047dd 	.word	0x080047dd
 800480c:	08004861 	.word	0x08004861
 8004810:	080047dd 	.word	0x080047dd
 8004814:	080047dd 	.word	0x080047dd
 8004818:	080047dd 	.word	0x080047dd
 800481c:	080047dd 	.word	0x080047dd
 8004820:	0800496f 	.word	0x0800496f
 8004824:	08004891 	.word	0x08004891
 8004828:	08004951 	.word	0x08004951
 800482c:	080047dd 	.word	0x080047dd
 8004830:	080047dd 	.word	0x080047dd
 8004834:	08004991 	.word	0x08004991
 8004838:	080047dd 	.word	0x080047dd
 800483c:	08004891 	.word	0x08004891
 8004840:	080047dd 	.word	0x080047dd
 8004844:	080047dd 	.word	0x080047dd
 8004848:	08004959 	.word	0x08004959
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	1d1a      	adds	r2, r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	602a      	str	r2, [r5, #0]
 8004854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800485c:	2301      	movs	r3, #1
 800485e:	e0a4      	b.n	80049aa <_printf_i+0x1f6>
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	6829      	ldr	r1, [r5, #0]
 8004864:	0606      	lsls	r6, r0, #24
 8004866:	f101 0304 	add.w	r3, r1, #4
 800486a:	d50a      	bpl.n	8004882 <_printf_i+0xce>
 800486c:	680e      	ldr	r6, [r1, #0]
 800486e:	602b      	str	r3, [r5, #0]
 8004870:	2e00      	cmp	r6, #0
 8004872:	da03      	bge.n	800487c <_printf_i+0xc8>
 8004874:	232d      	movs	r3, #45	; 0x2d
 8004876:	4276      	negs	r6, r6
 8004878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487c:	230a      	movs	r3, #10
 800487e:	485e      	ldr	r0, [pc, #376]	; (80049f8 <_printf_i+0x244>)
 8004880:	e019      	b.n	80048b6 <_printf_i+0x102>
 8004882:	680e      	ldr	r6, [r1, #0]
 8004884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	bf18      	it	ne
 800488c:	b236      	sxthne	r6, r6
 800488e:	e7ef      	b.n	8004870 <_printf_i+0xbc>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	1d19      	adds	r1, r3, #4
 8004896:	6029      	str	r1, [r5, #0]
 8004898:	0601      	lsls	r1, r0, #24
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0xec>
 800489c:	681e      	ldr	r6, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0xf2>
 80048a0:	0646      	lsls	r6, r0, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0xe8>
 80048a4:	881e      	ldrh	r6, [r3, #0]
 80048a6:	2f6f      	cmp	r7, #111	; 0x6f
 80048a8:	bf0c      	ite	eq
 80048aa:	2308      	moveq	r3, #8
 80048ac:	230a      	movne	r3, #10
 80048ae:	4852      	ldr	r0, [pc, #328]	; (80049f8 <_printf_i+0x244>)
 80048b0:	2100      	movs	r1, #0
 80048b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048b6:	6865      	ldr	r5, [r4, #4]
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	bfa8      	it	ge
 80048bc:	6821      	ldrge	r1, [r4, #0]
 80048be:	60a5      	str	r5, [r4, #8]
 80048c0:	bfa4      	itt	ge
 80048c2:	f021 0104 	bicge.w	r1, r1, #4
 80048c6:	6021      	strge	r1, [r4, #0]
 80048c8:	b90e      	cbnz	r6, 80048ce <_printf_i+0x11a>
 80048ca:	2d00      	cmp	r5, #0
 80048cc:	d04d      	beq.n	800496a <_printf_i+0x1b6>
 80048ce:	4615      	mov	r5, r2
 80048d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80048d4:	fb03 6711 	mls	r7, r3, r1, r6
 80048d8:	5dc7      	ldrb	r7, [r0, r7]
 80048da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048de:	4637      	mov	r7, r6
 80048e0:	42bb      	cmp	r3, r7
 80048e2:	460e      	mov	r6, r1
 80048e4:	d9f4      	bls.n	80048d0 <_printf_i+0x11c>
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d10b      	bne.n	8004902 <_printf_i+0x14e>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	07de      	lsls	r6, r3, #31
 80048ee:	d508      	bpl.n	8004902 <_printf_i+0x14e>
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	6861      	ldr	r1, [r4, #4]
 80048f4:	4299      	cmp	r1, r3
 80048f6:	bfde      	ittt	le
 80048f8:	2330      	movle	r3, #48	; 0x30
 80048fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004902:	1b52      	subs	r2, r2, r5
 8004904:	6122      	str	r2, [r4, #16]
 8004906:	464b      	mov	r3, r9
 8004908:	4621      	mov	r1, r4
 800490a:	4640      	mov	r0, r8
 800490c:	f8cd a000 	str.w	sl, [sp]
 8004910:	aa03      	add	r2, sp, #12
 8004912:	f7ff fedf 	bl	80046d4 <_printf_common>
 8004916:	3001      	adds	r0, #1
 8004918:	d14c      	bne.n	80049b4 <_printf_i+0x200>
 800491a:	f04f 30ff 	mov.w	r0, #4294967295
 800491e:	b004      	add	sp, #16
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004924:	4834      	ldr	r0, [pc, #208]	; (80049f8 <_printf_i+0x244>)
 8004926:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800492a:	6829      	ldr	r1, [r5, #0]
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004932:	6029      	str	r1, [r5, #0]
 8004934:	061d      	lsls	r5, r3, #24
 8004936:	d514      	bpl.n	8004962 <_printf_i+0x1ae>
 8004938:	07df      	lsls	r7, r3, #31
 800493a:	bf44      	itt	mi
 800493c:	f043 0320 	orrmi.w	r3, r3, #32
 8004940:	6023      	strmi	r3, [r4, #0]
 8004942:	b91e      	cbnz	r6, 800494c <_printf_i+0x198>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f023 0320 	bic.w	r3, r3, #32
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	2310      	movs	r3, #16
 800494e:	e7af      	b.n	80048b0 <_printf_i+0xfc>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	2378      	movs	r3, #120	; 0x78
 800495a:	4828      	ldr	r0, [pc, #160]	; (80049fc <_printf_i+0x248>)
 800495c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004960:	e7e3      	b.n	800492a <_printf_i+0x176>
 8004962:	0659      	lsls	r1, r3, #25
 8004964:	bf48      	it	mi
 8004966:	b2b6      	uxthmi	r6, r6
 8004968:	e7e6      	b.n	8004938 <_printf_i+0x184>
 800496a:	4615      	mov	r5, r2
 800496c:	e7bb      	b.n	80048e6 <_printf_i+0x132>
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	6826      	ldr	r6, [r4, #0]
 8004972:	1d18      	adds	r0, r3, #4
 8004974:	6961      	ldr	r1, [r4, #20]
 8004976:	6028      	str	r0, [r5, #0]
 8004978:	0635      	lsls	r5, r6, #24
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	d501      	bpl.n	8004982 <_printf_i+0x1ce>
 800497e:	6019      	str	r1, [r3, #0]
 8004980:	e002      	b.n	8004988 <_printf_i+0x1d4>
 8004982:	0670      	lsls	r0, r6, #25
 8004984:	d5fb      	bpl.n	800497e <_printf_i+0x1ca>
 8004986:	8019      	strh	r1, [r3, #0]
 8004988:	2300      	movs	r3, #0
 800498a:	4615      	mov	r5, r2
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	e7ba      	b.n	8004906 <_printf_i+0x152>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	2100      	movs	r1, #0
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	602a      	str	r2, [r5, #0]
 8004998:	681d      	ldr	r5, [r3, #0]
 800499a:	6862      	ldr	r2, [r4, #4]
 800499c:	4628      	mov	r0, r5
 800499e:	f000 f8d9 	bl	8004b54 <memchr>
 80049a2:	b108      	cbz	r0, 80049a8 <_printf_i+0x1f4>
 80049a4:	1b40      	subs	r0, r0, r5
 80049a6:	6060      	str	r0, [r4, #4]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2300      	movs	r3, #0
 80049ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b2:	e7a8      	b.n	8004906 <_printf_i+0x152>
 80049b4:	462a      	mov	r2, r5
 80049b6:	4649      	mov	r1, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	47d0      	blx	sl
 80049be:	3001      	adds	r0, #1
 80049c0:	d0ab      	beq.n	800491a <_printf_i+0x166>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	079b      	lsls	r3, r3, #30
 80049c6:	d413      	bmi.n	80049f0 <_printf_i+0x23c>
 80049c8:	68e0      	ldr	r0, [r4, #12]
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	4298      	cmp	r0, r3
 80049ce:	bfb8      	it	lt
 80049d0:	4618      	movlt	r0, r3
 80049d2:	e7a4      	b.n	800491e <_printf_i+0x16a>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4632      	mov	r2, r6
 80049d8:	4649      	mov	r1, r9
 80049da:	4640      	mov	r0, r8
 80049dc:	47d0      	blx	sl
 80049de:	3001      	adds	r0, #1
 80049e0:	d09b      	beq.n	800491a <_printf_i+0x166>
 80049e2:	3501      	adds	r5, #1
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	9903      	ldr	r1, [sp, #12]
 80049e8:	1a5b      	subs	r3, r3, r1
 80049ea:	42ab      	cmp	r3, r5
 80049ec:	dcf2      	bgt.n	80049d4 <_printf_i+0x220>
 80049ee:	e7eb      	b.n	80049c8 <_printf_i+0x214>
 80049f0:	2500      	movs	r5, #0
 80049f2:	f104 0619 	add.w	r6, r4, #25
 80049f6:	e7f5      	b.n	80049e4 <_printf_i+0x230>
 80049f8:	08004e01 	.word	0x08004e01
 80049fc:	08004e12 	.word	0x08004e12

08004a00 <_sbrk_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	2300      	movs	r3, #0
 8004a04:	4d05      	ldr	r5, [pc, #20]	; (8004a1c <_sbrk_r+0x1c>)
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fc fb3c 	bl	8001088 <_sbrk>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_sbrk_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_sbrk_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	200001ac 	.word	0x200001ac

08004a20 <__sread>:
 8004a20:	b510      	push	{r4, lr}
 8004a22:	460c      	mov	r4, r1
 8004a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a28:	f000 f906 	bl	8004c38 <_read_r>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	bfab      	itete	ge
 8004a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a32:	89a3      	ldrhlt	r3, [r4, #12]
 8004a34:	181b      	addge	r3, r3, r0
 8004a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a3a:	bfac      	ite	ge
 8004a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a3e:	81a3      	strhlt	r3, [r4, #12]
 8004a40:	bd10      	pop	{r4, pc}

08004a42 <__swrite>:
 8004a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a46:	461f      	mov	r7, r3
 8004a48:	898b      	ldrh	r3, [r1, #12]
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	05db      	lsls	r3, r3, #23
 8004a4e:	460c      	mov	r4, r1
 8004a50:	4616      	mov	r6, r2
 8004a52:	d505      	bpl.n	8004a60 <__swrite+0x1e>
 8004a54:	2302      	movs	r3, #2
 8004a56:	2200      	movs	r2, #0
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	f000 f868 	bl	8004b30 <_lseek_r>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	4632      	mov	r2, r6
 8004a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a76:	f000 b817 	b.w	8004aa8 <_write_r>

08004a7a <__sseek>:
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a82:	f000 f855 	bl	8004b30 <_lseek_r>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	bf15      	itete	ne
 8004a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a96:	81a3      	strheq	r3, [r4, #12]
 8004a98:	bf18      	it	ne
 8004a9a:	81a3      	strhne	r3, [r4, #12]
 8004a9c:	bd10      	pop	{r4, pc}

08004a9e <__sclose>:
 8004a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa2:	f000 b813 	b.w	8004acc <_close_r>
	...

08004aa8 <_write_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4d05      	ldr	r5, [pc, #20]	; (8004ac8 <_write_r+0x20>)
 8004ab4:	602a      	str	r2, [r5, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fc fa99 	bl	8000fee <_write>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_write_r+0x1e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_write_r+0x1e>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	200001ac 	.word	0x200001ac

08004acc <_close_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4d05      	ldr	r5, [pc, #20]	; (8004ae8 <_close_r+0x1c>)
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	f7fc faa5 	bl	8001026 <_close>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_close_r+0x1a>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_close_r+0x1a>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	200001ac 	.word	0x200001ac

08004aec <_fstat_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d06      	ldr	r5, [pc, #24]	; (8004b0c <_fstat_r+0x20>)
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	f7fc fa9f 	bl	800103c <_fstat>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d102      	bne.n	8004b08 <_fstat_r+0x1c>
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	b103      	cbz	r3, 8004b08 <_fstat_r+0x1c>
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200001ac 	.word	0x200001ac

08004b10 <_isatty_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	2300      	movs	r3, #0
 8004b14:	4d05      	ldr	r5, [pc, #20]	; (8004b2c <_isatty_r+0x1c>)
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fc fa9d 	bl	800105a <_isatty>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_isatty_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_isatty_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	200001ac 	.word	0x200001ac

08004b30 <_lseek_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4d05      	ldr	r5, [pc, #20]	; (8004b50 <_lseek_r+0x20>)
 8004b3c:	602a      	str	r2, [r5, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7fc fa95 	bl	800106e <_lseek>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_lseek_r+0x1e>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_lseek_r+0x1e>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	200001ac 	.word	0x200001ac

08004b54 <memchr>:
 8004b54:	4603      	mov	r3, r0
 8004b56:	b510      	push	{r4, lr}
 8004b58:	b2c9      	uxtb	r1, r1
 8004b5a:	4402      	add	r2, r0
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	d101      	bne.n	8004b66 <memchr+0x12>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e003      	b.n	8004b6e <memchr+0x1a>
 8004b66:	7804      	ldrb	r4, [r0, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	428c      	cmp	r4, r1
 8004b6c:	d1f6      	bne.n	8004b5c <memchr+0x8>
 8004b6e:	bd10      	pop	{r4, pc}

08004b70 <memcpy>:
 8004b70:	440a      	add	r2, r1
 8004b72:	4291      	cmp	r1, r2
 8004b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b78:	d100      	bne.n	8004b7c <memcpy+0xc>
 8004b7a:	4770      	bx	lr
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b82:	4291      	cmp	r1, r2
 8004b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b88:	d1f9      	bne.n	8004b7e <memcpy+0xe>
 8004b8a:	bd10      	pop	{r4, pc}

08004b8c <memmove>:
 8004b8c:	4288      	cmp	r0, r1
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	eb01 0402 	add.w	r4, r1, r2
 8004b94:	d902      	bls.n	8004b9c <memmove+0x10>
 8004b96:	4284      	cmp	r4, r0
 8004b98:	4623      	mov	r3, r4
 8004b9a:	d807      	bhi.n	8004bac <memmove+0x20>
 8004b9c:	1e43      	subs	r3, r0, #1
 8004b9e:	42a1      	cmp	r1, r4
 8004ba0:	d008      	beq.n	8004bb4 <memmove+0x28>
 8004ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004baa:	e7f8      	b.n	8004b9e <memmove+0x12>
 8004bac:	4601      	mov	r1, r0
 8004bae:	4402      	add	r2, r0
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	d100      	bne.n	8004bb6 <memmove+0x2a>
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bbe:	e7f7      	b.n	8004bb0 <memmove+0x24>

08004bc0 <__malloc_lock>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__malloc_lock+0x8>)
 8004bc2:	f7ff b98f 	b.w	8003ee4 <__retarget_lock_acquire_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	200001a0 	.word	0x200001a0

08004bcc <__malloc_unlock>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	; (8004bd4 <__malloc_unlock+0x8>)
 8004bce:	f7ff b98a 	b.w	8003ee6 <__retarget_lock_release_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	200001a0 	.word	0x200001a0

08004bd8 <_realloc_r>:
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bdc:	4680      	mov	r8, r0
 8004bde:	4614      	mov	r4, r2
 8004be0:	460e      	mov	r6, r1
 8004be2:	b921      	cbnz	r1, 8004bee <_realloc_r+0x16>
 8004be4:	4611      	mov	r1, r2
 8004be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	f7ff ba4b 	b.w	8004084 <_malloc_r>
 8004bee:	b92a      	cbnz	r2, 8004bfc <_realloc_r+0x24>
 8004bf0:	f7ff f9e0 	bl	8003fb4 <_free_r>
 8004bf4:	4625      	mov	r5, r4
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bfc:	f000 f82e 	bl	8004c5c <_malloc_usable_size_r>
 8004c00:	4284      	cmp	r4, r0
 8004c02:	4607      	mov	r7, r0
 8004c04:	d802      	bhi.n	8004c0c <_realloc_r+0x34>
 8004c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c0a:	d812      	bhi.n	8004c32 <_realloc_r+0x5a>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f7ff fa38 	bl	8004084 <_malloc_r>
 8004c14:	4605      	mov	r5, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d0ed      	beq.n	8004bf6 <_realloc_r+0x1e>
 8004c1a:	42bc      	cmp	r4, r7
 8004c1c:	4622      	mov	r2, r4
 8004c1e:	4631      	mov	r1, r6
 8004c20:	bf28      	it	cs
 8004c22:	463a      	movcs	r2, r7
 8004c24:	f7ff ffa4 	bl	8004b70 <memcpy>
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f7ff f9c2 	bl	8003fb4 <_free_r>
 8004c30:	e7e1      	b.n	8004bf6 <_realloc_r+0x1e>
 8004c32:	4635      	mov	r5, r6
 8004c34:	e7df      	b.n	8004bf6 <_realloc_r+0x1e>
	...

08004c38 <_read_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	2200      	movs	r2, #0
 8004c42:	4d05      	ldr	r5, [pc, #20]	; (8004c58 <_read_r+0x20>)
 8004c44:	602a      	str	r2, [r5, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fc f9b4 	bl	8000fb4 <_read>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_read_r+0x1e>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_read_r+0x1e>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	200001ac 	.word	0x200001ac

08004c5c <_malloc_usable_size_r>:
 8004c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c60:	1f18      	subs	r0, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfbc      	itt	lt
 8004c66:	580b      	ldrlt	r3, [r1, r0]
 8004c68:	18c0      	addlt	r0, r0, r3
 8004c6a:	4770      	bx	lr

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
