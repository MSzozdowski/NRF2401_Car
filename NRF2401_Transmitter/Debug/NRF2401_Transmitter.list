
NRF2401_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008160  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08008300  08008300  00018300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087fc  080087fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080087fc  080087fc  000187fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008804  08008804  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800880c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001dc  080089e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080089e8  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b36  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e54  00000000  00000000  00033d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00037cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d1a  00000000  00000000  00038c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001485b  00000000  00000000  000529aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dbd7  00000000  00000000  00067205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104ddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000574c  00000000  00000000  00104e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082e8 	.word	0x080082e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080082e8 	.word	0x080082e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <MX_ADC1_Init+0xd4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000efe:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <MX_ADC1_Init+0xd8>)
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1c:	481b      	ldr	r0, [pc, #108]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f1e:	f001 fb57 	bl	80025d0 <HAL_ADC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f28:	f000 fb0e 	bl	8001548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f34:	2307      	movs	r3, #7
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4813      	ldr	r0, [pc, #76]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f3e:	f001 fcd7 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f48:	f000 fafe 	bl	8001548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f5a:	f001 fcc9 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f64:	f000 faf0 	bl	8001548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_ADC1_Init+0xd0>)
 8000f76:	f001 fcbb 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f80:	f000 fae2 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200001f8 	.word	0x200001f8
 8000f90:	40012000 	.word	0x40012000
 8000f94:	0f000001 	.word	0x0f000001

08000f98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_ADC_MspInit+0xe4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d15b      	bne.n	8001072 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a2f      	ldr	r2, [pc, #188]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a28      	ldr	r2, [pc, #160]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_ADC_MspInit+0xe8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <HAL_ADC_MspInit+0xec>)
 800103e:	f001 ff97 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001042:	2310      	movs	r3, #16
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <HAL_ADC_MspInit+0xf0>)
 8001056:	f001 ff8b 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <HAL_ADC_MspInit+0xf4>)
 800106e:	f001 ff7f 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40012000 	.word	0x40012000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400

08001090 <Clock_Init>:
static uint32_t tick; //100us tickrate

TIM_HandleTypeDef *clock_t;

void Clock_Init(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	clock_t = htim;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <Clock_Init+0x24>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htim);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f003 fb94 	bl	80047cc <HAL_TIM_Base_Start_IT>
	tick = 0;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <Clock_Init+0x28>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000244 	.word	0x20000244
 80010b8:	20000240 	.word	0x20000240

080010bc <Clock_GetTick>:

uint32_t Clock_GetTick()
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return tick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <Clock_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000240 	.word	0x20000240

080010d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if(htim == clock_t)
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d104      	bne.n	80010f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
		tick+=100;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3364      	adds	r3, #100	; 0x64
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010ee:	6013      	str	r3, [r2, #0]
	}
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000244 	.word	0x20000244
 8001100:	20000240 	.word	0x20000240

08001104 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <MX_GPIO_Init+0x120>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a40      	ldr	r2, [pc, #256]	; (8001224 <MX_GPIO_Init+0x120>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <MX_GPIO_Init+0x120>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_GPIO_Init+0x120>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a39      	ldr	r2, [pc, #228]	; (8001224 <MX_GPIO_Init+0x120>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_GPIO_Init+0x120>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_GPIO_Init+0x120>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <MX_GPIO_Init+0x120>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_GPIO_Init+0x120>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_GPIO_Init+0x120>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <MX_GPIO_Init+0x120>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_GPIO_Init+0x120>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2181      	movs	r1, #129	; 0x81
 800118e:	4826      	ldr	r0, [pc, #152]	; (8001228 <MX_GPIO_Init+0x124>)
 8001190:	f002 f872 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4824      	ldr	r0, [pc, #144]	; (800122c <MX_GPIO_Init+0x128>)
 800119c:	f002 f86c 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	4822      	ldr	r0, [pc, #136]	; (8001230 <MX_GPIO_Init+0x12c>)
 80011a6:	f002 f867 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4819      	ldr	r0, [pc, #100]	; (8001228 <MX_GPIO_Init+0x124>)
 80011c2:	f001 fed5 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD2_Pin|NRF_CSN_Pin;
 80011c6:	2381      	movs	r3, #129	; 0x81
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <MX_GPIO_Init+0x124>)
 80011de:	f001 fec7 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_GPIO_Init+0x128>)
 80011fc:	f001 feb8 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x12c>)
 8001218:	f001 feaa 	bl	8002f70 <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <JoystickInit>:

#include "main.h"
#include "joystick.h"

void JoystickInit(T_Joystick* Joystick, ADC_HandleTypeDef* adc ,uint32_t AdcChannel)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	Joystick->adc = *adc;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	3304      	adds	r3, #4
 8001246:	4611      	mov	r1, r2
 8001248:	2248      	movs	r2, #72	; 0x48
 800124a:	4618      	mov	r0, r3
 800124c:	f004 faa0 	bl	8005790 <memcpy>
	Joystick->AdcChannel = AdcChannel;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <Joystick_SetChannel>:

void Joystick_SetChannel(T_Joystick* Joystick)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
	sConfig.Channel = Joystick -> AdcChannel;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800127e:	2307      	movs	r3, #7
 8001280:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&Joystick->adc, &sConfig) != HAL_OK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	f107 0208 	add.w	r2, r7, #8
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fb2f 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <Joystick_SetChannel+0x3e>
	{
		Error_Handler();
 8001298:	f000 f956 	bl	8001548 <Error_Handler>
	}
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Joystick_GetValue>:

uint16_t Joystick_GetValue(T_Joystick* Joystick)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
	Joystick_SetChannel(Joystick);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffd6 	bl	800125e <Joystick_SetChannel>
	HAL_ADC_Start(&Joystick -> adc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3304      	adds	r3, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 f9ce 	bl	8002658 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&Joystick -> adc, 1000) == HAL_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fa7b 	bl	80027c0 <HAL_ADC_PollForConversion>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <Joystick_GetValue+0x50>
		return Joystick_Map(HAL_ADC_GetValue(&Joystick -> adc), 0, 4095, 0, 255);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fafe 	bl	80028d6 <HAL_ADC_GetValue>
 80012da:	4603      	mov	r3, r0
 80012dc:	b298      	uxth	r0, r3
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012e8:	2100      	movs	r1, #0
 80012ea:	f000 f808 	bl	80012fe <Joystick_Map>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	e000      	b.n	80012f6 <Joystick_GetValue+0x52>
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <Joystick_Map>:

uint8_t Joystick_Map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 80012fe:	b490      	push	{r4, r7}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4604      	mov	r4, r0
 8001306:	4608      	mov	r0, r1
 8001308:	4611      	mov	r1, r2
 800130a:	461a      	mov	r2, r3
 800130c:	4623      	mov	r3, r4
 800130e:	80fb      	strh	r3, [r7, #6]
 8001310:	4603      	mov	r3, r0
 8001312:	80bb      	strh	r3, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	803b      	strh	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	8a39      	ldrh	r1, [r7, #16]
 8001324:	883a      	ldrh	r2, [r7, #0]
 8001326:	1a8a      	subs	r2, r1, r2
 8001328:	fb03 f202 	mul.w	r2, r3, r2
 800132c:	8879      	ldrh	r1, [r7, #2]
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	1acb      	subs	r3, r1, r3
 8001332:	fb92 f3f3 	sdiv	r3, r2, r3
 8001336:	b2da      	uxtb	r2, r3
 8001338:	883b      	ldrh	r3, [r7, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b2db      	uxtb	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bc90      	pop	{r4, r7}
 8001348:	4770      	bx	lr
	...

0800134c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d109      	bne.n	800136e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800135a:	230d      	movs	r3, #13
 800135c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, 1000);
 800135e:	f107 010f 	add.w	r1, r7, #15
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	2201      	movs	r2, #1
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <__io_putchar+0x3c>)
 800136a:	f003 fe72 	bl	8005052 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 800136e:	1d39      	adds	r1, r7, #4
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	2201      	movs	r2, #1
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <__io_putchar+0x3c>)
 8001378:	f003 fe6b 	bl	8005052 <HAL_UART_Transmit>
    return 1;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200003a4 	.word	0x200003a4

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f001 f887 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 f861 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f7ff feb3 	bl	8001104 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800139e:	f000 ffe5 	bl	800236c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013a2:	f000 fdbf 	bl	8001f24 <MX_SPI1_Init>
  MX_TIM1_Init();
 80013a6:	f000 ff6f 	bl	8002288 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013aa:	f7ff fd87 	bl	8000ebc <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80013ae:	f000 f8bf 	bl	8001530 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Clock_Init(&htim1);
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <main+0xb4>)
 80013b4:	f7ff fe6c 	bl	8001090 <Clock_Init>
  NRF_Init(&hspi1, 't');
 80013b8:	2174      	movs	r1, #116	; 0x74
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <main+0xb8>)
 80013bc:	f000 f8ca 	bl	8001554 <NRF_Init>
  JoystickInit(&Acceleration, &hadc1, ADC_CHANNEL_8);
 80013c0:	2208      	movs	r2, #8
 80013c2:	4921      	ldr	r1, [pc, #132]	; (8001448 <main+0xbc>)
 80013c4:	4821      	ldr	r0, [pc, #132]	; (800144c <main+0xc0>)
 80013c6:	f7ff ff35 	bl	8001234 <JoystickInit>
  JoystickInit(&Direction, &hadc1, ADC_CHANNEL_4);
 80013ca:	2204      	movs	r2, #4
 80013cc:	491e      	ldr	r1, [pc, #120]	; (8001448 <main+0xbc>)
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <main+0xc4>)
 80013d0:	f7ff ff30 	bl	8001234 <JoystickInit>

  uint8_t i = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint8_t tx_data[MESSAGE_LENGTH];
  uint32_t last_tick = HAL_GetTick();
 80013d8:	f001 f8ca 	bl	8002570 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NRF_process(tx_data, MESSAGE_LENGTH);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f918 	bl	8001618 <NRF_process>
	  if(HAL_GetTick() - last_tick >= 1000)
 80013e8:	f001 f8c2 	bl	8002570 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f6:	d3f2      	bcc.n	80013de <main+0x52>
	  {
		  tx_data[0] = Joystick_GetValue(&Acceleration);
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <main+0xc0>)
 80013fa:	f7ff ff53 	bl	80012a4 <Joystick_GetValue>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	713b      	strb	r3, [r7, #4]
		  tx_data[1] = Joystick_GetValue(&Direction);
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <main+0xc4>)
 8001406:	f7ff ff4d 	bl	80012a4 <Joystick_GetValue>
 800140a:	4603      	mov	r3, r0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	717b      	strb	r3, [r7, #5]
		  printf("acceleration = %d \t direction = %d  \r\n", tx_data[0], tx_data[1]);
 8001410:	793b      	ldrb	r3, [r7, #4]
 8001412:	4619      	mov	r1, r3
 8001414:	797b      	ldrb	r3, [r7, #5]
 8001416:	461a      	mov	r2, r3
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <main+0xc8>)
 800141a:	f004 fe39 	bl	8006090 <iprintf>
		  i++;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3301      	adds	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
		  i%=5;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <main+0xcc>)
 8001428:	fba3 1302 	umull	r1, r3, r3, r2
 800142c:	0899      	lsrs	r1, r3, #2
 800142e:	460b      	mov	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	73fb      	strb	r3, [r7, #15]
		  last_tick = HAL_GetTick();
 8001438:	f001 f89a 	bl	8002570 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
	  NRF_process(tx_data, MESSAGE_LENGTH);
 800143e:	e7ce      	b.n	80013de <main+0x52>
 8001440:	2000035c 	.word	0x2000035c
 8001444:	20000300 	.word	0x20000300
 8001448:	200001f8 	.word	0x200001f8
 800144c:	20000248 	.word	0x20000248
 8001450:	20000294 	.word	0x20000294
 8001454:	08008300 	.word	0x08008300
 8001458:	cccccccd 	.word	0xcccccccd

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	; 0x50
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	2230      	movs	r2, #48	; 0x30
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f004 f99e 	bl	80057ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <SystemClock_Config+0xcc>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <SystemClock_Config+0xcc>)
 800148a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <SystemClock_Config+0xcc>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <SystemClock_Config+0xd0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a21      	ldr	r2, [pc, #132]	; (800152c <SystemClock_Config+0xd0>)
 80014a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <SystemClock_Config+0xd0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014cc:	2310      	movs	r3, #16
 80014ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014da:	2304      	movs	r3, #4
 80014dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fee2 	bl	80032ac <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014ee:	f000 f82b 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f002 f944 	bl	800379c <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800151a:	f000 f815 	bl	8001548 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	; 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2019      	movs	r0, #25
 800153a:	f001 fce2 	bl	8002f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800153e:	2019      	movs	r0, #25
 8001540:	f001 fcfb 	bl	8002f3a <HAL_NVIC_EnableIRQ>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <NRF_Init>:
static uint8_t NRF_DataAvailable(void);

static void NRF_BufferCopy(uint8_t *buffer);

void NRF_Init(SPI_HandleTypeDef *hspi, char mode)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
	NRF_spi = hspi;
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <NRF_Init+0xa4>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]

	NRF_CE_LOW;
 8001566:	2200      	movs	r2, #0
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	4824      	ldr	r0, [pc, #144]	; (80015fc <NRF_Init+0xa8>)
 800156c:	f001 fe84 	bl	8003278 <HAL_GPIO_WritePin>
	NRF_SetOutputPower(NRF24_PA_PWR_0dBM);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 fa7f 	bl	8001a74 <NRF_SetOutputPower>
	NRF_SetDataRate(NRF24_RF_DR_250KBPS);
 8001576:	2002      	movs	r0, #2
 8001578:	f000 fa97 	bl	8001aaa <NRF_SetDataRate>
	NRF_SetCRC(CRC_ENABLED, NRF24_CRC_WIDTH_1B);
 800157c:	2100      	movs	r1, #0
 800157e:	2001      	movs	r0, #1
 8001580:	f000 fabe 	bl	8001b00 <NRF_SetCRC>
	NRF_SetRetransmission(NRF24_RETRANSMISSION_DELAY, NRF24_RETRANMISSION_REPEAT);
 8001584:	2107      	movs	r1, #7
 8001586:	2004      	movs	r0, #4
 8001588:	f000 fae8 	bl	8001b5c <NRF_SetRetransmission>

	NRF_SetDataPipe(NRF24_PIPE_NUMBER);
 800158c:	2000      	movs	r0, #0
 800158e:	f000 faff 	bl	8001b90 <NRF_SetDataPipe>
	NRF_EnableAutoACK(NRF24_PIPE_NUMBER, NRF24_EN_AUTO_ACK);
 8001592:	2101      	movs	r1, #1
 8001594:	2000      	movs	r0, #0
 8001596:	f000 fb15 	bl	8001bc4 <NRF_EnableAutoACK>
	NRF_SetPayloadSize(NRF24_PIPE_NUMBER, NRF24_PAYLOAD_SIZE);
 800159a:	2102      	movs	r1, #2
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fb41 	bl	8001c24 <NRF_SetPayloadSize>

	NRF_SetChannel(NRF24_CHANNEL);
 80015a2:	200a      	movs	r0, #10
 80015a4:	f000 fb52 	bl	8001c4c <NRF_SetChannel>
	NRF_SetAddressWidth(NRF24_ADD_WIDTH);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fb5d 	bl	8001c68 <NRF_SetAddressWidth>

	NRF_SetRXAddress(NRF24_PIPE_NUMBER, (uint8_t*)"Nad");
 80015ae:	4914      	ldr	r1, [pc, #80]	; (8001600 <NRF_Init+0xac>)
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 fb8d 	bl	8001cd0 <NRF_SetRXAddress>
	NRF_SetTXAddress((uint8_t*)"Odb");
 80015b6:	4813      	ldr	r0, [pc, #76]	; (8001604 <NRF_Init+0xb0>)
 80015b8:	f000 fbc4 	bl	8001d44 <NRF_SetTXAddress>

	nrf_mode = mode;
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <NRF_Init+0xb4>)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	7013      	strb	r3, [r2, #0]
	if(nrf_mode == 't')
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <NRF_Init+0xb4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b74      	cmp	r3, #116	; 0x74
 80015c8:	d105      	bne.n	80015d6 <NRF_Init+0x82>
	{
		NRF_TX_Mode();
 80015ca:	f000 fc21 	bl	8001e10 <NRF_TX_Mode>
		printf("Configured as transmitter \r\n");
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <NRF_Init+0xb8>)
 80015d0:	f004 fde4 	bl	800619c <puts>
		NRF_RX_Mode();
		printf("Configured as receiver \r\n");
	}
	else
		printf("No mode selected \r\n");
}
 80015d4:	e00c      	b.n	80015f0 <NRF_Init+0x9c>
	else if (nrf_mode == 'r')
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <NRF_Init+0xb4>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b72      	cmp	r3, #114	; 0x72
 80015dc:	d105      	bne.n	80015ea <NRF_Init+0x96>
		NRF_RX_Mode();
 80015de:	f000 fbf7 	bl	8001dd0 <NRF_RX_Mode>
		printf("Configured as receiver \r\n");
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <NRF_Init+0xbc>)
 80015e4:	f004 fdda 	bl	800619c <puts>
}
 80015e8:	e002      	b.n	80015f0 <NRF_Init+0x9c>
		printf("No mode selected \r\n");
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <NRF_Init+0xc0>)
 80015ec:	f004 fdd6 	bl	800619c <puts>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200002e0 	.word	0x200002e0
 80015fc:	40020400 	.word	0x40020400
 8001600:	08008328 	.word	0x08008328
 8001604:	0800832c 	.word	0x0800832c
 8001608:	200002f8 	.word	0x200002f8
 800160c:	08008330 	.word	0x08008330
 8001610:	0800834c 	.word	0x0800834c
 8001614:	08008368 	.word	0x08008368

08001618 <NRF_process>:

void NRF_process(uint8_t* message, uint8_t message_length)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	if(NRF_Faults != NRF_NO_ERROR)
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <NRF_process+0x214>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <NRF_process+0x1a>
		NRF_State = NRF_IDLE;
 800162c:	4b80      	ldr	r3, [pc, #512]	; (8001830 <NRF_process+0x218>)
 800162e:	2207      	movs	r2, #7
 8001630:	701a      	strb	r2, [r3, #0]

	switch (NRF_State)
 8001632:	4b7f      	ldr	r3, [pc, #508]	; (8001830 <NRF_process+0x218>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b07      	cmp	r3, #7
 8001638:	f200 80f3 	bhi.w	8001822 <NRF_process+0x20a>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <NRF_process+0x2c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001665 	.word	0x08001665
 8001648:	0800167d 	.word	0x0800167d
 800164c:	08001699 	.word	0x08001699
 8001650:	0800178d 	.word	0x0800178d
 8001654:	080016f9 	.word	0x080016f9
 8001658:	0800171d 	.word	0x0800171d
 800165c:	080017a5 	.word	0x080017a5
 8001660:	080017c3 	.word	0x080017c3
	{
	case NRF_POWER_DOWN:
		NRF_PowerUp(NRF24_POWER_ON);
 8001664:	2001      	movs	r0, #1
 8001666:	f000 fb18 	bl	8001c9a <NRF_PowerUp>
		lastTick100us = Clock_GetTick();
 800166a:	f7ff fd27 	bl	80010bc <Clock_GetTick>
 800166e:	4603      	mov	r3, r0
 8001670:	4a70      	ldr	r2, [pc, #448]	; (8001834 <NRF_process+0x21c>)
 8001672:	6013      	str	r3, [r2, #0]
		NRF_State = NRF_START_UP;
 8001674:	4b6e      	ldr	r3, [pc, #440]	; (8001830 <NRF_process+0x218>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
		break;
 800167a:	e0d2      	b.n	8001822 <NRF_process+0x20a>

	case NRF_START_UP:
		if(Clock_GetTick() - lastTick100us >= NRF_START_UP_TIME)
 800167c:	f7ff fd1e 	bl	80010bc <Clock_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <NRF_process+0x21c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800168c:	f0c0 80be 	bcc.w	800180c <NRF_process+0x1f4>
			NRF_State = NRF_STANBY1;
 8001690:	4b67      	ldr	r3, [pc, #412]	; (8001830 <NRF_process+0x218>)
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
		break;
 8001696:	e0b9      	b.n	800180c <NRF_process+0x1f4>

	case NRF_STANBY1:
		lastTick100us = Clock_GetTick();
 8001698:	f7ff fd10 	bl	80010bc <Clock_GetTick>
 800169c:	4603      	mov	r3, r0
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <NRF_process+0x21c>)
 80016a0:	6013      	str	r3, [r2, #0]
		if(nrf_mode == 't')
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <NRF_process+0x220>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b74      	cmp	r3, #116	; 0x74
 80016a8:	d115      	bne.n	80016d6 <NRF_process+0xbe>
		{
			//uint8_t message_length = sprintf((char *) tx_buffer, "%d", message);

			if(message_length != NRF24_PAYLOAD_SIZE)
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d003      	beq.n	80016b8 <NRF_process+0xa0>
				NRF_Faults = NRF_DIFFRENT_MESSAGE_SIZE;
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <NRF_process+0x214>)
 80016b2:	2202      	movs	r2, #2
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e002      	b.n	80016be <NRF_process+0xa6>
			else
				NRF_BufferCopy(message);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fc15 	bl	8001ee8 <NRF_BufferCopy>

			NRF_TXPayload(tx_buffer);
 80016be:	485f      	ldr	r0, [pc, #380]	; (800183c <NRF_process+0x224>)
 80016c0:	f000 fbce 	bl	8001e60 <NRF_TXPayload>

			NRF_CE_HIGH
 80016c4:	2201      	movs	r2, #1
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	485d      	ldr	r0, [pc, #372]	; (8001840 <NRF_process+0x228>)
 80016ca:	f001 fdd5 	bl	8003278 <HAL_GPIO_WritePin>
			NRF_State = NRF_TX_SETTING;
 80016ce:	4b58      	ldr	r3, [pc, #352]	; (8001830 <NRF_process+0x218>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	701a      	strb	r2, [r3, #0]
			NRF_CE_HIGH
			NRF_State = NRF_RX_SETTING;
		}
		else
			NRF_Faults = NRF_NO_MODE;
		break;
 80016d4:	e0a5      	b.n	8001822 <NRF_process+0x20a>
		else if(nrf_mode == 'r')
 80016d6:	4b58      	ldr	r3, [pc, #352]	; (8001838 <NRF_process+0x220>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b72      	cmp	r3, #114	; 0x72
 80016dc:	d108      	bne.n	80016f0 <NRF_process+0xd8>
			NRF_CE_HIGH
 80016de:	2201      	movs	r2, #1
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	4857      	ldr	r0, [pc, #348]	; (8001840 <NRF_process+0x228>)
 80016e4:	f001 fdc8 	bl	8003278 <HAL_GPIO_WritePin>
			NRF_State = NRF_RX_SETTING;
 80016e8:	4b51      	ldr	r3, [pc, #324]	; (8001830 <NRF_process+0x218>)
 80016ea:	2203      	movs	r2, #3
 80016ec:	701a      	strb	r2, [r3, #0]
		break;
 80016ee:	e098      	b.n	8001822 <NRF_process+0x20a>
			NRF_Faults = NRF_NO_MODE;
 80016f0:	4b4e      	ldr	r3, [pc, #312]	; (800182c <NRF_process+0x214>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
		break;
 80016f6:	e094      	b.n	8001822 <NRF_process+0x20a>

	case NRF_TX_SETTING:
		if(Clock_GetTick() - lastTick100us >= NRF_SETTING_TIME)
 80016f8:	f7ff fce0 	bl	80010bc <Clock_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <NRF_process+0x21c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2bc7      	cmp	r3, #199	; 0xc7
 8001706:	f240 8083 	bls.w	8001810 <NRF_process+0x1f8>
		{
			NRF_State = NRF_TX_MODE;
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <NRF_process+0x218>)
 800170c:	2205      	movs	r2, #5
 800170e:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 8001710:	f000 ff2e 	bl	8002570 <HAL_GetTick>
 8001714:	4603      	mov	r3, r0
 8001716:	4a4b      	ldr	r2, [pc, #300]	; (8001844 <NRF_process+0x22c>)
 8001718:	6013      	str	r3, [r2, #0]
		}
		break;
 800171a:	e079      	b.n	8001810 <NRF_process+0x1f8>

	case NRF_TX_MODE:;
		uint8_t fifo_status = NRF_ReadRegister(NRF24_FIFO_STATUS);
 800171c:	2017      	movs	r0, #23
 800171e:	f000 f8cd 	bl	80018bc <NRF_ReadRegister>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
		uint8_t status = NRF_ReadStatusRegister();
 8001726:	f000 f98f 	bl	8001a48 <NRF_ReadStatusRegister>
 800172a:	4603      	mov	r3, r0
 800172c:	73bb      	strb	r3, [r7, #14]

		if(status & (1 << NRF24_MAX_RT))
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <NRF_process+0x126>
			NRF_Faults = NRF_MAX_RETRANSMITS_FLAG;
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <NRF_process+0x214>)
 800173a:	2203      	movs	r2, #3
 800173c:	701a      	strb	r2, [r3, #0]

		if(status & (1 << NRF24_TX_FULL))
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <NRF_process+0x136>
			NRF_Faults = NRF_TX_FIFO_FULL;
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <NRF_process+0x214>)
 800174a:	2204      	movs	r2, #4
 800174c:	701a      	strb	r2, [r3, #0]

		if((HAL_GetTick() - last_tick >= 1000) && (status & (1 << NRF24_TX_DS)) && (fifo_status & (1 << NRF24_TX_EMPTY)))
 800174e:	f000 ff0f 	bl	8002570 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <NRF_process+0x22c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175e:	d359      	bcc.n	8001814 <NRF_process+0x1fc>
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	2b00      	cmp	r3, #0
 8001768:	d054      	beq.n	8001814 <NRF_process+0x1fc>
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d04f      	beq.n	8001814 <NRF_process+0x1fc>
		{
			printf("Correct transmission \r\n");
 8001774:	4834      	ldr	r0, [pc, #208]	; (8001848 <NRF_process+0x230>)
 8001776:	f004 fd11 	bl	800619c <puts>
			NRF_CE_LOW
 800177a:	2200      	movs	r2, #0
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	4830      	ldr	r0, [pc, #192]	; (8001840 <NRF_process+0x228>)
 8001780:	f001 fd7a 	bl	8003278 <HAL_GPIO_WritePin>
			NRF_State = NRF_STANBY1;
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <NRF_process+0x218>)
 8001786:	2202      	movs	r2, #2
 8001788:	701a      	strb	r2, [r3, #0]
		}
		break;
 800178a:	e043      	b.n	8001814 <NRF_process+0x1fc>

	case NRF_RX_SETTING:
		if(Clock_GetTick() - lastTick100us >= NRF_SETTING_TIME)
 800178c:	f7ff fc96 	bl	80010bc <Clock_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <NRF_process+0x21c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2bc7      	cmp	r3, #199	; 0xc7
 800179a:	d93d      	bls.n	8001818 <NRF_process+0x200>
			NRF_State = NRF_RX_MODE;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <NRF_process+0x218>)
 800179e:	2206      	movs	r2, #6
 80017a0:	701a      	strb	r2, [r3, #0]
		break;
 80017a2:	e039      	b.n	8001818 <NRF_process+0x200>

	case NRF_RX_MODE:
		if(NRF_DataAvailable())
 80017a4:	f000 fb85 	bl	8001eb2 <NRF_DataAvailable>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d036      	beq.n	800181c <NRF_process+0x204>
		{
			NRF_ReadRXPaylaod(rx_buffer);
 80017ae:	4827      	ldr	r0, [pc, #156]	; (800184c <NRF_process+0x234>)
 80017b0:	f000 fb63 	bl	8001e7a <NRF_ReadRXPaylaod>
			printf("Received message: %c \n", rx_buffer[0]);
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <NRF_process+0x234>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4825      	ldr	r0, [pc, #148]	; (8001850 <NRF_process+0x238>)
 80017bc:	f004 fc68 	bl	8006090 <iprintf>
		}
		break;
 80017c0:	e02c      	b.n	800181c <NRF_process+0x204>

	case NRF_IDLE:
			HAL_Delay(1000);
 80017c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c6:	f000 fedf 	bl	8002588 <HAL_Delay>
			switch(NRF_Faults)
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <NRF_process+0x214>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d825      	bhi.n	8001820 <NRF_process+0x208>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <NRF_process+0x1c4>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f5 	.word	0x080017f5
 80017e4:	080017fd 	.word	0x080017fd
 80017e8:	08001805 	.word	0x08001805
			{
				case NRF_NO_MODE:
					printf("NRF_NO_MODE \r\n");
 80017ec:	4819      	ldr	r0, [pc, #100]	; (8001854 <NRF_process+0x23c>)
 80017ee:	f004 fcd5 	bl	800619c <puts>
				break;
 80017f2:	e016      	b.n	8001822 <NRF_process+0x20a>

				case NRF_DIFFRENT_MESSAGE_SIZE:
					printf("NRF_DIFFRENT_MESSAGE_SIZE \r\n");
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <NRF_process+0x240>)
 80017f6:	f004 fcd1 	bl	800619c <puts>
					break;
 80017fa:	e012      	b.n	8001822 <NRF_process+0x20a>

				case NRF_MAX_RETRANSMITS_FLAG:
					printf("NRF_MAX_RETRANSMITS_FLAG \r\n");
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <NRF_process+0x244>)
 80017fe:	f004 fccd 	bl	800619c <puts>
					break;
 8001802:	e00e      	b.n	8001822 <NRF_process+0x20a>

				case NRF_TX_FIFO_FULL:
					printf("NRF_TX_FIFO_FULL \r\n");
 8001804:	4816      	ldr	r0, [pc, #88]	; (8001860 <NRF_process+0x248>)
 8001806:	f004 fcc9 	bl	800619c <puts>
					break;
 800180a:	e00a      	b.n	8001822 <NRF_process+0x20a>
		break;
 800180c:	bf00      	nop
 800180e:	e008      	b.n	8001822 <NRF_process+0x20a>
		break;
 8001810:	bf00      	nop
 8001812:	e006      	b.n	8001822 <NRF_process+0x20a>
		break;
 8001814:	bf00      	nop
 8001816:	e004      	b.n	8001822 <NRF_process+0x20a>
		break;
 8001818:	bf00      	nop
 800181a:	e002      	b.n	8001822 <NRF_process+0x20a>
		break;
 800181c:	bf00      	nop
 800181e:	e000      	b.n	8001822 <NRF_process+0x20a>

				default:
				break;
 8001820:	bf00      	nop
			}
	}
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200002e5 	.word	0x200002e5
 8001830:	200002e4 	.word	0x200002e4
 8001834:	200002f0 	.word	0x200002f0
 8001838:	200002f8 	.word	0x200002f8
 800183c:	200002e8 	.word	0x200002e8
 8001840:	40020400 	.word	0x40020400
 8001844:	200002f4 	.word	0x200002f4
 8001848:	0800837c 	.word	0x0800837c
 800184c:	200002ec 	.word	0x200002ec
 8001850:	08008394 	.word	0x08008394
 8001854:	080083ac 	.word	0x080083ac
 8001858:	080083bc 	.word	0x080083bc
 800185c:	080083d8 	.word	0x080083d8
 8001860:	080083f4 	.word	0x080083f4

08001864 <NRF_Read>:

static void NRF_Read(uint8_t *data, uint8_t length)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(NRF_spi, data, length, 1000);
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <NRF_Read+0x28>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	b29a      	uxth	r2, r3
 8001878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	f002 fb72 	bl	8003f66 <HAL_SPI_Receive>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002e0 	.word	0x200002e0

08001890 <NRF_Write>:

static void NRF_Write(uint8_t *data, uint8_t length)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(NRF_spi, data, length, 1000);
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <NRF_Write+0x28>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	f002 fa20 	bl	8003cee <HAL_SPI_Transmit>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002e0 	.word	0x200002e0

080018bc <NRF_ReadRegister>:

static uint8_t NRF_ReadRegister(uint8_t reg)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;

	reg = NRF24_CMD_R_REGISTER | reg;
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_LOW
 80018ca:	2200      	movs	r2, #0
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <NRF_ReadRegister+0x44>)
 80018d0:	f001 fcd2 	bl	8003278 <HAL_GPIO_WritePin>
	NRF_Write(&reg, 1);
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ffd9 	bl	8001890 <NRF_Write>
	NRF_Read(&reg_value, 1);
 80018de:	f107 030f 	add.w	r3, r7, #15
 80018e2:	2101      	movs	r1, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ffbd 	bl	8001864 <NRF_Read>
	NRF_CSN_HIGH
 80018ea:	2201      	movs	r2, #1
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4804      	ldr	r0, [pc, #16]	; (8001900 <NRF_ReadRegister+0x44>)
 80018f0:	f001 fcc2 	bl	8003278 <HAL_GPIO_WritePin>

	return reg_value;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020800 	.word	0x40020800

08001904 <NRF_ReadRegisters>:

static void NRF_ReadRegisters(uint8_t reg, uint8_t* data, uint8_t length)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_LOW
 8001918:	2200      	movs	r2, #0
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <NRF_ReadRegisters+0x44>)
 800191e:	f001 fcab 	bl	8003278 <HAL_GPIO_WritePin>
	NRF_Write(&reg, 1);
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	2101      	movs	r1, #1
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ffb2 	bl	8001890 <NRF_Write>
	NRF_Read(data, length);
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	4619      	mov	r1, r3
 8001930:	6838      	ldr	r0, [r7, #0]
 8001932:	f7ff ff97 	bl	8001864 <NRF_Read>
	NRF_CSN_HIGH
 8001936:	2201      	movs	r2, #1
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <NRF_ReadRegisters+0x44>)
 800193c:	f001 fc9c 	bl	8003278 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020800 	.word	0x40020800

0800194c <NRF_WriteRegister>:

static void NRF_WriteRegister(uint8_t reg, uint8_t data)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = NRF24_CMD_W_REGISTER | reg;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f043 0320 	orr.w	r3, r3, #32
 8001962:	b2db      	uxtb	r3, r3
 8001964:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	737b      	strb	r3, [r7, #13]

	NRF_CSN_LOW
 800196a:	2200      	movs	r2, #0
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	4809      	ldr	r0, [pc, #36]	; (8001994 <NRF_WriteRegister+0x48>)
 8001970:	f001 fc82 	bl	8003278 <HAL_GPIO_WritePin>
	NRF_Write(buffer, 2);
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff88 	bl	8001890 <NRF_Write>
	NRF_CSN_HIGH
 8001980:	2201      	movs	r2, #1
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <NRF_WriteRegister+0x48>)
 8001986:	f001 fc77 	bl	8003278 <HAL_GPIO_WritePin>
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40020800 	.word	0x40020800

08001998 <NRF_WriteRegisters>:

static void NRF_WriteRegisters(uint8_t reg, uint8_t* data, uint8_t length)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	71fb      	strb	r3, [r7, #7]

	NRF_CSN_LOW
 80019b2:	2200      	movs	r2, #0
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	480b      	ldr	r0, [pc, #44]	; (80019e4 <NRF_WriteRegisters+0x4c>)
 80019b8:	f001 fc5e 	bl	8003278 <HAL_GPIO_WritePin>
	NRF_Write(&reg, 1);
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff65 	bl	8001890 <NRF_Write>
	NRF_Write(data, length);
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	4619      	mov	r1, r3
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f7ff ff60 	bl	8001890 <NRF_Write>
	NRF_CSN_HIGH
 80019d0:	2201      	movs	r2, #1
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <NRF_WriteRegisters+0x4c>)
 80019d6:	f001 fc4f 	bl	8003278 <HAL_GPIO_WritePin>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40020800 	.word	0x40020800

080019e8 <NRF_SendCommand>:

static void NRF_SendCommand(uint8_t command)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_LOW
 80019f2:	2200      	movs	r2, #0
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	4808      	ldr	r0, [pc, #32]	; (8001a18 <NRF_SendCommand+0x30>)
 80019f8:	f001 fc3e 	bl	8003278 <HAL_GPIO_WritePin>
	NRF_Write(&command, 1);
 80019fc:	1dfb      	adds	r3, r7, #7
 80019fe:	2101      	movs	r1, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff45 	bl	8001890 <NRF_Write>
	NRF_CSN_HIGH
 8001a06:	2201      	movs	r2, #1
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <NRF_SendCommand+0x30>)
 8001a0c:	f001 fc34 	bl	8003278 <HAL_GPIO_WritePin>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40020800 	.word	0x40020800

08001a1c <NRF_ReadConfigRegister>:

static uint8_t NRF_ReadConfigRegister(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	return NRF_ReadRegister(NRF24_CONFIG);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff ff4b 	bl	80018bc <NRF_ReadRegister>
 8001a26:	4603      	mov	r3, r0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <NRF_WriteConfigRegister>:

static void NRF_WriteConfigRegister(uint8_t config)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
	NRF_WriteRegister(NRF24_CONFIG, config);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff ff86 	bl	800194c <NRF_WriteRegister>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <NRF_ReadStatusRegister>:

static uint8_t NRF_ReadStatusRegister(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	return (NRF_ReadRegister(NRF24_STATUS));
 8001a4c:	2007      	movs	r0, #7
 8001a4e:	f7ff ff35 	bl	80018bc <NRF_ReadRegister>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <NRF_WriteStatusRegister>:

static void NRF_WriteStatusRegister(uint8_t status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	NRF_WriteRegister(NRF24_STATUS, status);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4619      	mov	r1, r3
 8001a66:	2007      	movs	r0, #7
 8001a68:	f7ff ff70 	bl	800194c <NRF_WriteRegister>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <NRF_SetOutputPower>:

static void NRF_SetOutputPower(uint8_t output_power)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_RF_SETUP);
 8001a7e:	2006      	movs	r0, #6
 8001a80:	f7ff ff1c 	bl	80018bc <NRF_ReadRegister>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
	reg_value |= (output_power << 1);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_RF_SETUP, reg_value);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2006      	movs	r0, #6
 8001a9e:	f7ff ff55 	bl	800194c <NRF_WriteRegister>
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <NRF_SetDataRate>:

static void NRF_SetDataRate(uint8_t data_rate)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_RF_SETUP);
 8001ab4:	2006      	movs	r0, #6
 8001ab6:	f7ff ff01 	bl	80018bc <NRF_ReadRegister>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]

	if(data_rate == NRF24_RF_DR_250KBPS)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d104      	bne.n	8001ace <NRF_SetDataRate+0x24>
		reg_value |= (1 << NRF24_RF_DR_LOW);
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	f043 0320 	orr.w	r3, r3, #32
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e00f      	b.n	8001aee <NRF_SetDataRate+0x44>
	else if(data_rate == NRF24_RF_DR_2MBPS)
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d104      	bne.n	8001ade <NRF_SetDataRate+0x34>
		reg_value |= (1 << NRF24_RF_DR_HIGH);
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e007      	b.n	8001aee <NRF_SetDataRate+0x44>
	else //NRF24_RF_DR_1MBPS
	{
		reg_value &= ~(1 << NRF24_RF_DR_LOW);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	f023 0320 	bic.w	r3, r3, #32
 8001ae4:	73fb      	strb	r3, [r7, #15]
		reg_value &= ~(1 << NRF24_RF_DR_HIGH);
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	f023 0308 	bic.w	r3, r3, #8
 8001aec:	73fb      	strb	r3, [r7, #15]
	}

	NRF_WriteRegister(NRF24_RF_SETUP, reg_value);
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	4619      	mov	r1, r3
 8001af2:	2006      	movs	r0, #6
 8001af4:	f7ff ff2a 	bl	800194c <NRF_WriteRegister>
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <NRF_SetCRC>:

static void NRF_SetCRC(uint8_t crc_en, uint8_t crc_length)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = NRF_ReadRegister(NRF24_CONFIG);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fed3 	bl	80018bc <NRF_ReadRegister>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]

	if(crc_en == NRF24_EN_CRC)
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d110      	bne.n	8001b42 <NRF_SetCRC+0x42>
	{
		reg_value |= (1 << NRF24_EN_CRC);
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	73fb      	strb	r3, [r7, #15]
		if(crc_length == NRF24_CRC_WIDTH_2B)
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d104      	bne.n	8001b38 <NRF_SetCRC+0x38>
			reg_value |= (1 << NRF24_CRCO);
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e008      	b.n	8001b4a <NRF_SetCRC+0x4a>
		else
			reg_value &= ~(1 << NRF24_CRCO);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	f023 0304 	bic.w	r3, r3, #4
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e003      	b.n	8001b4a <NRF_SetCRC+0x4a>
	}
	else
	{
		reg_value &= ~(1 << NRF24_EN_CRC);
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	f023 0308 	bic.w	r3, r3, #8
 8001b48:	73fb      	strb	r3, [r7, #15]
	}
	NRF_WriteRegister(NRF24_CONFIG, reg_value);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fefc 	bl	800194c <NRF_WriteRegister>
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <NRF_SetRetransmission>:

static void NRF_SetRetransmission(uint8_t retransmission_delay, uint8_t retranmission_repeat)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	460a      	mov	r2, r1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]

	reg_value = (retransmission_delay << 4) ;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	73fb      	strb	r3, [r7, #15]
	reg_value |= retranmission_repeat;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	73fb      	strb	r3, [r7, #15]

	NRF_WriteRegister(NRF24_SETUP_RETR, reg_value);
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	4619      	mov	r1, r3
 8001b82:	2004      	movs	r0, #4
 8001b84:	f7ff fee2 	bl	800194c <NRF_WriteRegister>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <NRF_SetDataPipe>:

static void NRF_SetDataPipe(uint8_t pipe_number)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
	reg_value |= (1 << pipe_number);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	b25a      	sxtb	r2, r3
 8001ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_EN_RXADDR, reg_value);
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f7ff fec8 	bl	800194c <NRF_WriteRegister>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <NRF_EnableAutoACK>:

static void NRF_EnableAutoACK(uint8_t pipe_number, uint8_t enable)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_value = NRF_ReadRegister(NRF24_EN_AA);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff fe71 	bl	80018bc <NRF_ReadRegister>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
	if(enable)
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00a      	beq.n	8001bfa <NRF_EnableAutoACK+0x36>
		reg_value |= (1 << pipe_number);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2201      	movs	r2, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e00b      	b.n	8001c12 <NRF_EnableAutoACK+0x4e>
	else
		reg_value &= ~(1 << pipe_number);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	b25a      	sxtb	r2, r3
 8001c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	73fb      	strb	r3, [r7, #15]

	NRF_WriteRegister(NRF24_EN_AA, reg_value);
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4619      	mov	r1, r3
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff fe98 	bl	800194c <NRF_WriteRegister>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <NRF_SetPayloadSize>:

static void NRF_SetPayloadSize(uint8_t pipe_number, uint8_t size)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71bb      	strb	r3, [r7, #6]
	NRF_WriteRegister((NRF24_RX_PW_P0 + pipe_number), size);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	3311      	adds	r3, #17
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	79ba      	ldrb	r2, [r7, #6]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe84 	bl	800194c <NRF_WriteRegister>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <NRF_SetChannel>:

static void NRF_SetChannel(uint8_t channel)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	NRF_WriteRegister(NRF24_RF_CH, channel);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f7ff fe76 	bl	800194c <NRF_WriteRegister>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <NRF_SetAddressWidth>:

static void NRF_SetAddressWidth(uint8_t address_width)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_SETUP_AW);
 8001c72:	2003      	movs	r0, #3
 8001c74:	f7ff fe22 	bl	80018bc <NRF_ReadRegister>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]

	reg_value |= address_width;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_SETUP_AW, (reg_value - 2));
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	3b02      	subs	r3, #2
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f7ff fe5d 	bl	800194c <NRF_WriteRegister>
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <NRF_PowerUp>:

static void NRF_PowerUp(uint8_t power_up)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = NRF_ReadRegister(NRF24_CONFIG);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fe09 	bl	80018bc <NRF_ReadRegister>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73fb      	strb	r3, [r7, #15]
	reg_value |= (power_up << NRF24_PWR_UP);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	b25a      	sxtb	r2, r3
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	73fb      	strb	r3, [r7, #15]
	NRF_WriteRegister(NRF24_CONFIG, reg_value);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff fe42 	bl	800194c <NRF_WriteRegister>
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <NRF_SetRXAddress>:

static void NRF_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
	if((pipe == 0) || (pipe == 1))
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <NRF_SetRXAddress+0x18>
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11d      	bne.n	8001d24 <NRF_SetRXAddress+0x54>
	{
		uint8_t address_rev[NRF24_ADD_WIDTH];
		for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e00d      	b.n	8001d0a <NRF_SetRXAddress+0x3a>
			address_rev[NRF24_ADD_WIDTH - 1 - i] = address[i];
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	441a      	add	r2, r3
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	f1c3 0302 	rsb	r3, r3, #2
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	443b      	add	r3, r7
 8001d00:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	3301      	adds	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d9ee      	bls.n	8001cee <NRF_SetRXAddress+0x1e>
		NRF_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADD_WIDTH);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	330a      	adds	r3, #10
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f107 010c 	add.w	r1, r7, #12
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fe3b 	bl	8001998 <NRF_WriteRegisters>
	{
 8001d22:	e00a      	b.n	8001d3a <NRF_SetRXAddress+0x6a>
	}
	else
		NRF_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADD_WIDTH-1]);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	330a      	adds	r3, #10
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7ff fe0a 	bl	800194c <NRF_WriteRegister>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <NRF_SetTXAddress>:

static void NRF_SetTXAddress(uint8_t* address)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	uint8_t address_rev[NRF24_ADD_WIDTH];

	NRF_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADD_WIDTH);
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	2203      	movs	r2, #3
 8001d52:	4619      	mov	r1, r3
 8001d54:	200a      	movs	r0, #10
 8001d56:	f7ff fdd5 	bl	8001904 <NRF_ReadRegisters>

	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e00c      	b.n	8001d7a <NRF_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADD_WIDTH - 1 - i] = address_rev[i];
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f1c3 0302 	rsb	r3, r3, #2
 8001d68:	3210      	adds	r2, #16
 8001d6a:	443a      	add	r2, r7
 8001d6c:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <NRF_SetTXAddress+0x88>)
 8001d72:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d9ef      	bls.n	8001d60 <NRF_SetTXAddress+0x1c>

	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	73bb      	strb	r3, [r7, #14]
 8001d84:	e00d      	b.n	8001da2 <NRF_SetTXAddress+0x5e>
		address_rev[NRF24_ADD_WIDTH - 1 - i] = address[i];
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	441a      	add	r2, r3
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	f1c3 0302 	rsb	r3, r3, #2
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	3310      	adds	r3, #16
 8001d96:	443b      	add	r3, r7
 8001d98:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i = 0; i<NRF24_ADD_WIDTH; i++)
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	73bb      	strb	r3, [r7, #14]
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d9ee      	bls.n	8001d86 <NRF_SetTXAddress+0x42>

	NRF_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADD_WIDTH);
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	2203      	movs	r2, #3
 8001dae:	4619      	mov	r1, r3
 8001db0:	200a      	movs	r0, #10
 8001db2:	f7ff fdf1 	bl	8001998 <NRF_WriteRegisters>
	NRF_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADD_WIDTH);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	f7ff fdea 	bl	8001998 <NRF_WriteRegisters>
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200002fc 	.word	0x200002fc

08001dd0 <NRF_RX_Mode>:

static void NRF_RX_Mode(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
	uint8_t config = NRF_ReadConfigRegister();
 8001dd6:	f7ff fe21 	bl	8001a1c <NRF_ReadConfigRegister>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	NRF_SetRXAddress(0, addr_p0_backup);
 8001dde:	490b      	ldr	r1, [pc, #44]	; (8001e0c <NRF_RX_Mode+0x3c>)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ff75 	bl	8001cd0 <NRF_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]

	NRF_WriteConfigRegister(config);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe1b 	bl	8001a2c <NRF_WriteConfigRegister>

	NRF_WriteStatusRegister((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001df6:	2070      	movs	r0, #112	; 0x70
 8001df8:	f7ff fe2e 	bl	8001a58 <NRF_WriteStatusRegister>

	NRF_FlushRX();
 8001dfc:	f000 f822 	bl	8001e44 <NRF_FlushRX>
	NRF_FlushTX();
 8001e00:	f000 f827 	bl	8001e52 <NRF_FlushTX>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200002fc 	.word	0x200002fc

08001e10 <NRF_TX_Mode>:

static void NRF_TX_Mode(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	uint8_t config = NRF_ReadConfigRegister();
 8001e16:	f7ff fe01 	bl	8001a1c <NRF_ReadConfigRegister>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	config &= ~(1<<NRF24_PRIM_RX);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
	NRF_WriteConfigRegister(config);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fdff 	bl	8001a2c <NRF_WriteConfigRegister>

	NRF_WriteStatusRegister((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001e2e:	2070      	movs	r0, #112	; 0x70
 8001e30:	f7ff fe12 	bl	8001a58 <NRF_WriteStatusRegister>

	NRF_FlushRX();
 8001e34:	f000 f806 	bl	8001e44 <NRF_FlushRX>
	NRF_FlushTX();
 8001e38:	f000 f80b 	bl	8001e52 <NRF_FlushTX>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <NRF_FlushRX>:

static void NRF_FlushRX(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	NRF_SendCommand(NRF24_CMD_FLUSH_RX);
 8001e48:	20e2      	movs	r0, #226	; 0xe2
 8001e4a:	f7ff fdcd 	bl	80019e8 <NRF_SendCommand>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <NRF_FlushTX>:

static void NRF_FlushTX(void)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	af00      	add	r7, sp, #0
	NRF_SendCommand(NRF24_CMD_FLUSH_TX);
 8001e56:	20e1      	movs	r0, #225	; 0xe1
 8001e58:	f7ff fdc6 	bl	80019e8 <NRF_SendCommand>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <NRF_TXPayload>:

static void NRF_TXPayload(uint8_t *data)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	NRF_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001e68:	2202      	movs	r2, #2
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	20a0      	movs	r0, #160	; 0xa0
 8001e6e:	f7ff fd93 	bl	8001998 <NRF_WriteRegisters>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <NRF_ReadRXPaylaod>:

static void NRF_ReadRXPaylaod(uint8_t *data)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	NRF_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001e82:	2202      	movs	r2, #2
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	2061      	movs	r0, #97	; 0x61
 8001e88:	f7ff fd3c 	bl	8001904 <NRF_ReadRegisters>
	NRF_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2007      	movs	r0, #7
 8001e90:	f7ff fd5c 	bl	800194c <NRF_WriteRegister>
	if(NRF_ReadStatusRegister() & (1<<NRF24_TX_DS))
 8001e94:	f7ff fdd8 	bl	8001a48 <NRF_ReadStatusRegister>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <NRF_ReadRXPaylaod+0x30>
		NRF_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8001ea2:	2120      	movs	r1, #32
 8001ea4:	2007      	movs	r0, #7
 8001ea6:	f7ff fd51 	bl	800194c <NRF_WriteRegister>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <NRF_DataAvailable>:

static uint8_t NRF_DataAvailable(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
	uint8_t status = NRF_ReadStatusRegister();
 8001eb8:	f7ff fdc6 	bl	8001a48 <NRF_ReadStatusRegister>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
	if ((status & (1 << 6)))
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <NRF_DataAvailable+0x2c>
	{
		status |= (1<<6);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed0:	71fb      	strb	r3, [r7, #7]
		NRF_WriteStatusRegister(status);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fdbf 	bl	8001a58 <NRF_WriteStatusRegister>
		return 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <NRF_DataAvailable+0x2e>
	}
	return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <NRF_BufferCopy>:

static void NRF_BufferCopy(uint8_t* buffer)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NRF24_PAYLOAD_SIZE; i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e009      	b.n	8001f0a <NRF_BufferCopy+0x22>
		tx_buffer[i] = buffer[i];
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	441a      	add	r2, r3
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	7811      	ldrb	r1, [r2, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <NRF_BufferCopy+0x38>)
 8001f02:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NRF24_PAYLOAD_SIZE; i++)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d9f2      	bls.n	8001ef6 <NRF_BufferCopy+0xe>
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200002e8 	.word	0x200002e8

08001f24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <MX_SPI1_Init+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f58:	2220      	movs	r2, #32
 8001f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f70:	220a      	movs	r2, #10
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_SPI1_Init+0x64>)
 8001f76:	f001 fe31 	bl	8003bdc <HAL_SPI_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f80:	f7ff fae2 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000300 	.word	0x20000300
 8001f8c:	40013000 	.word	0x40013000

08001f90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_SPI_MspInit+0x84>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12b      	bne.n	800200a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_SPI_MspInit+0x88>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <HAL_SPI_MspInit+0x88>)
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_SPI_MspInit+0x88>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_SPI_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_SPI_MspInit+0x88>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_SPI_MspInit+0x88>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fea:	23e0      	movs	r3, #224	; 0xe0
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <HAL_SPI_MspInit+0x8c>)
 8002006:	f000 ffb3 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	; 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40013000 	.word	0x40013000
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000

08002020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_MspInit+0x4c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_MspInit+0x4c>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_MspInit+0x4c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800205e:	2007      	movs	r0, #7
 8002060:	f000 ff44 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler+0x4>

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 fa44 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020ca:	f002 fbe1 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000035c 	.word	0x2000035c

080020d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_kill>:

int _kill(int pid, int sig)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020f2:	f003 fb23 	bl	800573c <__errno>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2216      	movs	r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
	return -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_exit>:

void _exit (int status)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffe7 	bl	80020e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800211a:	e7fe      	b.n	800211a <_exit+0x12>

0800211c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e00a      	b.n	8002144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800212e:	f3af 8000 	nop.w
 8002132:	4601      	mov	r1, r0
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	dbf0      	blt.n	800212e <_read+0x12>
	}

return len;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e009      	b.n	800217c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8eb 	bl	800134c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf1      	blt.n	8002168 <_write+0x12>
	}
	return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_close>:

int _close(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b6:	605a      	str	r2, [r3, #4]
	return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_isatty>:

int _isatty(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f003 fa88 	bl	800573c <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20020000 	.word	0x20020000
 8002258:	00000400 	.word	0x00000400
 800225c:	20000358 	.word	0x20000358
 8002260:	20000400 	.word	0x20000400

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	463b      	mov	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <MX_TIM1_Init+0x98>)
 80022a6:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <MX_TIM1_Init+0x9c>)
 80022a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <MX_TIM1_Init+0x98>)
 80022ac:	f240 3247 	movw	r2, #839	; 0x347
 80022b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <MX_TIM1_Init+0x98>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_TIM1_Init+0x98>)
 80022ba:	2209      	movs	r2, #9
 80022bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <MX_TIM1_Init+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <MX_TIM1_Init+0x98>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <MX_TIM1_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <MX_TIM1_Init+0x98>)
 80022d2:	f002 fa2b 	bl	800472c <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022dc:	f7ff f934 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	4619      	mov	r1, r3
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <MX_TIM1_Init+0x98>)
 80022ee:	f002 fbd7 	bl	8004aa0 <HAL_TIM_ConfigClockSource>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022f8:	f7ff f926 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_TIM1_Init+0x98>)
 800230a:	f002 fdd3 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002314:	f7ff f918 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000035c 	.word	0x2000035c
 8002324:	40010000 	.word	0x40010000

08002328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <HAL_TIM_Base_MspInit+0x3c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10d      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_TIM_Base_MspInit+0x40>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_TIM_Base_MspInit+0x40>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_TIM_Base_MspInit+0x40>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40010000 	.word	0x40010000
 8002368:	40023800 	.word	0x40023800

0800236c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <MX_USART2_UART_Init+0x50>)
 8002374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_USART2_UART_Init+0x4c>)
 80023a4:	f002 fe08 	bl	8004fb8 <HAL_UART_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ae:	f7ff f8cb 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200003a4 	.word	0x200003a4
 80023bc:	40004400 	.word	0x40004400

080023c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_UART_MspInit+0x84>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d12b      	bne.n	800243a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_UART_MspInit+0x88>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_UART_MspInit+0x88>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_UART_MspInit+0x88>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_UART_MspInit+0x88>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a10      	ldr	r2, [pc, #64]	; (8002448 <HAL_UART_MspInit+0x88>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_UART_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800241a:	230c      	movs	r3, #12
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242a:	2307      	movs	r3, #7
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <HAL_UART_MspInit+0x8c>)
 8002436:	f000 fd9b 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004400 	.word	0x40004400
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002456:	490e      	ldr	r1, [pc, #56]	; (8002490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800245c:	e002      	b.n	8002464 <LoopCopyDataInit>

0800245e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002462:	3304      	adds	r3, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002468:	d3f9      	bcc.n	800245e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800246c:	4c0b      	ldr	r4, [pc, #44]	; (800249c <LoopFillZerobss+0x26>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002470:	e001      	b.n	8002476 <LoopFillZerobss>

08002472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002474:	3204      	adds	r2, #4

08002476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002478:	d3fb      	bcc.n	8002472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247a:	f7ff fef3 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f003 f963 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7fe ff83 	bl	800138c <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002494:	0800880c 	.word	0x0800880c
  ldr r2, =_sbss
 8002498:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800249c:	200003fc 	.word	0x200003fc

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 fd0d 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fda2 	bl	8002020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fd25 	bl	8002f56 <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 fced 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	20000008 	.word	0x20000008
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008
 800256c:	200003e8 	.word	0x200003e8

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200003e8 	.word	0x200003e8

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008

080025d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e033      	b.n	800264e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fcd2 	bl	8000f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002616:	f023 0302 	bic.w	r3, r3, #2
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa96 	bl	8002b54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
 800263e:	e001      	b.n	8002644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Start+0x1a>
 800266e:	2302      	movs	r3, #2
 8002670:	e097      	b.n	80027a2 <HAL_ADC_Start+0x14a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d018      	beq.n	80026ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_ADC_Start+0x158>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a45      	ldr	r2, [pc, #276]	; (80027b4 <HAL_ADC_Start+0x15c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9a      	lsrs	r2, r3, #18
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d15f      	bne.n	8002788 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002706:	d106      	bne.n	8002716 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f023 0206 	bic.w	r2, r3, #6
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
 8002714:	e002      	b.n	800271c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_ADC_Start+0x160>)
 8002726:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002730:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d129      	bne.n	80027a0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	e020      	b.n	80027a0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_ADC_Start+0x164>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d11b      	bne.n	80027a0 <HAL_ADC_Start+0x148>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d114      	bne.n	80027a0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	e00b      	b.n	80027a0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0210 	orr.w	r2, r3, #16
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	40012300 	.word	0x40012300
 80027bc:	40012000 	.word	0x40012000

080027c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	d113      	bne.n	8002806 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ec:	d10b      	bne.n	8002806 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f043 0220 	orr.w	r2, r3, #32
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e063      	b.n	80028ce <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002806:	f7ff feb3 	bl	8002570 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800280c:	e021      	b.n	8002852 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d01d      	beq.n	8002852 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_ADC_PollForConversion+0x6c>
 800281c:	f7ff fea8 	bl	8002570 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d212      	bcs.n	8002852 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d00b      	beq.n	8002852 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0204 	orr.w	r2, r3, #4
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e03d      	b.n	80028ce <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d1d6      	bne.n	800280e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0212 	mvn.w	r2, #18
 8002868:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d123      	bne.n	80028cc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11f      	bne.n	80028cc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x1c>
 8002908:	2302      	movs	r3, #2
 800290a:	e113      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x244>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b09      	cmp	r3, #9
 800291a:	d925      	bls.n	8002968 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68d9      	ldr	r1, [r3, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	3b1e      	subs	r3, #30
 8002932:	2207      	movs	r2, #7
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43da      	mvns	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	400a      	ands	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68d9      	ldr	r1, [r3, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	4618      	mov	r0, r3
 8002954:	4603      	mov	r3, r0
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4403      	add	r3, r0
 800295a:	3b1e      	subs	r3, #30
 800295c:	409a      	lsls	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	e022      	b.n	80029ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	2207      	movs	r2, #7
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	400a      	ands	r2, r1
 800298a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6919      	ldr	r1, [r3, #16]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4403      	add	r3, r0
 80029a4:	409a      	lsls	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d824      	bhi.n	8002a00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b05      	subs	r3, #5
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	3b05      	subs	r3, #5
 80029f2:	fa00 f203 	lsl.w	r2, r0, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34
 80029fe:	e04c      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d824      	bhi.n	8002a52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	3b23      	subs	r3, #35	; 0x23
 8002a1a:	221f      	movs	r2, #31
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43da      	mvns	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	400a      	ands	r2, r1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b23      	subs	r3, #35	; 0x23
 8002a44:	fa00 f203 	lsl.w	r2, r0, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a50:	e023      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b41      	subs	r3, #65	; 0x41
 8002a64:	221f      	movs	r2, #31
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	400a      	ands	r2, r1
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b41      	subs	r3, #65	; 0x41
 8002a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_ADC_ConfigChannel+0x250>)
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_ADC_ConfigChannel+0x254>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1d8>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b12      	cmp	r3, #18
 8002aae:	d10b      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <HAL_ADC_ConfigChannel+0x254>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12b      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x23a>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_ADC_ConfigChannel+0x258>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <HAL_ADC_ConfigChannel+0x1f4>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b11      	cmp	r3, #17
 8002ae2:	d122      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x258>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d111      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_ADC_ConfigChannel+0x25c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_ADC_ConfigChannel+0x260>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	0c9a      	lsrs	r2, r3, #18
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40012300 	.word	0x40012300
 8002b44:	40012000 	.word	0x40012000
 8002b48:	10000012 	.word	0x10000012
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b5c:	4b79      	ldr	r3, [pc, #484]	; (8002d44 <ADC_Init+0x1f0>)
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	021a      	lsls	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6899      	ldr	r1, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	4a58      	ldr	r2, [pc, #352]	; (8002d48 <ADC_Init+0x1f4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e00f      	b.n	8002c52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0202 	bic.w	r2, r2, #2
 8002c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e1b      	ldrb	r3, [r3, #24]
 8002c6c:	005a      	lsls	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01b      	beq.n	8002cb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	3b01      	subs	r3, #1
 8002cac:	035a      	lsls	r2, r3, #13
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e007      	b.n	8002cc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	051a      	lsls	r2, r3, #20
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d0a:	025a      	lsls	r2, r3, #9
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	029a      	lsls	r2, r3, #10
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40012300 	.word	0x40012300
 8002d48:	0f000001 	.word	0x0f000001

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff3e 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff8e 	bl	8002e40 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5d 	bl	8002dec <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff31 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffa2 	bl	8002ea8 <SysTick_Config>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e159      	b.n	8003240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 8148 	bne.w	800323a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d005      	beq.n	8002fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d130      	bne.n	8003024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a2 	beq.w	800323a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b57      	ldr	r3, [pc, #348]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003112:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_GPIO_Init+0x2ec>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d019      	beq.n	8003172 <HAL_GPIO_Init+0x202>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a48      	ldr	r2, [pc, #288]	; (8003264 <HAL_GPIO_Init+0x2f4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_GPIO_Init+0x1fe>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_GPIO_Init+0x2f8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_GPIO_Init+0x1fa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_GPIO_Init+0x2fc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x1f6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a45      	ldr	r2, [pc, #276]	; (8003270 <HAL_GPIO_Init+0x300>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x1f2>
 800315e:	2304      	movs	r3, #4
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003162:	2307      	movs	r3, #7
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x204>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x204>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003172:	2300      	movs	r3, #0
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003184:	4935      	ldr	r1, [pc, #212]	; (800325c <HAL_GPIO_Init+0x2ec>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_GPIO_Init+0x304>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320a:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_GPIO_Init+0x304>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f aea2 	bls.w	8002f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40013800 	.word	0x40013800
 8003260:	40020000 	.word	0x40020000
 8003264:	40020400 	.word	0x40020400
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	40021000 	.word	0x40021000
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003294:	e003      	b.n	800329e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	041a      	lsls	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	619a      	str	r2, [r3, #24]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e267      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d075      	beq.n	80033b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b85      	ldr	r3, [pc, #532]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b82      	ldr	r3, [pc, #520]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x108>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e242      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x74>
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x98>
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6c      	ldr	r2, [pc, #432]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003344:	4b69      	ldr	r3, [pc, #420]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a68      	ldr	r2, [pc, #416]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b66      	ldr	r3, [pc, #408]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff f904 	bl	8002570 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7ff f900 	bl	8002570 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e207      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xc0>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff f8f0 	bl	8002570 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7ff f8ec 	bl	8002570 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e1f3      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0xe8>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d063      	beq.n	800348a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b44      	ldr	r3, [pc, #272]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1c7      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4937      	ldr	r1, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e03a      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_RCC_OscConfig+0x244>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7ff f8a5 	bl	8002570 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342a:	f7ff f8a1 	bl	8002570 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1a8      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4925      	ldr	r1, [pc, #148]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x244>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7ff f884 	bl	8002570 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346c:	f7ff f880 	bl	8002570 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e187      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7ff f864 	bl	8002570 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7ff f860 	bl	8002570 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e167      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x200>
 80034ca:	e01b      	b.n	8003504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d2:	f7ff f84d 	bl	8002570 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	e00e      	b.n	80034f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034da:	f7ff f849 	bl	8002570 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d907      	bls.n	80034f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e150      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470000 	.word	0x42470000
 80034f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ea      	bne.n	80034da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8097 	beq.w	8003640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b7d      	ldr	r3, [pc, #500]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a7c      	ldr	r2, [pc, #496]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b7a      	ldr	r3, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b77      	ldr	r3, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b74      	ldr	r3, [pc, #464]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a73      	ldr	r2, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7ff f809 	bl	8002570 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7ff f805 	bl	8002570 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e10c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x2ea>
 8003588:	4b64      	ldr	r3, [pc, #400]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a63      	ldr	r2, [pc, #396]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x30c>
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5e      	ldr	r2, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	4b5c      	ldr	r3, [pc, #368]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a5b      	ldr	r2, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	4b55      	ldr	r3, [pc, #340]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe ffca 	bl	8002570 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe ffc6 	bl	8002570 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0cb      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x334>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe ffb4 	bl	8002570 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe ffb0 	bl	8002570 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0b5      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4a38      	ldr	r2, [pc, #224]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a1 	beq.w	800378c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d05c      	beq.n	8003710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d141      	bne.n	80036e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe ff84 	bl	8002570 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe ff80 	bl	8002570 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e087      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	019b      	lsls	r3, r3, #6
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	491b      	ldr	r1, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe ff59 	bl	8002570 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fe ff55 	bl	8002570 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e05c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x416>
 80036e0:	e054      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe ff42 	bl	8002570 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe ff3e 	bl	8002570 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e045      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x444>
 800370e:	e03d      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e038      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000
 8003724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x4ec>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d028      	beq.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d121      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003760:	4293      	cmp	r3, r2
 8003762:	d111      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cc      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b68      	ldr	r3, [pc, #416]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d90c      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d044      	beq.n	80038bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d119      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e067      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4934      	ldr	r1, [pc, #208]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fe fe70 	bl	8002570 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe fe6c 	bl	8002570 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d20c      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fdd0 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00
 8003958:	40023800 	.word	0x40023800
 800395c:	08008408 	.word	0x08008408
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b094      	sub	sp, #80	; 0x50
 800396e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
 8003974:	2300      	movs	r3, #0
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	2300      	movs	r3, #0
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003980:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d00d      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 800398c:	2b08      	cmp	r3, #8
 800398e:	f200 80e1 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800399a:	e0db      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039a0:	e0db      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b73      	ldr	r3, [pc, #460]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a6:	e0d8      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b2:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d063      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039be:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	2200      	movs	r2, #0
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
 80039d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ec:	0150      	lsls	r0, r2, #5
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4621      	mov	r1, r4
 80039f4:	1a51      	subs	r1, r2, r1
 80039f6:	6139      	str	r1, [r7, #16]
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb63 0301 	sbc.w	r3, r3, r1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	018b      	lsls	r3, r1, #6
 8003a10:	4651      	mov	r1, sl
 8003a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a16:	4651      	mov	r1, sl
 8003a18:	018a      	lsls	r2, r1, #6
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a20:	4659      	mov	r1, fp
 8003a22:	eb63 0901 	sbc.w	r9, r3, r1
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	4623      	mov	r3, r4
 8003a40:	eb18 0303 	adds.w	r3, r8, r3
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	462b      	mov	r3, r5
 8003a48:	eb49 0303 	adc.w	r3, r9, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	024b      	lsls	r3, r1, #9
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a64:	4621      	mov	r1, r4
 8003a66:	024a      	lsls	r2, r1, #9
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a78:	f7fd f89e 	bl	8000bb8 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4611      	mov	r1, r2
 8003a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0159      	lsls	r1, r3, #5
 8003aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab2:	0150      	lsls	r0, r2, #5
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4641      	mov	r1, r8
 8003aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003abe:	4649      	mov	r1, r9
 8003ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8003adc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	00eb      	lsls	r3, r5, #3
 8003aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aee:	00e2      	lsls	r2, r4, #3
 8003af0:	4614      	mov	r4, r2
 8003af2:	461d      	mov	r5, r3
 8003af4:	4643      	mov	r3, r8
 8003af6:	18e3      	adds	r3, r4, r3
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	464b      	mov	r3, r9
 8003afc:	eb45 0303 	adc.w	r3, r5, r3
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	028b      	lsls	r3, r1, #10
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b18:	4621      	mov	r1, r4
 8003b1a:	028a      	lsls	r2, r1, #10
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	61fa      	str	r2, [r7, #28]
 8003b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2c:	f7fd f844 	bl	8000bb8 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3750      	adds	r7, #80	; 0x50
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400
 8003b70:	007a1200 	.word	0x007a1200

08003b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000000 	.word	0x20000000

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08008418 	.word	0x08008418

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffdc 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08008418 	.word	0x08008418

08003bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07b      	b.n	8003ce6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d108      	bne.n	8003c08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfe:	d009      	beq.n	8003c14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	61da      	str	r2, [r3, #28]
 8003c06:	e005      	b.n	8003c14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fe f9ae 	bl	8001f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	ea42 0103 	orr.w	r1, r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	f003 0104 	and.w	r1, r3, #4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f003 0210 	and.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b088      	sub	sp, #32
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_SPI_Transmit+0x22>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e126      	b.n	8003f5e <HAL_SPI_Transmit+0x270>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d18:	f7fe fc2a 	bl	8002570 <HAL_GetTick>
 8003d1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d002      	beq.n	8003d34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d32:	e10b      	b.n	8003f4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Transmit+0x52>
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d44:	e102      	b.n	8003f4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	d10f      	bne.n	8003dae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d007      	beq.n	8003dcc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d14b      	bne.n	8003e6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0xf6>
 8003dde:	8afb      	ldrh	r3, [r7, #22]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d13e      	bne.n	8003e62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	1c9a      	adds	r2, r3, #2
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e08:	e02b      	b.n	8003e62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d112      	bne.n	8003e3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e3c:	e011      	b.n	8003e62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3e:	f7fe fb97 	bl	8002570 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d803      	bhi.n	8003e56 <HAL_SPI_Transmit+0x168>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d102      	bne.n	8003e5c <HAL_SPI_Transmit+0x16e>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e60:	e074      	b.n	8003f4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ce      	bne.n	8003e0a <HAL_SPI_Transmit+0x11c>
 8003e6c:	e04c      	b.n	8003f08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Transmit+0x18e>
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d140      	bne.n	8003efe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	7812      	ldrb	r2, [r2, #0]
 8003e88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ea2:	e02c      	b.n	8003efe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d113      	bne.n	8003eda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ed8:	e011      	b.n	8003efe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eda:	f7fe fb49 	bl	8002570 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d803      	bhi.n	8003ef2 <HAL_SPI_Transmit+0x204>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d102      	bne.n	8003ef8 <HAL_SPI_Transmit+0x20a>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003efc:	e026      	b.n	8003f4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1cd      	bne.n	8003ea4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fbcb 	bl	80046a8 <SPI_EndRxTxTransaction>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e000      	b.n	8003f4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d112      	bne.n	8003faa <HAL_SPI_Receive+0x44>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10e      	bne.n	8003faa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f8f1 	bl	8004188 <HAL_SPI_TransmitReceive>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	e0ea      	b.n	8004180 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SPI_Receive+0x52>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0e3      	b.n	8004180 <HAL_SPI_Receive+0x21a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc0:	f7fe fad6 	bl	8002570 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fd6:	e0ca      	b.n	800416e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Receive+0x7e>
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fe8:	e0c1      	b.n	800416e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2204      	movs	r2, #4
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004030:	d10f      	bne.n	8004052 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d007      	beq.n	8004070 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d162      	bne.n	800413e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004078:	e02e      	b.n	80040d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d115      	bne.n	80040b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f103 020c 	add.w	r2, r3, #12
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	7812      	ldrb	r2, [r2, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040b2:	e011      	b.n	80040d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b4:	f7fe fa5c 	bl	8002570 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d803      	bhi.n	80040cc <HAL_SPI_Receive+0x166>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d102      	bne.n	80040d2 <HAL_SPI_Receive+0x16c>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040d6:	e04a      	b.n	800416e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1cb      	bne.n	800407a <HAL_SPI_Receive+0x114>
 80040e2:	e031      	b.n	8004148 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	b292      	uxth	r2, r2
 80040fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004118:	e011      	b.n	800413e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411a:	f7fe fa29 	bl	8002570 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d803      	bhi.n	8004132 <HAL_SPI_Receive+0x1cc>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d102      	bne.n	8004138 <HAL_SPI_Receive+0x1d2>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800413c:	e017      	b.n	800416e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1cd      	bne.n	80040e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	6839      	ldr	r1, [r7, #0]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fa45 	bl	80045dc <SPI_EndRxTransaction>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
 800416a:	e000      	b.n	800416e <HAL_SPI_Receive+0x208>
  }

error :
 800416c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004196:	2301      	movs	r3, #1
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x26>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e18a      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x33c>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b6:	f7fe f9db 	bl	8002570 <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d00f      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x70>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d107      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x68>
 80041e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d003      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041f6:	e15b      	b.n	80044b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_SPI_TransmitReceive+0x82>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_SPI_TransmitReceive+0x82>
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004210:	e14e      	b.n	80044b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2205      	movs	r2, #5
 8004222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	887a      	ldrh	r2, [r7, #2]
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	887a      	ldrh	r2, [r7, #2]
 800423c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d007      	beq.n	800427a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004282:	d178      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SPI_TransmitReceive+0x10a>
 800428c:	8b7b      	ldrh	r3, [r7, #26]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d166      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	881a      	ldrh	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b6:	e053      	b.n	8004360 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d11b      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x176>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d016      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x176>
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d113      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d119      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x1b8>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d014      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800433c:	2301      	movs	r3, #1
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004340:	f7fe f916 	bl	8002570 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	429a      	cmp	r2, r3
 800434e:	d807      	bhi.n	8004360 <HAL_SPI_TransmitReceive+0x1d8>
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d003      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800435e:	e0a7      	b.n	80044b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1a6      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x130>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1a1      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x130>
 8004374:	e07c      	b.n	8004470 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SPI_TransmitReceive+0x1fc>
 800437e:	8b7b      	ldrh	r3, [r7, #26]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d16b      	bne.n	800445c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043aa:	e057      	b.n	800445c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d11c      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x26c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x26c>
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d114      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	7812      	ldrb	r2, [r2, #0]
 80043d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d119      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x2ae>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004432:	2301      	movs	r3, #1
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004436:	f7fe f89b 	bl	8002570 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004442:	429a      	cmp	r2, r3
 8004444:	d803      	bhi.n	800444e <HAL_SPI_TransmitReceive+0x2c6>
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d102      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2cc>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800445a:	e029      	b.n	80044b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1a2      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x224>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d19d      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f917 	bl	80046a8 <SPI_EndRxTxTransaction>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800448c:	e010      	b.n	80044b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	e000      	b.n	80044b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3730      	adds	r7, #48	; 0x30
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044dc:	f7fe f848 	bl	8002570 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044ec:	f7fe f840 	bl	8002570 <HAL_GetTick>
 80044f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044f2:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	015b      	lsls	r3, r3, #5
 80044f8:	0d1b      	lsrs	r3, r3, #20
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004502:	e054      	b.n	80045ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d050      	beq.n	80045ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800450c:	f7fe f830 	bl	8002570 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	d902      	bls.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d13d      	bne.n	800459e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800453a:	d111      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	d004      	beq.n	8004550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454e:	d107      	bne.n	8004560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004568:	d10f      	bne.n	800458a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e017      	b.n	80045ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d19b      	bne.n	8004504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000000 	.word	0x20000000

080045dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f0:	d111      	bne.n	8004616 <SPI_EndRxTransaction+0x3a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fa:	d004      	beq.n	8004606 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004604:	d107      	bne.n	8004616 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d12a      	bne.n	8004676 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004628:	d012      	beq.n	8004650 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff ff49 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02d      	beq.n	800469c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e026      	b.n	800469e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	2101      	movs	r1, #1
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff ff36 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01a      	beq.n	800469c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e013      	b.n	800469e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2200      	movs	r2, #0
 800467e:	2101      	movs	r1, #1
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff ff23 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e000      	b.n	800469e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <SPI_EndRxTxTransaction+0x7c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <SPI_EndRxTxTransaction+0x80>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0d5b      	lsrs	r3, r3, #21
 80046c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d112      	bne.n	80046fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fef4 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e00f      	b.n	800471a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3b01      	subs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d0f2      	beq.n	80046fa <SPI_EndRxTxTransaction+0x52>
 8004714:	e000      	b.n	8004718 <SPI_EndRxTxTransaction+0x70>
        break;
 8004716:	bf00      	nop
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000000 	.word	0x20000000
 8004728:	165e9f81 	.word	0x165e9f81

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fde8 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 fa88 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e044      	b.n	800486e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1e      	ldr	r2, [pc, #120]	; (800487c <HAL_TIM_Base_Start_IT+0xb0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x6c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d013      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x6c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <HAL_TIM_Base_Start_IT+0xb4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x6c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a19      	ldr	r2, [pc, #100]	; (8004884 <HAL_TIM_Base_Start_IT+0xb8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x6c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a17      	ldr	r2, [pc, #92]	; (8004888 <HAL_TIM_Base_Start_IT+0xbc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x6c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a16      	ldr	r2, [pc, #88]	; (800488c <HAL_TIM_Base_Start_IT+0xc0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d111      	bne.n	800485c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d010      	beq.n	800486c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	e007      	b.n	800486c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40014000 	.word	0x40014000

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0202 	mvn.w	r2, #2
 80048bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9b5 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9a7 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f9b8 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f98b 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f97d 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f98e 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0208 	mvn.w	r2, #8
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2204      	movs	r2, #4
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f961 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f953 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f964 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f937 	bl	8004c42 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f929 	bl	8004c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f93a 	bl	8004c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0201 	mvn.w	r2, #1
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fb60 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fab2 	bl	8004fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d10e      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8ff 	bl	8004c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d10e      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d107      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0220 	mvn.w	r2, #32
 8004a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa7c 	bl	8004f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_TIM_ConfigClockSource+0x1c>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e0b4      	b.n	8004c26 <HAL_TIM_ConfigClockSource+0x186>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af4:	d03e      	beq.n	8004b74 <HAL_TIM_ConfigClockSource+0xd4>
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	f200 8087 	bhi.w	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	f000 8086 	beq.w	8004c12 <HAL_TIM_ConfigClockSource+0x172>
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d87f      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b70      	cmp	r3, #112	; 0x70
 8004b0e:	d01a      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xa6>
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d87b      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d050      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x11a>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d877      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b50      	cmp	r3, #80	; 0x50
 8004b1e:	d03c      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0xfa>
 8004b20:	2b50      	cmp	r3, #80	; 0x50
 8004b22:	d873      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d058      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x13a>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d86f      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b30      	cmp	r3, #48	; 0x30
 8004b2e:	d064      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15a>
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d86b      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d060      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15a>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d867      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05c      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15a>
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d05a      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	e062      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f000 f98d 	bl	8004e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
      break;
 8004b72:	e04f      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6899      	ldr	r1, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f000 f976 	bl	8004e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b96:	609a      	str	r2, [r3, #8]
      break;
 8004b98:	e03c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 f8ea 	bl	8004d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2150      	movs	r1, #80	; 0x50
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f943 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e02c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 f909 	bl	8004dde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2160      	movs	r1, #96	; 0x60
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f933 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e01c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f000 f8ca 	bl	8004d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f923 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f000 f91a 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004c0a:	e003      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00f      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d00b      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a31      	ldr	r2, [pc, #196]	; (8004d68 <TIM_Base_SetConfig+0xe8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a30      	ldr	r2, [pc, #192]	; (8004d6c <TIM_Base_SetConfig+0xec>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_Base_SetConfig+0x38>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <TIM_Base_SetConfig+0xf0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <TIM_Base_SetConfig+0xe8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <TIM_Base_SetConfig+0xec>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a20      	ldr	r2, [pc, #128]	; (8004d70 <TIM_Base_SetConfig+0xf0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <TIM_Base_SetConfig+0xf4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <TIM_Base_SetConfig+0xf8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x8a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <TIM_Base_SetConfig+0xfc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <TIM_Base_SetConfig+0xe4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d103      	bne.n	8004d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	615a      	str	r2, [r3, #20]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 030a 	bic.w	r3, r3, #10
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0210 	bic.w	r2, r3, #16
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	031b      	lsls	r3, r3, #12
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f043 0307 	orr.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	021a      	lsls	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e050      	b.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d013      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10c      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40014000 	.word	0x40014000

08004f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e03f      	b.n	800504a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fd f9ee 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2224      	movs	r2, #36	; 0x24
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f929 	bl	8005254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b08a      	sub	sp, #40	; 0x28
 8005056:	af02      	add	r7, sp, #8
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b20      	cmp	r3, #32
 8005070:	d17c      	bne.n	800516c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_Transmit+0x2c>
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e075      	b.n	800516e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_UART_Transmit+0x3e>
 800508c:	2302      	movs	r3, #2
 800508e:	e06e      	b.n	800516e <HAL_UART_Transmit+0x11c>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2221      	movs	r2, #33	; 0x21
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a6:	f7fd fa63 	bl	8002570 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c0:	d108      	bne.n	80050d4 <HAL_UART_Transmit+0x82>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e003      	b.n	80050dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050e4:	e02a      	b.n	800513c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f840 	bl	8005176 <UART_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e036      	b.n	800516e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	3302      	adds	r3, #2
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e007      	b.n	800512e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1cf      	bne.n	80050e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	2140      	movs	r1, #64	; 0x40
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f810 	bl	8005176 <UART_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e006      	b.n	800516e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b090      	sub	sp, #64	; 0x40
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005186:	e050      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d04c      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005196:	f7fd f9eb 	bl	8002570 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d241      	bcs.n	800522a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051c6:	637a      	str	r2, [r7, #52]	; 0x34
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e5      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fa:	623a      	str	r2, [r7, #32]
 80051fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	69f9      	ldr	r1, [r7, #28]
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	61bb      	str	r3, [r7, #24]
   return(result);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e5      	bne.n	80051da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e00f      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	429a      	cmp	r2, r3
 8005246:	d09f      	beq.n	8005188 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3740      	adds	r7, #64	; 0x40
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b0c0      	sub	sp, #256	; 0x100
 800525a:	af00      	add	r7, sp, #0
 800525c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	ea40 0301 	orr.w	r3, r0, r1
 800527c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	431a      	orrs	r2, r3
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	431a      	orrs	r2, r3
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052ac:	f021 010c 	bic.w	r1, r1, #12
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ba:	430b      	orrs	r3, r1
 80052bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	6999      	ldr	r1, [r3, #24]
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	ea40 0301 	orr.w	r3, r0, r1
 80052da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <UART_SetConfig+0x2cc>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d005      	beq.n	80052f4 <UART_SetConfig+0xa0>
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <UART_SetConfig+0x2d0>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d104      	bne.n	80052fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fe fc5e 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 80052f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052fc:	e003      	b.n	8005306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fe:	f7fe fc45 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8005302:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005310:	f040 810c 	bne.w	800552c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800531e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	1891      	adds	r1, r2, r2
 800532c:	65b9      	str	r1, [r7, #88]	; 0x58
 800532e:	415b      	adcs	r3, r3
 8005330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005336:	4621      	mov	r1, r4
 8005338:	eb12 0801 	adds.w	r8, r2, r1
 800533c:	4629      	mov	r1, r5
 800533e:	eb43 0901 	adc.w	r9, r3, r1
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005356:	4690      	mov	r8, r2
 8005358:	4699      	mov	r9, r3
 800535a:	4623      	mov	r3, r4
 800535c:	eb18 0303 	adds.w	r3, r8, r3
 8005360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005364:	462b      	mov	r3, r5
 8005366:	eb49 0303 	adc.w	r3, r9, r3
 800536a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800537a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800537e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005382:	460b      	mov	r3, r1
 8005384:	18db      	adds	r3, r3, r3
 8005386:	653b      	str	r3, [r7, #80]	; 0x50
 8005388:	4613      	mov	r3, r2
 800538a:	eb42 0303 	adc.w	r3, r2, r3
 800538e:	657b      	str	r3, [r7, #84]	; 0x54
 8005390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005398:	f7fb fc0e 	bl	8000bb8 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b61      	ldr	r3, [pc, #388]	; (8005528 <UART_SetConfig+0x2d4>)
 80053a2:	fba3 2302 	umull	r2, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	011c      	lsls	r4, r3, #4
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053c4:	415b      	adcs	r3, r3
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053cc:	4641      	mov	r1, r8
 80053ce:	eb12 0a01 	adds.w	sl, r2, r1
 80053d2:	4649      	mov	r1, r9
 80053d4:	eb43 0b01 	adc.w	fp, r3, r1
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ec:	4692      	mov	sl, r2
 80053ee:	469b      	mov	fp, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	eb1a 0303 	adds.w	r3, sl, r3
 80053f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053fa:	464b      	mov	r3, r9
 80053fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005410:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005418:	460b      	mov	r3, r1
 800541a:	18db      	adds	r3, r3, r3
 800541c:	643b      	str	r3, [r7, #64]	; 0x40
 800541e:	4613      	mov	r3, r2
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	647b      	str	r3, [r7, #68]	; 0x44
 8005426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800542a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800542e:	f7fb fbc3 	bl	8000bb8 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4611      	mov	r1, r2
 8005438:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <UART_SetConfig+0x2d4>)
 800543a:	fba3 2301 	umull	r2, r3, r3, r1
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2264      	movs	r2, #100	; 0x64
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <UART_SetConfig+0x2d4>)
 8005450:	fba3 2302 	umull	r2, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800545c:	441c      	add	r4, r3
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005468:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800546c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	63b9      	str	r1, [r7, #56]	; 0x38
 8005478:	415b      	adcs	r3, r3
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800547c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005480:	4641      	mov	r1, r8
 8005482:	1851      	adds	r1, r2, r1
 8005484:	6339      	str	r1, [r7, #48]	; 0x30
 8005486:	4649      	mov	r1, r9
 8005488:	414b      	adcs	r3, r1
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005498:	4659      	mov	r1, fp
 800549a:	00cb      	lsls	r3, r1, #3
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a2:	4651      	mov	r1, sl
 80054a4:	00ca      	lsls	r2, r1, #3
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	4642      	mov	r2, r8
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b4:	464b      	mov	r3, r9
 80054b6:	460a      	mov	r2, r1
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054d4:	460b      	mov	r3, r1
 80054d6:	18db      	adds	r3, r3, r3
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054da:	4613      	mov	r3, r2
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ea:	f7fb fb65 	bl	8000bb8 <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <UART_SetConfig+0x2d4>)
 80054f4:	fba3 1302 	umull	r1, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	2164      	movs	r1, #100	; 0x64
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	3332      	adds	r3, #50	; 0x32
 8005506:	4a08      	ldr	r2, [pc, #32]	; (8005528 <UART_SetConfig+0x2d4>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f003 0207 	and.w	r2, r3, #7
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4422      	add	r2, r4
 800551a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800551c:	e105      	b.n	800572a <UART_SetConfig+0x4d6>
 800551e:	bf00      	nop
 8005520:	40011000 	.word	0x40011000
 8005524:	40011400 	.word	0x40011400
 8005528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800553a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	1891      	adds	r1, r2, r2
 8005544:	6239      	str	r1, [r7, #32]
 8005546:	415b      	adcs	r3, r3
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554e:	4641      	mov	r1, r8
 8005550:	1854      	adds	r4, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb43 0501 	adc.w	r5, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	00eb      	lsls	r3, r5, #3
 8005562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005566:	00e2      	lsls	r2, r4, #3
 8005568:	4614      	mov	r4, r2
 800556a:	461d      	mov	r5, r3
 800556c:	4643      	mov	r3, r8
 800556e:	18e3      	adds	r3, r4, r3
 8005570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005574:	464b      	mov	r3, r9
 8005576:	eb45 0303 	adc.w	r3, r5, r3
 800557a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800558a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800559a:	4629      	mov	r1, r5
 800559c:	008b      	lsls	r3, r1, #2
 800559e:	4621      	mov	r1, r4
 80055a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a4:	4621      	mov	r1, r4
 80055a6:	008a      	lsls	r2, r1, #2
 80055a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055ac:	f7fb fb04 	bl	8000bb8 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4b60      	ldr	r3, [pc, #384]	; (8005738 <UART_SetConfig+0x4e4>)
 80055b6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	011c      	lsls	r4, r3, #4
 80055be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	1891      	adds	r1, r2, r2
 80055d6:	61b9      	str	r1, [r7, #24]
 80055d8:	415b      	adcs	r3, r3
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e0:	4641      	mov	r1, r8
 80055e2:	1851      	adds	r1, r2, r1
 80055e4:	6139      	str	r1, [r7, #16]
 80055e6:	4649      	mov	r1, r9
 80055e8:	414b      	adcs	r3, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f8:	4659      	mov	r1, fp
 80055fa:	00cb      	lsls	r3, r1, #3
 80055fc:	4651      	mov	r1, sl
 80055fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005602:	4651      	mov	r1, sl
 8005604:	00ca      	lsls	r2, r1, #3
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	4603      	mov	r3, r0
 800560c:	4642      	mov	r2, r8
 800560e:	189b      	adds	r3, r3, r2
 8005610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005614:	464b      	mov	r3, r9
 8005616:	460a      	mov	r2, r1
 8005618:	eb42 0303 	adc.w	r3, r2, r3
 800561c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	67bb      	str	r3, [r7, #120]	; 0x78
 800562a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005638:	4649      	mov	r1, r9
 800563a:	008b      	lsls	r3, r1, #2
 800563c:	4641      	mov	r1, r8
 800563e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005642:	4641      	mov	r1, r8
 8005644:	008a      	lsls	r2, r1, #2
 8005646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800564a:	f7fb fab5 	bl	8000bb8 <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <UART_SetConfig+0x4e4>)
 8005654:	fba3 1302 	umull	r1, r3, r3, r2
 8005658:	095b      	lsrs	r3, r3, #5
 800565a:	2164      	movs	r1, #100	; 0x64
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	3332      	adds	r3, #50	; 0x32
 8005666:	4a34      	ldr	r2, [pc, #208]	; (8005738 <UART_SetConfig+0x4e4>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005672:	441c      	add	r4, r3
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005678:	2200      	movs	r2, #0
 800567a:	673b      	str	r3, [r7, #112]	; 0x70
 800567c:	677a      	str	r2, [r7, #116]	; 0x74
 800567e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005682:	4642      	mov	r2, r8
 8005684:	464b      	mov	r3, r9
 8005686:	1891      	adds	r1, r2, r2
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	415b      	adcs	r3, r3
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005692:	4641      	mov	r1, r8
 8005694:	1851      	adds	r1, r2, r1
 8005696:	6039      	str	r1, [r7, #0]
 8005698:	4649      	mov	r1, r9
 800569a:	414b      	adcs	r3, r1
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056aa:	4659      	mov	r1, fp
 80056ac:	00cb      	lsls	r3, r1, #3
 80056ae:	4651      	mov	r1, sl
 80056b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b4:	4651      	mov	r1, sl
 80056b6:	00ca      	lsls	r2, r1, #3
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	4603      	mov	r3, r0
 80056be:	4642      	mov	r2, r8
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056c4:	464b      	mov	r3, r9
 80056c6:	460a      	mov	r2, r1
 80056c8:	eb42 0303 	adc.w	r3, r2, r3
 80056cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	663b      	str	r3, [r7, #96]	; 0x60
 80056d8:	667a      	str	r2, [r7, #100]	; 0x64
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056e6:	4649      	mov	r1, r9
 80056e8:	008b      	lsls	r3, r1, #2
 80056ea:	4641      	mov	r1, r8
 80056ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056f0:	4641      	mov	r1, r8
 80056f2:	008a      	lsls	r2, r1, #2
 80056f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056f8:	f7fb fa5e 	bl	8000bb8 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <UART_SetConfig+0x4e4>)
 8005702:	fba3 1302 	umull	r1, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2164      	movs	r1, #100	; 0x64
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	; 0x32
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <UART_SetConfig+0x4e4>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4422      	add	r2, r4
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	bf00      	nop
 800572c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	51eb851f 	.word	0x51eb851f

0800573c <__errno>:
 800573c:	4b01      	ldr	r3, [pc, #4]	; (8005744 <__errno+0x8>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	2000000c 	.word	0x2000000c

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4d0d      	ldr	r5, [pc, #52]	; (8005780 <__libc_init_array+0x38>)
 800574c:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	2600      	movs	r6, #0
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	4d0b      	ldr	r5, [pc, #44]	; (8005788 <__libc_init_array+0x40>)
 800575a:	4c0c      	ldr	r4, [pc, #48]	; (800578c <__libc_init_array+0x44>)
 800575c:	f002 fdc4 	bl	80082e8 <_init>
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	2600      	movs	r6, #0
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	08008804 	.word	0x08008804
 8005784:	08008804 	.word	0x08008804
 8005788:	08008804 	.word	0x08008804
 800578c:	08008808 	.word	0x08008808

08005790 <memcpy>:
 8005790:	440a      	add	r2, r1
 8005792:	4291      	cmp	r1, r2
 8005794:	f100 33ff 	add.w	r3, r0, #4294967295
 8005798:	d100      	bne.n	800579c <memcpy+0xc>
 800579a:	4770      	bx	lr
 800579c:	b510      	push	{r4, lr}
 800579e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057a6:	4291      	cmp	r1, r2
 80057a8:	d1f9      	bne.n	800579e <memcpy+0xe>
 80057aa:	bd10      	pop	{r4, pc}

080057ac <memset>:
 80057ac:	4402      	add	r2, r0
 80057ae:	4603      	mov	r3, r0
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <__cvt>:
 80057bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	ec55 4b10 	vmov	r4, r5, d0
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	460e      	mov	r6, r1
 80057c8:	4619      	mov	r1, r3
 80057ca:	462b      	mov	r3, r5
 80057cc:	bfbb      	ittet	lt
 80057ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057d2:	461d      	movlt	r5, r3
 80057d4:	2300      	movge	r3, #0
 80057d6:	232d      	movlt	r3, #45	; 0x2d
 80057d8:	700b      	strb	r3, [r1, #0]
 80057da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057e0:	4691      	mov	r9, r2
 80057e2:	f023 0820 	bic.w	r8, r3, #32
 80057e6:	bfbc      	itt	lt
 80057e8:	4622      	movlt	r2, r4
 80057ea:	4614      	movlt	r4, r2
 80057ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f0:	d005      	beq.n	80057fe <__cvt+0x42>
 80057f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057f6:	d100      	bne.n	80057fa <__cvt+0x3e>
 80057f8:	3601      	adds	r6, #1
 80057fa:	2102      	movs	r1, #2
 80057fc:	e000      	b.n	8005800 <__cvt+0x44>
 80057fe:	2103      	movs	r1, #3
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	ab02      	add	r3, sp, #8
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	ec45 4b10 	vmov	d0, r4, r5
 800580c:	4653      	mov	r3, sl
 800580e:	4632      	mov	r2, r6
 8005810:	f000 fe1a 	bl	8006448 <_dtoa_r>
 8005814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005818:	4607      	mov	r7, r0
 800581a:	d102      	bne.n	8005822 <__cvt+0x66>
 800581c:	f019 0f01 	tst.w	r9, #1
 8005820:	d022      	beq.n	8005868 <__cvt+0xac>
 8005822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005826:	eb07 0906 	add.w	r9, r7, r6
 800582a:	d110      	bne.n	800584e <__cvt+0x92>
 800582c:	783b      	ldrb	r3, [r7, #0]
 800582e:	2b30      	cmp	r3, #48	; 0x30
 8005830:	d10a      	bne.n	8005848 <__cvt+0x8c>
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fb f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800583e:	b918      	cbnz	r0, 8005848 <__cvt+0x8c>
 8005840:	f1c6 0601 	rsb	r6, r6, #1
 8005844:	f8ca 6000 	str.w	r6, [sl]
 8005848:	f8da 3000 	ldr.w	r3, [sl]
 800584c:	4499      	add	r9, r3
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fb f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800585a:	b108      	cbz	r0, 8005860 <__cvt+0xa4>
 800585c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005860:	2230      	movs	r2, #48	; 0x30
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	454b      	cmp	r3, r9
 8005866:	d307      	bcc.n	8005878 <__cvt+0xbc>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800586c:	1bdb      	subs	r3, r3, r7
 800586e:	4638      	mov	r0, r7
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	b004      	add	sp, #16
 8005874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	9103      	str	r1, [sp, #12]
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e7f0      	b.n	8005862 <__cvt+0xa6>

08005880 <__exponent>:
 8005880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005882:	4603      	mov	r3, r0
 8005884:	2900      	cmp	r1, #0
 8005886:	bfb8      	it	lt
 8005888:	4249      	neglt	r1, r1
 800588a:	f803 2b02 	strb.w	r2, [r3], #2
 800588e:	bfb4      	ite	lt
 8005890:	222d      	movlt	r2, #45	; 0x2d
 8005892:	222b      	movge	r2, #43	; 0x2b
 8005894:	2909      	cmp	r1, #9
 8005896:	7042      	strb	r2, [r0, #1]
 8005898:	dd2a      	ble.n	80058f0 <__exponent+0x70>
 800589a:	f10d 0407 	add.w	r4, sp, #7
 800589e:	46a4      	mov	ip, r4
 80058a0:	270a      	movs	r7, #10
 80058a2:	46a6      	mov	lr, r4
 80058a4:	460a      	mov	r2, r1
 80058a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80058aa:	fb07 1516 	mls	r5, r7, r6, r1
 80058ae:	3530      	adds	r5, #48	; 0x30
 80058b0:	2a63      	cmp	r2, #99	; 0x63
 80058b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80058b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058ba:	4631      	mov	r1, r6
 80058bc:	dcf1      	bgt.n	80058a2 <__exponent+0x22>
 80058be:	3130      	adds	r1, #48	; 0x30
 80058c0:	f1ae 0502 	sub.w	r5, lr, #2
 80058c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058c8:	1c44      	adds	r4, r0, #1
 80058ca:	4629      	mov	r1, r5
 80058cc:	4561      	cmp	r1, ip
 80058ce:	d30a      	bcc.n	80058e6 <__exponent+0x66>
 80058d0:	f10d 0209 	add.w	r2, sp, #9
 80058d4:	eba2 020e 	sub.w	r2, r2, lr
 80058d8:	4565      	cmp	r5, ip
 80058da:	bf88      	it	hi
 80058dc:	2200      	movhi	r2, #0
 80058de:	4413      	add	r3, r2
 80058e0:	1a18      	subs	r0, r3, r0
 80058e2:	b003      	add	sp, #12
 80058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058ee:	e7ed      	b.n	80058cc <__exponent+0x4c>
 80058f0:	2330      	movs	r3, #48	; 0x30
 80058f2:	3130      	adds	r1, #48	; 0x30
 80058f4:	7083      	strb	r3, [r0, #2]
 80058f6:	70c1      	strb	r1, [r0, #3]
 80058f8:	1d03      	adds	r3, r0, #4
 80058fa:	e7f1      	b.n	80058e0 <__exponent+0x60>

080058fc <_printf_float>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	ed2d 8b02 	vpush	{d8}
 8005904:	b08d      	sub	sp, #52	; 0x34
 8005906:	460c      	mov	r4, r1
 8005908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800590c:	4616      	mov	r6, r2
 800590e:	461f      	mov	r7, r3
 8005910:	4605      	mov	r5, r0
 8005912:	f001 fd3f 	bl	8007394 <_localeconv_r>
 8005916:	f8d0 a000 	ldr.w	sl, [r0]
 800591a:	4650      	mov	r0, sl
 800591c:	f7fa fc60 	bl	80001e0 <strlen>
 8005920:	2300      	movs	r3, #0
 8005922:	930a      	str	r3, [sp, #40]	; 0x28
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	9305      	str	r3, [sp, #20]
 8005928:	f8d8 3000 	ldr.w	r3, [r8]
 800592c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	f103 0208 	add.w	r2, r3, #8
 800593a:	f8c8 2000 	str.w	r2, [r8]
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005946:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800594a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800594e:	9307      	str	r3, [sp, #28]
 8005950:	f8cd 8018 	str.w	r8, [sp, #24]
 8005954:	ee08 0a10 	vmov	s16, r0
 8005958:	4b9f      	ldr	r3, [pc, #636]	; (8005bd8 <_printf_float+0x2dc>)
 800595a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800595e:	f04f 32ff 	mov.w	r2, #4294967295
 8005962:	f7fb f8eb 	bl	8000b3c <__aeabi_dcmpun>
 8005966:	bb88      	cbnz	r0, 80059cc <_printf_float+0xd0>
 8005968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596c:	4b9a      	ldr	r3, [pc, #616]	; (8005bd8 <_printf_float+0x2dc>)
 800596e:	f04f 32ff 	mov.w	r2, #4294967295
 8005972:	f7fb f8c5 	bl	8000b00 <__aeabi_dcmple>
 8005976:	bb48      	cbnz	r0, 80059cc <_printf_float+0xd0>
 8005978:	2200      	movs	r2, #0
 800597a:	2300      	movs	r3, #0
 800597c:	4640      	mov	r0, r8
 800597e:	4649      	mov	r1, r9
 8005980:	f7fb f8b4 	bl	8000aec <__aeabi_dcmplt>
 8005984:	b110      	cbz	r0, 800598c <_printf_float+0x90>
 8005986:	232d      	movs	r3, #45	; 0x2d
 8005988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598c:	4b93      	ldr	r3, [pc, #588]	; (8005bdc <_printf_float+0x2e0>)
 800598e:	4894      	ldr	r0, [pc, #592]	; (8005be0 <_printf_float+0x2e4>)
 8005990:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005994:	bf94      	ite	ls
 8005996:	4698      	movls	r8, r3
 8005998:	4680      	movhi	r8, r0
 800599a:	2303      	movs	r3, #3
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	9b05      	ldr	r3, [sp, #20]
 80059a0:	f023 0204 	bic.w	r2, r3, #4
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	f04f 0900 	mov.w	r9, #0
 80059aa:	9700      	str	r7, [sp, #0]
 80059ac:	4633      	mov	r3, r6
 80059ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 f9d8 	bl	8005d68 <_printf_common>
 80059b8:	3001      	adds	r0, #1
 80059ba:	f040 8090 	bne.w	8005ade <_printf_float+0x1e2>
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	b00d      	add	sp, #52	; 0x34
 80059c4:	ecbd 8b02 	vpop	{d8}
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fb f8b2 	bl	8000b3c <__aeabi_dcmpun>
 80059d8:	b140      	cbz	r0, 80059ec <_printf_float+0xf0>
 80059da:	464b      	mov	r3, r9
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bfbc      	itt	lt
 80059e0:	232d      	movlt	r3, #45	; 0x2d
 80059e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059e6:	487f      	ldr	r0, [pc, #508]	; (8005be4 <_printf_float+0x2e8>)
 80059e8:	4b7f      	ldr	r3, [pc, #508]	; (8005be8 <_printf_float+0x2ec>)
 80059ea:	e7d1      	b.n	8005990 <_printf_float+0x94>
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059f2:	9206      	str	r2, [sp, #24]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	d13f      	bne.n	8005a78 <_printf_float+0x17c>
 80059f8:	2306      	movs	r3, #6
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	9b05      	ldr	r3, [sp, #20]
 80059fe:	6861      	ldr	r1, [r4, #4]
 8005a00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a04:	2300      	movs	r3, #0
 8005a06:	9303      	str	r3, [sp, #12]
 8005a08:	ab0a      	add	r3, sp, #40	; 0x28
 8005a0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a0e:	ab09      	add	r3, sp, #36	; 0x24
 8005a10:	ec49 8b10 	vmov	d0, r8, r9
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7ff fecd 	bl	80057bc <__cvt>
 8005a22:	9b06      	ldr	r3, [sp, #24]
 8005a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a26:	2b47      	cmp	r3, #71	; 0x47
 8005a28:	4680      	mov	r8, r0
 8005a2a:	d108      	bne.n	8005a3e <_printf_float+0x142>
 8005a2c:	1cc8      	adds	r0, r1, #3
 8005a2e:	db02      	blt.n	8005a36 <_printf_float+0x13a>
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	4299      	cmp	r1, r3
 8005a34:	dd41      	ble.n	8005aba <_printf_float+0x1be>
 8005a36:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a3a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a42:	d820      	bhi.n	8005a86 <_printf_float+0x18a>
 8005a44:	3901      	subs	r1, #1
 8005a46:	465a      	mov	r2, fp
 8005a48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a4e:	f7ff ff17 	bl	8005880 <__exponent>
 8005a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a54:	1813      	adds	r3, r2, r0
 8005a56:	2a01      	cmp	r2, #1
 8005a58:	4681      	mov	r9, r0
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	dc02      	bgt.n	8005a64 <_printf_float+0x168>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	07d2      	lsls	r2, r2, #31
 8005a62:	d501      	bpl.n	8005a68 <_printf_float+0x16c>
 8005a64:	3301      	adds	r3, #1
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d09c      	beq.n	80059aa <_printf_float+0xae>
 8005a70:	232d      	movs	r3, #45	; 0x2d
 8005a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a76:	e798      	b.n	80059aa <_printf_float+0xae>
 8005a78:	9a06      	ldr	r2, [sp, #24]
 8005a7a:	2a47      	cmp	r2, #71	; 0x47
 8005a7c:	d1be      	bne.n	80059fc <_printf_float+0x100>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1bc      	bne.n	80059fc <_printf_float+0x100>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e7b9      	b.n	80059fa <_printf_float+0xfe>
 8005a86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a8a:	d118      	bne.n	8005abe <_printf_float+0x1c2>
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	dd0b      	ble.n	8005aaa <_printf_float+0x1ae>
 8005a92:	6121      	str	r1, [r4, #16]
 8005a94:	b913      	cbnz	r3, 8005a9c <_printf_float+0x1a0>
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	07d0      	lsls	r0, r2, #31
 8005a9a:	d502      	bpl.n	8005aa2 <_printf_float+0x1a6>
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	440b      	add	r3, r1
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aa4:	f04f 0900 	mov.w	r9, #0
 8005aa8:	e7de      	b.n	8005a68 <_printf_float+0x16c>
 8005aaa:	b913      	cbnz	r3, 8005ab2 <_printf_float+0x1b6>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	07d2      	lsls	r2, r2, #31
 8005ab0:	d501      	bpl.n	8005ab6 <_printf_float+0x1ba>
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	e7f4      	b.n	8005aa0 <_printf_float+0x1a4>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e7f2      	b.n	8005aa0 <_printf_float+0x1a4>
 8005aba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	db05      	blt.n	8005ad0 <_printf_float+0x1d4>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	6121      	str	r1, [r4, #16]
 8005ac8:	07d8      	lsls	r0, r3, #31
 8005aca:	d5ea      	bpl.n	8005aa2 <_printf_float+0x1a6>
 8005acc:	1c4b      	adds	r3, r1, #1
 8005ace:	e7e7      	b.n	8005aa0 <_printf_float+0x1a4>
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	bfd4      	ite	le
 8005ad4:	f1c1 0202 	rsble	r2, r1, #2
 8005ad8:	2201      	movgt	r2, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	e7e0      	b.n	8005aa0 <_printf_float+0x1a4>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	055a      	lsls	r2, r3, #21
 8005ae2:	d407      	bmi.n	8005af4 <_printf_float+0x1f8>
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b8      	blx	r7
 8005aee:	3001      	adds	r0, #1
 8005af0:	d12c      	bne.n	8005b4c <_printf_float+0x250>
 8005af2:	e764      	b.n	80059be <_printf_float+0xc2>
 8005af4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005af8:	f240 80e0 	bls.w	8005cbc <_printf_float+0x3c0>
 8005afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	f7fa ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d034      	beq.n	8005b76 <_printf_float+0x27a>
 8005b0c:	4a37      	ldr	r2, [pc, #220]	; (8005bec <_printf_float+0x2f0>)
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af51 	beq.w	80059be <_printf_float+0xc2>
 8005b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b20:	429a      	cmp	r2, r3
 8005b22:	db02      	blt.n	8005b2a <_printf_float+0x22e>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07d8      	lsls	r0, r3, #31
 8005b28:	d510      	bpl.n	8005b4c <_printf_float+0x250>
 8005b2a:	ee18 3a10 	vmov	r3, s16
 8005b2e:	4652      	mov	r2, sl
 8005b30:	4631      	mov	r1, r6
 8005b32:	4628      	mov	r0, r5
 8005b34:	47b8      	blx	r7
 8005b36:	3001      	adds	r0, #1
 8005b38:	f43f af41 	beq.w	80059be <_printf_float+0xc2>
 8005b3c:	f04f 0800 	mov.w	r8, #0
 8005b40:	f104 091a 	add.w	r9, r4, #26
 8005b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	4543      	cmp	r3, r8
 8005b4a:	dc09      	bgt.n	8005b60 <_printf_float+0x264>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	079b      	lsls	r3, r3, #30
 8005b50:	f100 8105 	bmi.w	8005d5e <_printf_float+0x462>
 8005b54:	68e0      	ldr	r0, [r4, #12]
 8005b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b58:	4298      	cmp	r0, r3
 8005b5a:	bfb8      	it	lt
 8005b5c:	4618      	movlt	r0, r3
 8005b5e:	e730      	b.n	80059c2 <_printf_float+0xc6>
 8005b60:	2301      	movs	r3, #1
 8005b62:	464a      	mov	r2, r9
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f af27 	beq.w	80059be <_printf_float+0xc2>
 8005b70:	f108 0801 	add.w	r8, r8, #1
 8005b74:	e7e6      	b.n	8005b44 <_printf_float+0x248>
 8005b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dc39      	bgt.n	8005bf0 <_printf_float+0x2f4>
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <_printf_float+0x2f0>)
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f af19 	beq.w	80059be <_printf_float+0xc2>
 8005b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b90:	4313      	orrs	r3, r2
 8005b92:	d102      	bne.n	8005b9a <_printf_float+0x29e>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	07d9      	lsls	r1, r3, #31
 8005b98:	d5d8      	bpl.n	8005b4c <_printf_float+0x250>
 8005b9a:	ee18 3a10 	vmov	r3, s16
 8005b9e:	4652      	mov	r2, sl
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f af09 	beq.w	80059be <_printf_float+0xc2>
 8005bac:	f04f 0900 	mov.w	r9, #0
 8005bb0:	f104 0a1a 	add.w	sl, r4, #26
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	425b      	negs	r3, r3
 8005bb8:	454b      	cmp	r3, r9
 8005bba:	dc01      	bgt.n	8005bc0 <_printf_float+0x2c4>
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbe:	e792      	b.n	8005ae6 <_printf_float+0x1ea>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	4652      	mov	r2, sl
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f aef7 	beq.w	80059be <_printf_float+0xc2>
 8005bd0:	f109 0901 	add.w	r9, r9, #1
 8005bd4:	e7ee      	b.n	8005bb4 <_printf_float+0x2b8>
 8005bd6:	bf00      	nop
 8005bd8:	7fefffff 	.word	0x7fefffff
 8005bdc:	08008424 	.word	0x08008424
 8005be0:	08008428 	.word	0x08008428
 8005be4:	08008430 	.word	0x08008430
 8005be8:	0800842c 	.word	0x0800842c
 8005bec:	08008434 	.word	0x08008434
 8005bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	bfa8      	it	ge
 8005bf8:	461a      	movge	r2, r3
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	4691      	mov	r9, r2
 8005bfe:	dc37      	bgt.n	8005c70 <_printf_float+0x374>
 8005c00:	f04f 0b00 	mov.w	fp, #0
 8005c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c08:	f104 021a 	add.w	r2, r4, #26
 8005c0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c0e:	9305      	str	r3, [sp, #20]
 8005c10:	eba3 0309 	sub.w	r3, r3, r9
 8005c14:	455b      	cmp	r3, fp
 8005c16:	dc33      	bgt.n	8005c80 <_printf_float+0x384>
 8005c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	db3b      	blt.n	8005c98 <_printf_float+0x39c>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	07da      	lsls	r2, r3, #31
 8005c24:	d438      	bmi.n	8005c98 <_printf_float+0x39c>
 8005c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c28:	9a05      	ldr	r2, [sp, #20]
 8005c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c2c:	1a9a      	subs	r2, r3, r2
 8005c2e:	eba3 0901 	sub.w	r9, r3, r1
 8005c32:	4591      	cmp	r9, r2
 8005c34:	bfa8      	it	ge
 8005c36:	4691      	movge	r9, r2
 8005c38:	f1b9 0f00 	cmp.w	r9, #0
 8005c3c:	dc35      	bgt.n	8005caa <_printf_float+0x3ae>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c46:	f104 0a1a 	add.w	sl, r4, #26
 8005c4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	eba3 0309 	sub.w	r3, r3, r9
 8005c54:	4543      	cmp	r3, r8
 8005c56:	f77f af79 	ble.w	8005b4c <_printf_float+0x250>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f aeaa 	beq.w	80059be <_printf_float+0xc2>
 8005c6a:	f108 0801 	add.w	r8, r8, #1
 8005c6e:	e7ec      	b.n	8005c4a <_printf_float+0x34e>
 8005c70:	4613      	mov	r3, r2
 8005c72:	4631      	mov	r1, r6
 8005c74:	4642      	mov	r2, r8
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d1c0      	bne.n	8005c00 <_printf_float+0x304>
 8005c7e:	e69e      	b.n	80059be <_printf_float+0xc2>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	9205      	str	r2, [sp, #20]
 8005c88:	47b8      	blx	r7
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f43f ae97 	beq.w	80059be <_printf_float+0xc2>
 8005c90:	9a05      	ldr	r2, [sp, #20]
 8005c92:	f10b 0b01 	add.w	fp, fp, #1
 8005c96:	e7b9      	b.n	8005c0c <_printf_float+0x310>
 8005c98:	ee18 3a10 	vmov	r3, s16
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d1be      	bne.n	8005c26 <_printf_float+0x32a>
 8005ca8:	e689      	b.n	80059be <_printf_float+0xc2>
 8005caa:	9a05      	ldr	r2, [sp, #20]
 8005cac:	464b      	mov	r3, r9
 8005cae:	4442      	add	r2, r8
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d1c1      	bne.n	8005c3e <_printf_float+0x342>
 8005cba:	e680      	b.n	80059be <_printf_float+0xc2>
 8005cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	dc01      	bgt.n	8005cc6 <_printf_float+0x3ca>
 8005cc2:	07db      	lsls	r3, r3, #31
 8005cc4:	d538      	bpl.n	8005d38 <_printf_float+0x43c>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4642      	mov	r2, r8
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae74 	beq.w	80059be <_printf_float+0xc2>
 8005cd6:	ee18 3a10 	vmov	r3, s16
 8005cda:	4652      	mov	r2, sl
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	f43f ae6b 	beq.w	80059be <_printf_float+0xc2>
 8005ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cec:	2200      	movs	r2, #0
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f7fa fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cf4:	b9d8      	cbnz	r0, 8005d2e <_printf_float+0x432>
 8005cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf8:	f108 0201 	add.w	r2, r8, #1
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d10e      	bne.n	8005d26 <_printf_float+0x42a>
 8005d08:	e659      	b.n	80059be <_printf_float+0xc2>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	f43f ae52 	beq.w	80059be <_printf_float+0xc2>
 8005d1a:	f108 0801 	add.w	r8, r8, #1
 8005d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4543      	cmp	r3, r8
 8005d24:	dcf1      	bgt.n	8005d0a <_printf_float+0x40e>
 8005d26:	464b      	mov	r3, r9
 8005d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d2c:	e6dc      	b.n	8005ae8 <_printf_float+0x1ec>
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	f104 0a1a 	add.w	sl, r4, #26
 8005d36:	e7f2      	b.n	8005d1e <_printf_float+0x422>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	e7df      	b.n	8005cfe <_printf_float+0x402>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	464a      	mov	r2, r9
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae38 	beq.w	80059be <_printf_float+0xc2>
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d56:	1a5b      	subs	r3, r3, r1
 8005d58:	4543      	cmp	r3, r8
 8005d5a:	dcf0      	bgt.n	8005d3e <_printf_float+0x442>
 8005d5c:	e6fa      	b.n	8005b54 <_printf_float+0x258>
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	f104 0919 	add.w	r9, r4, #25
 8005d66:	e7f4      	b.n	8005d52 <_printf_float+0x456>

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4699      	mov	r9, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfb8      	it	lt
 8005d7c:	4613      	movlt	r3, r2
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d84:	4607      	mov	r7, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc26      	bgt.n	8005dfe <_printf_common+0x96>
 8005db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db4:	1e13      	subs	r3, r2, #0
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42b      	bmi.n	8005e18 <_printf_common+0xb0>
 8005dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d01e      	beq.n	8005e0c <_printf_common+0xa4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	68e5      	ldr	r5, [r4, #12]
 8005dd2:	6832      	ldr	r2, [r6, #0]
 8005dd4:	f003 0306 	and.w	r3, r3, #6
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	bf08      	it	eq
 8005ddc:	1aad      	subeq	r5, r5, r2
 8005dde:	68a3      	ldr	r3, [r4, #8]
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	bf0c      	ite	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	2500      	movne	r5, #0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfc4      	itt	gt
 8005dee:	1a9b      	subgt	r3, r3, r2
 8005df0:	18ed      	addgt	r5, r5, r3
 8005df2:	2600      	movs	r6, #0
 8005df4:	341a      	adds	r4, #26
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d11a      	bne.n	8005e30 <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e008      	b.n	8005e10 <_printf_common+0xa8>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4649      	mov	r1, r9
 8005e04:	4638      	mov	r0, r7
 8005e06:	47c0      	blx	r8
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_printf_common+0xac>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3501      	adds	r5, #1
 8005e16:	e7c6      	b.n	8005da6 <_printf_common+0x3e>
 8005e18:	18e1      	adds	r1, r4, r3
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	2030      	movs	r0, #48	; 0x30
 8005e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e22:	4422      	add	r2, r4
 8005e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	e7c7      	b.n	8005dc0 <_printf_common+0x58>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4622      	mov	r2, r4
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d0e6      	beq.n	8005e0c <_printf_common+0xa4>
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7d9      	b.n	8005df6 <_printf_common+0x8e>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	7e0f      	ldrb	r7, [r1, #24]
 8005e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e4c:	2f78      	cmp	r7, #120	; 0x78
 8005e4e:	4691      	mov	r9, r2
 8005e50:	4680      	mov	r8, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	469a      	mov	sl, r3
 8005e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5a:	d807      	bhi.n	8005e6c <_printf_i+0x28>
 8005e5c:	2f62      	cmp	r7, #98	; 0x62
 8005e5e:	d80a      	bhi.n	8005e76 <_printf_i+0x32>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f000 80d8 	beq.w	8006016 <_printf_i+0x1d2>
 8005e66:	2f58      	cmp	r7, #88	; 0x58
 8005e68:	f000 80a3 	beq.w	8005fb2 <_printf_i+0x16e>
 8005e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e74:	e03a      	b.n	8005eec <_printf_i+0xa8>
 8005e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7a:	2b15      	cmp	r3, #21
 8005e7c:	d8f6      	bhi.n	8005e6c <_printf_i+0x28>
 8005e7e:	a101      	add	r1, pc, #4	; (adr r1, 8005e84 <_printf_i+0x40>)
 8005e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005e6d 	.word	0x08005e6d
 8005e90:	08005e6d 	.word	0x08005e6d
 8005e94:	08005e6d 	.word	0x08005e6d
 8005e98:	08005e6d 	.word	0x08005e6d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e6d 	.word	0x08005e6d
 8005ea4:	08005e6d 	.word	0x08005e6d
 8005ea8:	08005e6d 	.word	0x08005e6d
 8005eac:	08005e6d 	.word	0x08005e6d
 8005eb0:	08005ffd 	.word	0x08005ffd
 8005eb4:	08005f21 	.word	0x08005f21
 8005eb8:	08005fdf 	.word	0x08005fdf
 8005ebc:	08005e6d 	.word	0x08005e6d
 8005ec0:	08005e6d 	.word	0x08005e6d
 8005ec4:	0800601f 	.word	0x0800601f
 8005ec8:	08005e6d 	.word	0x08005e6d
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005e6d 	.word	0x08005e6d
 8005ed4:	08005e6d 	.word	0x08005e6d
 8005ed8:	08005fe7 	.word	0x08005fe7
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	602a      	str	r2, [r5, #0]
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0a3      	b.n	8006038 <_printf_i+0x1f4>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	6829      	ldr	r1, [r5, #0]
 8005ef4:	0606      	lsls	r6, r0, #24
 8005ef6:	f101 0304 	add.w	r3, r1, #4
 8005efa:	d50a      	bpl.n	8005f12 <_printf_i+0xce>
 8005efc:	680e      	ldr	r6, [r1, #0]
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	da03      	bge.n	8005f0c <_printf_i+0xc8>
 8005f04:	232d      	movs	r3, #45	; 0x2d
 8005f06:	4276      	negs	r6, r6
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0c:	485e      	ldr	r0, [pc, #376]	; (8006088 <_printf_i+0x244>)
 8005f0e:	230a      	movs	r3, #10
 8005f10:	e019      	b.n	8005f46 <_printf_i+0x102>
 8005f12:	680e      	ldr	r6, [r1, #0]
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1a:	bf18      	it	ne
 8005f1c:	b236      	sxthne	r6, r6
 8005f1e:	e7ef      	b.n	8005f00 <_printf_i+0xbc>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	6820      	ldr	r0, [r4, #0]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	6029      	str	r1, [r5, #0]
 8005f28:	0601      	lsls	r1, r0, #24
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0xec>
 8005f2c:	681e      	ldr	r6, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0xf2>
 8005f30:	0646      	lsls	r6, r0, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0xe8>
 8005f34:	881e      	ldrh	r6, [r3, #0]
 8005f36:	4854      	ldr	r0, [pc, #336]	; (8006088 <_printf_i+0x244>)
 8005f38:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2308      	moveq	r3, #8
 8005f3e:	230a      	movne	r3, #10
 8005f40:	2100      	movs	r1, #0
 8005f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f46:	6865      	ldr	r5, [r4, #4]
 8005f48:	60a5      	str	r5, [r4, #8]
 8005f4a:	2d00      	cmp	r5, #0
 8005f4c:	bfa2      	ittt	ge
 8005f4e:	6821      	ldrge	r1, [r4, #0]
 8005f50:	f021 0104 	bicge.w	r1, r1, #4
 8005f54:	6021      	strge	r1, [r4, #0]
 8005f56:	b90e      	cbnz	r6, 8005f5c <_printf_i+0x118>
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	d04d      	beq.n	8005ff8 <_printf_i+0x1b4>
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f62:	fb03 6711 	mls	r7, r3, r1, r6
 8005f66:	5dc7      	ldrb	r7, [r0, r7]
 8005f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f6c:	4637      	mov	r7, r6
 8005f6e:	42bb      	cmp	r3, r7
 8005f70:	460e      	mov	r6, r1
 8005f72:	d9f4      	bls.n	8005f5e <_printf_i+0x11a>
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d10b      	bne.n	8005f90 <_printf_i+0x14c>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	07de      	lsls	r6, r3, #31
 8005f7c:	d508      	bpl.n	8005f90 <_printf_i+0x14c>
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	4299      	cmp	r1, r3
 8005f84:	bfde      	ittt	le
 8005f86:	2330      	movle	r3, #48	; 0x30
 8005f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f90:	1b52      	subs	r2, r2, r5
 8005f92:	6122      	str	r2, [r4, #16]
 8005f94:	f8cd a000 	str.w	sl, [sp]
 8005f98:	464b      	mov	r3, r9
 8005f9a:	aa03      	add	r2, sp, #12
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7ff fee2 	bl	8005d68 <_printf_common>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d14c      	bne.n	8006042 <_printf_i+0x1fe>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	b004      	add	sp, #16
 8005fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb2:	4835      	ldr	r0, [pc, #212]	; (8006088 <_printf_i+0x244>)
 8005fb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fb8:	6829      	ldr	r1, [r5, #0]
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc0:	6029      	str	r1, [r5, #0]
 8005fc2:	061d      	lsls	r5, r3, #24
 8005fc4:	d514      	bpl.n	8005ff0 <_printf_i+0x1ac>
 8005fc6:	07df      	lsls	r7, r3, #31
 8005fc8:	bf44      	itt	mi
 8005fca:	f043 0320 	orrmi.w	r3, r3, #32
 8005fce:	6023      	strmi	r3, [r4, #0]
 8005fd0:	b91e      	cbnz	r6, 8005fda <_printf_i+0x196>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f023 0320 	bic.w	r3, r3, #32
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2310      	movs	r3, #16
 8005fdc:	e7b0      	b.n	8005f40 <_printf_i+0xfc>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f043 0320 	orr.w	r3, r3, #32
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	2378      	movs	r3, #120	; 0x78
 8005fe8:	4828      	ldr	r0, [pc, #160]	; (800608c <_printf_i+0x248>)
 8005fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fee:	e7e3      	b.n	8005fb8 <_printf_i+0x174>
 8005ff0:	0659      	lsls	r1, r3, #25
 8005ff2:	bf48      	it	mi
 8005ff4:	b2b6      	uxthmi	r6, r6
 8005ff6:	e7e6      	b.n	8005fc6 <_printf_i+0x182>
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	e7bb      	b.n	8005f74 <_printf_i+0x130>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	6826      	ldr	r6, [r4, #0]
 8006000:	6961      	ldr	r1, [r4, #20]
 8006002:	1d18      	adds	r0, r3, #4
 8006004:	6028      	str	r0, [r5, #0]
 8006006:	0635      	lsls	r5, r6, #24
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	d501      	bpl.n	8006010 <_printf_i+0x1cc>
 800600c:	6019      	str	r1, [r3, #0]
 800600e:	e002      	b.n	8006016 <_printf_i+0x1d2>
 8006010:	0670      	lsls	r0, r6, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0x1c8>
 8006014:	8019      	strh	r1, [r3, #0]
 8006016:	2300      	movs	r3, #0
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	4615      	mov	r5, r2
 800601c:	e7ba      	b.n	8005f94 <_printf_i+0x150>
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	1d1a      	adds	r2, r3, #4
 8006022:	602a      	str	r2, [r5, #0]
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	2100      	movs	r1, #0
 800602a:	4628      	mov	r0, r5
 800602c:	f7fa f8e0 	bl	80001f0 <memchr>
 8006030:	b108      	cbz	r0, 8006036 <_printf_i+0x1f2>
 8006032:	1b40      	subs	r0, r0, r5
 8006034:	6060      	str	r0, [r4, #4]
 8006036:	6863      	ldr	r3, [r4, #4]
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	2300      	movs	r3, #0
 800603c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006040:	e7a8      	b.n	8005f94 <_printf_i+0x150>
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	462a      	mov	r2, r5
 8006046:	4649      	mov	r1, r9
 8006048:	4640      	mov	r0, r8
 800604a:	47d0      	blx	sl
 800604c:	3001      	adds	r0, #1
 800604e:	d0ab      	beq.n	8005fa8 <_printf_i+0x164>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	079b      	lsls	r3, r3, #30
 8006054:	d413      	bmi.n	800607e <_printf_i+0x23a>
 8006056:	68e0      	ldr	r0, [r4, #12]
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	4298      	cmp	r0, r3
 800605c:	bfb8      	it	lt
 800605e:	4618      	movlt	r0, r3
 8006060:	e7a4      	b.n	8005fac <_printf_i+0x168>
 8006062:	2301      	movs	r3, #1
 8006064:	4632      	mov	r2, r6
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	47d0      	blx	sl
 800606c:	3001      	adds	r0, #1
 800606e:	d09b      	beq.n	8005fa8 <_printf_i+0x164>
 8006070:	3501      	adds	r5, #1
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	9903      	ldr	r1, [sp, #12]
 8006076:	1a5b      	subs	r3, r3, r1
 8006078:	42ab      	cmp	r3, r5
 800607a:	dcf2      	bgt.n	8006062 <_printf_i+0x21e>
 800607c:	e7eb      	b.n	8006056 <_printf_i+0x212>
 800607e:	2500      	movs	r5, #0
 8006080:	f104 0619 	add.w	r6, r4, #25
 8006084:	e7f5      	b.n	8006072 <_printf_i+0x22e>
 8006086:	bf00      	nop
 8006088:	08008436 	.word	0x08008436
 800608c:	08008447 	.word	0x08008447

08006090 <iprintf>:
 8006090:	b40f      	push	{r0, r1, r2, r3}
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <iprintf+0x2c>)
 8006094:	b513      	push	{r0, r1, r4, lr}
 8006096:	681c      	ldr	r4, [r3, #0]
 8006098:	b124      	cbz	r4, 80060a4 <iprintf+0x14>
 800609a:	69a3      	ldr	r3, [r4, #24]
 800609c:	b913      	cbnz	r3, 80060a4 <iprintf+0x14>
 800609e:	4620      	mov	r0, r4
 80060a0:	f001 f8da 	bl	8007258 <__sinit>
 80060a4:	ab05      	add	r3, sp, #20
 80060a6:	9a04      	ldr	r2, [sp, #16]
 80060a8:	68a1      	ldr	r1, [r4, #8]
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	4620      	mov	r0, r4
 80060ae:	f001 fe89 	bl	8007dc4 <_vfiprintf_r>
 80060b2:	b002      	add	sp, #8
 80060b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b8:	b004      	add	sp, #16
 80060ba:	4770      	bx	lr
 80060bc:	2000000c 	.word	0x2000000c

080060c0 <_puts_r>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	460e      	mov	r6, r1
 80060c4:	4605      	mov	r5, r0
 80060c6:	b118      	cbz	r0, 80060d0 <_puts_r+0x10>
 80060c8:	6983      	ldr	r3, [r0, #24]
 80060ca:	b90b      	cbnz	r3, 80060d0 <_puts_r+0x10>
 80060cc:	f001 f8c4 	bl	8007258 <__sinit>
 80060d0:	69ab      	ldr	r3, [r5, #24]
 80060d2:	68ac      	ldr	r4, [r5, #8]
 80060d4:	b913      	cbnz	r3, 80060dc <_puts_r+0x1c>
 80060d6:	4628      	mov	r0, r5
 80060d8:	f001 f8be 	bl	8007258 <__sinit>
 80060dc:	4b2c      	ldr	r3, [pc, #176]	; (8006190 <_puts_r+0xd0>)
 80060de:	429c      	cmp	r4, r3
 80060e0:	d120      	bne.n	8006124 <_puts_r+0x64>
 80060e2:	686c      	ldr	r4, [r5, #4]
 80060e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e6:	07db      	lsls	r3, r3, #31
 80060e8:	d405      	bmi.n	80060f6 <_puts_r+0x36>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	0598      	lsls	r0, r3, #22
 80060ee:	d402      	bmi.n	80060f6 <_puts_r+0x36>
 80060f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f2:	f001 f954 	bl	800739e <__retarget_lock_acquire_recursive>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	0719      	lsls	r1, r3, #28
 80060fa:	d51d      	bpl.n	8006138 <_puts_r+0x78>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	b1db      	cbz	r3, 8006138 <_puts_r+0x78>
 8006100:	3e01      	subs	r6, #1
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006108:	3b01      	subs	r3, #1
 800610a:	60a3      	str	r3, [r4, #8]
 800610c:	bb39      	cbnz	r1, 800615e <_puts_r+0x9e>
 800610e:	2b00      	cmp	r3, #0
 8006110:	da38      	bge.n	8006184 <_puts_r+0xc4>
 8006112:	4622      	mov	r2, r4
 8006114:	210a      	movs	r1, #10
 8006116:	4628      	mov	r0, r5
 8006118:	f000 f848 	bl	80061ac <__swbuf_r>
 800611c:	3001      	adds	r0, #1
 800611e:	d011      	beq.n	8006144 <_puts_r+0x84>
 8006120:	250a      	movs	r5, #10
 8006122:	e011      	b.n	8006148 <_puts_r+0x88>
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <_puts_r+0xd4>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d101      	bne.n	800612e <_puts_r+0x6e>
 800612a:	68ac      	ldr	r4, [r5, #8]
 800612c:	e7da      	b.n	80060e4 <_puts_r+0x24>
 800612e:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <_puts_r+0xd8>)
 8006130:	429c      	cmp	r4, r3
 8006132:	bf08      	it	eq
 8006134:	68ec      	ldreq	r4, [r5, #12]
 8006136:	e7d5      	b.n	80060e4 <_puts_r+0x24>
 8006138:	4621      	mov	r1, r4
 800613a:	4628      	mov	r0, r5
 800613c:	f000 f888 	bl	8006250 <__swsetup_r>
 8006140:	2800      	cmp	r0, #0
 8006142:	d0dd      	beq.n	8006100 <_puts_r+0x40>
 8006144:	f04f 35ff 	mov.w	r5, #4294967295
 8006148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800614a:	07da      	lsls	r2, r3, #31
 800614c:	d405      	bmi.n	800615a <_puts_r+0x9a>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	059b      	lsls	r3, r3, #22
 8006152:	d402      	bmi.n	800615a <_puts_r+0x9a>
 8006154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006156:	f001 f923 	bl	80073a0 <__retarget_lock_release_recursive>
 800615a:	4628      	mov	r0, r5
 800615c:	bd70      	pop	{r4, r5, r6, pc}
 800615e:	2b00      	cmp	r3, #0
 8006160:	da04      	bge.n	800616c <_puts_r+0xac>
 8006162:	69a2      	ldr	r2, [r4, #24]
 8006164:	429a      	cmp	r2, r3
 8006166:	dc06      	bgt.n	8006176 <_puts_r+0xb6>
 8006168:	290a      	cmp	r1, #10
 800616a:	d004      	beq.n	8006176 <_puts_r+0xb6>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	6022      	str	r2, [r4, #0]
 8006172:	7019      	strb	r1, [r3, #0]
 8006174:	e7c5      	b.n	8006102 <_puts_r+0x42>
 8006176:	4622      	mov	r2, r4
 8006178:	4628      	mov	r0, r5
 800617a:	f000 f817 	bl	80061ac <__swbuf_r>
 800617e:	3001      	adds	r0, #1
 8006180:	d1bf      	bne.n	8006102 <_puts_r+0x42>
 8006182:	e7df      	b.n	8006144 <_puts_r+0x84>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	250a      	movs	r5, #10
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	701d      	strb	r5, [r3, #0]
 800618e:	e7db      	b.n	8006148 <_puts_r+0x88>
 8006190:	08008508 	.word	0x08008508
 8006194:	08008528 	.word	0x08008528
 8006198:	080084e8 	.word	0x080084e8

0800619c <puts>:
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <puts+0xc>)
 800619e:	4601      	mov	r1, r0
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	f7ff bf8d 	b.w	80060c0 <_puts_r>
 80061a6:	bf00      	nop
 80061a8:	2000000c 	.word	0x2000000c

080061ac <__swbuf_r>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	460e      	mov	r6, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	4605      	mov	r5, r0
 80061b4:	b118      	cbz	r0, 80061be <__swbuf_r+0x12>
 80061b6:	6983      	ldr	r3, [r0, #24]
 80061b8:	b90b      	cbnz	r3, 80061be <__swbuf_r+0x12>
 80061ba:	f001 f84d 	bl	8007258 <__sinit>
 80061be:	4b21      	ldr	r3, [pc, #132]	; (8006244 <__swbuf_r+0x98>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	d12b      	bne.n	800621c <__swbuf_r+0x70>
 80061c4:	686c      	ldr	r4, [r5, #4]
 80061c6:	69a3      	ldr	r3, [r4, #24]
 80061c8:	60a3      	str	r3, [r4, #8]
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	071a      	lsls	r2, r3, #28
 80061ce:	d52f      	bpl.n	8006230 <__swbuf_r+0x84>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	b36b      	cbz	r3, 8006230 <__swbuf_r+0x84>
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	1ac0      	subs	r0, r0, r3
 80061da:	6963      	ldr	r3, [r4, #20]
 80061dc:	b2f6      	uxtb	r6, r6
 80061de:	4283      	cmp	r3, r0
 80061e0:	4637      	mov	r7, r6
 80061e2:	dc04      	bgt.n	80061ee <__swbuf_r+0x42>
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 ffa2 	bl	8007130 <_fflush_r>
 80061ec:	bb30      	cbnz	r0, 800623c <__swbuf_r+0x90>
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	60a3      	str	r3, [r4, #8]
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	701e      	strb	r6, [r3, #0]
 80061fc:	6963      	ldr	r3, [r4, #20]
 80061fe:	3001      	adds	r0, #1
 8006200:	4283      	cmp	r3, r0
 8006202:	d004      	beq.n	800620e <__swbuf_r+0x62>
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	07db      	lsls	r3, r3, #31
 8006208:	d506      	bpl.n	8006218 <__swbuf_r+0x6c>
 800620a:	2e0a      	cmp	r6, #10
 800620c:	d104      	bne.n	8006218 <__swbuf_r+0x6c>
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 ff8d 	bl	8007130 <_fflush_r>
 8006216:	b988      	cbnz	r0, 800623c <__swbuf_r+0x90>
 8006218:	4638      	mov	r0, r7
 800621a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <__swbuf_r+0x9c>)
 800621e:	429c      	cmp	r4, r3
 8006220:	d101      	bne.n	8006226 <__swbuf_r+0x7a>
 8006222:	68ac      	ldr	r4, [r5, #8]
 8006224:	e7cf      	b.n	80061c6 <__swbuf_r+0x1a>
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <__swbuf_r+0xa0>)
 8006228:	429c      	cmp	r4, r3
 800622a:	bf08      	it	eq
 800622c:	68ec      	ldreq	r4, [r5, #12]
 800622e:	e7ca      	b.n	80061c6 <__swbuf_r+0x1a>
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	f000 f80c 	bl	8006250 <__swsetup_r>
 8006238:	2800      	cmp	r0, #0
 800623a:	d0cb      	beq.n	80061d4 <__swbuf_r+0x28>
 800623c:	f04f 37ff 	mov.w	r7, #4294967295
 8006240:	e7ea      	b.n	8006218 <__swbuf_r+0x6c>
 8006242:	bf00      	nop
 8006244:	08008508 	.word	0x08008508
 8006248:	08008528 	.word	0x08008528
 800624c:	080084e8 	.word	0x080084e8

08006250 <__swsetup_r>:
 8006250:	4b32      	ldr	r3, [pc, #200]	; (800631c <__swsetup_r+0xcc>)
 8006252:	b570      	push	{r4, r5, r6, lr}
 8006254:	681d      	ldr	r5, [r3, #0]
 8006256:	4606      	mov	r6, r0
 8006258:	460c      	mov	r4, r1
 800625a:	b125      	cbz	r5, 8006266 <__swsetup_r+0x16>
 800625c:	69ab      	ldr	r3, [r5, #24]
 800625e:	b913      	cbnz	r3, 8006266 <__swsetup_r+0x16>
 8006260:	4628      	mov	r0, r5
 8006262:	f000 fff9 	bl	8007258 <__sinit>
 8006266:	4b2e      	ldr	r3, [pc, #184]	; (8006320 <__swsetup_r+0xd0>)
 8006268:	429c      	cmp	r4, r3
 800626a:	d10f      	bne.n	800628c <__swsetup_r+0x3c>
 800626c:	686c      	ldr	r4, [r5, #4]
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006274:	0719      	lsls	r1, r3, #28
 8006276:	d42c      	bmi.n	80062d2 <__swsetup_r+0x82>
 8006278:	06dd      	lsls	r5, r3, #27
 800627a:	d411      	bmi.n	80062a0 <__swsetup_r+0x50>
 800627c:	2309      	movs	r3, #9
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	e03e      	b.n	800630a <__swsetup_r+0xba>
 800628c:	4b25      	ldr	r3, [pc, #148]	; (8006324 <__swsetup_r+0xd4>)
 800628e:	429c      	cmp	r4, r3
 8006290:	d101      	bne.n	8006296 <__swsetup_r+0x46>
 8006292:	68ac      	ldr	r4, [r5, #8]
 8006294:	e7eb      	b.n	800626e <__swsetup_r+0x1e>
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <__swsetup_r+0xd8>)
 8006298:	429c      	cmp	r4, r3
 800629a:	bf08      	it	eq
 800629c:	68ec      	ldreq	r4, [r5, #12]
 800629e:	e7e6      	b.n	800626e <__swsetup_r+0x1e>
 80062a0:	0758      	lsls	r0, r3, #29
 80062a2:	d512      	bpl.n	80062ca <__swsetup_r+0x7a>
 80062a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a6:	b141      	cbz	r1, 80062ba <__swsetup_r+0x6a>
 80062a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062ac:	4299      	cmp	r1, r3
 80062ae:	d002      	beq.n	80062b6 <__swsetup_r+0x66>
 80062b0:	4630      	mov	r0, r6
 80062b2:	f001 fc7d 	bl	8007bb0 <_free_r>
 80062b6:	2300      	movs	r3, #0
 80062b8:	6363      	str	r3, [r4, #52]	; 0x34
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	2300      	movs	r3, #0
 80062c4:	6063      	str	r3, [r4, #4]
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	f043 0308 	orr.w	r3, r3, #8
 80062d0:	81a3      	strh	r3, [r4, #12]
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	b94b      	cbnz	r3, 80062ea <__swsetup_r+0x9a>
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d003      	beq.n	80062ea <__swsetup_r+0x9a>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4630      	mov	r0, r6
 80062e6:	f001 f881 	bl	80073ec <__smakebuf_r>
 80062ea:	89a0      	ldrh	r0, [r4, #12]
 80062ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062f0:	f010 0301 	ands.w	r3, r0, #1
 80062f4:	d00a      	beq.n	800630c <__swsetup_r+0xbc>
 80062f6:	2300      	movs	r3, #0
 80062f8:	60a3      	str	r3, [r4, #8]
 80062fa:	6963      	ldr	r3, [r4, #20]
 80062fc:	425b      	negs	r3, r3
 80062fe:	61a3      	str	r3, [r4, #24]
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	b943      	cbnz	r3, 8006316 <__swsetup_r+0xc6>
 8006304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006308:	d1ba      	bne.n	8006280 <__swsetup_r+0x30>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	0781      	lsls	r1, r0, #30
 800630e:	bf58      	it	pl
 8006310:	6963      	ldrpl	r3, [r4, #20]
 8006312:	60a3      	str	r3, [r4, #8]
 8006314:	e7f4      	b.n	8006300 <__swsetup_r+0xb0>
 8006316:	2000      	movs	r0, #0
 8006318:	e7f7      	b.n	800630a <__swsetup_r+0xba>
 800631a:	bf00      	nop
 800631c:	2000000c 	.word	0x2000000c
 8006320:	08008508 	.word	0x08008508
 8006324:	08008528 	.word	0x08008528
 8006328:	080084e8 	.word	0x080084e8

0800632c <quorem>:
 800632c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	6903      	ldr	r3, [r0, #16]
 8006332:	690c      	ldr	r4, [r1, #16]
 8006334:	42a3      	cmp	r3, r4
 8006336:	4607      	mov	r7, r0
 8006338:	f2c0 8081 	blt.w	800643e <quorem+0x112>
 800633c:	3c01      	subs	r4, #1
 800633e:	f101 0814 	add.w	r8, r1, #20
 8006342:	f100 0514 	add.w	r5, r0, #20
 8006346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006354:	3301      	adds	r3, #1
 8006356:	429a      	cmp	r2, r3
 8006358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800635c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006360:	fbb2 f6f3 	udiv	r6, r2, r3
 8006364:	d331      	bcc.n	80063ca <quorem+0x9e>
 8006366:	f04f 0e00 	mov.w	lr, #0
 800636a:	4640      	mov	r0, r8
 800636c:	46ac      	mov	ip, r5
 800636e:	46f2      	mov	sl, lr
 8006370:	f850 2b04 	ldr.w	r2, [r0], #4
 8006374:	b293      	uxth	r3, r2
 8006376:	fb06 e303 	mla	r3, r6, r3, lr
 800637a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800637e:	b29b      	uxth	r3, r3
 8006380:	ebaa 0303 	sub.w	r3, sl, r3
 8006384:	f8dc a000 	ldr.w	sl, [ip]
 8006388:	0c12      	lsrs	r2, r2, #16
 800638a:	fa13 f38a 	uxtah	r3, r3, sl
 800638e:	fb06 e202 	mla	r2, r6, r2, lr
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	9b00      	ldr	r3, [sp, #0]
 8006396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800639a:	b292      	uxth	r2, r2
 800639c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80063a8:	4581      	cmp	r9, r0
 80063aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ae:	f84c 3b04 	str.w	r3, [ip], #4
 80063b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063b6:	d2db      	bcs.n	8006370 <quorem+0x44>
 80063b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80063bc:	b92b      	cbnz	r3, 80063ca <quorem+0x9e>
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	3b04      	subs	r3, #4
 80063c2:	429d      	cmp	r5, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	d32e      	bcc.n	8006426 <quorem+0xfa>
 80063c8:	613c      	str	r4, [r7, #16]
 80063ca:	4638      	mov	r0, r7
 80063cc:	f001 fad8 	bl	8007980 <__mcmp>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	db24      	blt.n	800641e <quorem+0xf2>
 80063d4:	3601      	adds	r6, #1
 80063d6:	4628      	mov	r0, r5
 80063d8:	f04f 0c00 	mov.w	ip, #0
 80063dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80063e0:	f8d0 e000 	ldr.w	lr, [r0]
 80063e4:	b293      	uxth	r3, r2
 80063e6:	ebac 0303 	sub.w	r3, ip, r3
 80063ea:	0c12      	lsrs	r2, r2, #16
 80063ec:	fa13 f38e 	uxtah	r3, r3, lr
 80063f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fe:	45c1      	cmp	r9, r8
 8006400:	f840 3b04 	str.w	r3, [r0], #4
 8006404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006408:	d2e8      	bcs.n	80063dc <quorem+0xb0>
 800640a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800640e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006412:	b922      	cbnz	r2, 800641e <quorem+0xf2>
 8006414:	3b04      	subs	r3, #4
 8006416:	429d      	cmp	r5, r3
 8006418:	461a      	mov	r2, r3
 800641a:	d30a      	bcc.n	8006432 <quorem+0x106>
 800641c:	613c      	str	r4, [r7, #16]
 800641e:	4630      	mov	r0, r6
 8006420:	b003      	add	sp, #12
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	3b04      	subs	r3, #4
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1cc      	bne.n	80063c8 <quorem+0x9c>
 800642e:	3c01      	subs	r4, #1
 8006430:	e7c7      	b.n	80063c2 <quorem+0x96>
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	3b04      	subs	r3, #4
 8006436:	2a00      	cmp	r2, #0
 8006438:	d1f0      	bne.n	800641c <quorem+0xf0>
 800643a:	3c01      	subs	r4, #1
 800643c:	e7eb      	b.n	8006416 <quorem+0xea>
 800643e:	2000      	movs	r0, #0
 8006440:	e7ee      	b.n	8006420 <quorem+0xf4>
 8006442:	0000      	movs	r0, r0
 8006444:	0000      	movs	r0, r0
	...

08006448 <_dtoa_r>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	ed2d 8b04 	vpush	{d8-d9}
 8006450:	ec57 6b10 	vmov	r6, r7, d0
 8006454:	b093      	sub	sp, #76	; 0x4c
 8006456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800645c:	9106      	str	r1, [sp, #24]
 800645e:	ee10 aa10 	vmov	sl, s0
 8006462:	4604      	mov	r4, r0
 8006464:	9209      	str	r2, [sp, #36]	; 0x24
 8006466:	930c      	str	r3, [sp, #48]	; 0x30
 8006468:	46bb      	mov	fp, r7
 800646a:	b975      	cbnz	r5, 800648a <_dtoa_r+0x42>
 800646c:	2010      	movs	r0, #16
 800646e:	f000 fffd 	bl	800746c <malloc>
 8006472:	4602      	mov	r2, r0
 8006474:	6260      	str	r0, [r4, #36]	; 0x24
 8006476:	b920      	cbnz	r0, 8006482 <_dtoa_r+0x3a>
 8006478:	4ba7      	ldr	r3, [pc, #668]	; (8006718 <_dtoa_r+0x2d0>)
 800647a:	21ea      	movs	r1, #234	; 0xea
 800647c:	48a7      	ldr	r0, [pc, #668]	; (800671c <_dtoa_r+0x2d4>)
 800647e:	f001 fe37 	bl	80080f0 <__assert_func>
 8006482:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006486:	6005      	str	r5, [r0, #0]
 8006488:	60c5      	str	r5, [r0, #12]
 800648a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648c:	6819      	ldr	r1, [r3, #0]
 800648e:	b151      	cbz	r1, 80064a6 <_dtoa_r+0x5e>
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	604a      	str	r2, [r1, #4]
 8006494:	2301      	movs	r3, #1
 8006496:	4093      	lsls	r3, r2
 8006498:	608b      	str	r3, [r1, #8]
 800649a:	4620      	mov	r0, r4
 800649c:	f001 f82e 	bl	80074fc <_Bfree>
 80064a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	1e3b      	subs	r3, r7, #0
 80064a8:	bfaa      	itet	ge
 80064aa:	2300      	movge	r3, #0
 80064ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064b0:	f8c8 3000 	strge.w	r3, [r8]
 80064b4:	4b9a      	ldr	r3, [pc, #616]	; (8006720 <_dtoa_r+0x2d8>)
 80064b6:	bfbc      	itt	lt
 80064b8:	2201      	movlt	r2, #1
 80064ba:	f8c8 2000 	strlt.w	r2, [r8]
 80064be:	ea33 030b 	bics.w	r3, r3, fp
 80064c2:	d11b      	bne.n	80064fc <_dtoa_r+0xb4>
 80064c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064d0:	4333      	orrs	r3, r6
 80064d2:	f000 8592 	beq.w	8006ffa <_dtoa_r+0xbb2>
 80064d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064d8:	b963      	cbnz	r3, 80064f4 <_dtoa_r+0xac>
 80064da:	4b92      	ldr	r3, [pc, #584]	; (8006724 <_dtoa_r+0x2dc>)
 80064dc:	e022      	b.n	8006524 <_dtoa_r+0xdc>
 80064de:	4b92      	ldr	r3, [pc, #584]	; (8006728 <_dtoa_r+0x2e0>)
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	3308      	adds	r3, #8
 80064e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	9801      	ldr	r0, [sp, #4]
 80064ea:	b013      	add	sp, #76	; 0x4c
 80064ec:	ecbd 8b04 	vpop	{d8-d9}
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	4b8b      	ldr	r3, [pc, #556]	; (8006724 <_dtoa_r+0x2dc>)
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	3303      	adds	r3, #3
 80064fa:	e7f3      	b.n	80064e4 <_dtoa_r+0x9c>
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	4650      	mov	r0, sl
 8006502:	4659      	mov	r1, fp
 8006504:	f7fa fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006508:	ec4b ab19 	vmov	d9, sl, fp
 800650c:	4680      	mov	r8, r0
 800650e:	b158      	cbz	r0, 8006528 <_dtoa_r+0xe0>
 8006510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006512:	2301      	movs	r3, #1
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 856b 	beq.w	8006ff4 <_dtoa_r+0xbac>
 800651e:	4883      	ldr	r0, [pc, #524]	; (800672c <_dtoa_r+0x2e4>)
 8006520:	6018      	str	r0, [r3, #0]
 8006522:	1e43      	subs	r3, r0, #1
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	e7df      	b.n	80064e8 <_dtoa_r+0xa0>
 8006528:	ec4b ab10 	vmov	d0, sl, fp
 800652c:	aa10      	add	r2, sp, #64	; 0x40
 800652e:	a911      	add	r1, sp, #68	; 0x44
 8006530:	4620      	mov	r0, r4
 8006532:	f001 facb 	bl	8007acc <__d2b>
 8006536:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800653a:	ee08 0a10 	vmov	s16, r0
 800653e:	2d00      	cmp	r5, #0
 8006540:	f000 8084 	beq.w	800664c <_dtoa_r+0x204>
 8006544:	ee19 3a90 	vmov	r3, s19
 8006548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800654c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006550:	4656      	mov	r6, sl
 8006552:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800655a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800655e:	4b74      	ldr	r3, [pc, #464]	; (8006730 <_dtoa_r+0x2e8>)
 8006560:	2200      	movs	r2, #0
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7f9 fe97 	bl	8000298 <__aeabi_dsub>
 800656a:	a365      	add	r3, pc, #404	; (adr r3, 8006700 <_dtoa_r+0x2b8>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7fa f84a 	bl	8000608 <__aeabi_dmul>
 8006574:	a364      	add	r3, pc, #400	; (adr r3, 8006708 <_dtoa_r+0x2c0>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7f9 fe8f 	bl	800029c <__adddf3>
 800657e:	4606      	mov	r6, r0
 8006580:	4628      	mov	r0, r5
 8006582:	460f      	mov	r7, r1
 8006584:	f7f9 ffd6 	bl	8000534 <__aeabi_i2d>
 8006588:	a361      	add	r3, pc, #388	; (adr r3, 8006710 <_dtoa_r+0x2c8>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f7fa f83b 	bl	8000608 <__aeabi_dmul>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4630      	mov	r0, r6
 8006598:	4639      	mov	r1, r7
 800659a:	f7f9 fe7f 	bl	800029c <__adddf3>
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	f7fa fae1 	bl	8000b68 <__aeabi_d2iz>
 80065a6:	2200      	movs	r2, #0
 80065a8:	9000      	str	r0, [sp, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	4630      	mov	r0, r6
 80065ae:	4639      	mov	r1, r7
 80065b0:	f7fa fa9c 	bl	8000aec <__aeabi_dcmplt>
 80065b4:	b150      	cbz	r0, 80065cc <_dtoa_r+0x184>
 80065b6:	9800      	ldr	r0, [sp, #0]
 80065b8:	f7f9 ffbc 	bl	8000534 <__aeabi_i2d>
 80065bc:	4632      	mov	r2, r6
 80065be:	463b      	mov	r3, r7
 80065c0:	f7fa fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c4:	b910      	cbnz	r0, 80065cc <_dtoa_r+0x184>
 80065c6:	9b00      	ldr	r3, [sp, #0]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	9b00      	ldr	r3, [sp, #0]
 80065ce:	2b16      	cmp	r3, #22
 80065d0:	d85a      	bhi.n	8006688 <_dtoa_r+0x240>
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	4b57      	ldr	r3, [pc, #348]	; (8006734 <_dtoa_r+0x2ec>)
 80065d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	ec51 0b19 	vmov	r0, r1, d9
 80065e2:	f7fa fa83 	bl	8000aec <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d050      	beq.n	800668c <_dtoa_r+0x244>
 80065ea:	9b00      	ldr	r3, [sp, #0]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2300      	movs	r3, #0
 80065f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065f6:	1b5d      	subs	r5, r3, r5
 80065f8:	1e6b      	subs	r3, r5, #1
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	bf45      	ittet	mi
 80065fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006602:	9304      	strmi	r3, [sp, #16]
 8006604:	2300      	movpl	r3, #0
 8006606:	2300      	movmi	r3, #0
 8006608:	bf4c      	ite	mi
 800660a:	9305      	strmi	r3, [sp, #20]
 800660c:	9304      	strpl	r3, [sp, #16]
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	db3d      	blt.n	8006690 <_dtoa_r+0x248>
 8006614:	9b05      	ldr	r3, [sp, #20]
 8006616:	9a00      	ldr	r2, [sp, #0]
 8006618:	920a      	str	r2, [sp, #40]	; 0x28
 800661a:	4413      	add	r3, r2
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	2300      	movs	r3, #0
 8006620:	9307      	str	r3, [sp, #28]
 8006622:	9b06      	ldr	r3, [sp, #24]
 8006624:	2b09      	cmp	r3, #9
 8006626:	f200 8089 	bhi.w	800673c <_dtoa_r+0x2f4>
 800662a:	2b05      	cmp	r3, #5
 800662c:	bfc4      	itt	gt
 800662e:	3b04      	subgt	r3, #4
 8006630:	9306      	strgt	r3, [sp, #24]
 8006632:	9b06      	ldr	r3, [sp, #24]
 8006634:	f1a3 0302 	sub.w	r3, r3, #2
 8006638:	bfcc      	ite	gt
 800663a:	2500      	movgt	r5, #0
 800663c:	2501      	movle	r5, #1
 800663e:	2b03      	cmp	r3, #3
 8006640:	f200 8087 	bhi.w	8006752 <_dtoa_r+0x30a>
 8006644:	e8df f003 	tbb	[pc, r3]
 8006648:	59383a2d 	.word	0x59383a2d
 800664c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006650:	441d      	add	r5, r3
 8006652:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006656:	2b20      	cmp	r3, #32
 8006658:	bfc1      	itttt	gt
 800665a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800665e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006662:	fa0b f303 	lslgt.w	r3, fp, r3
 8006666:	fa26 f000 	lsrgt.w	r0, r6, r0
 800666a:	bfda      	itte	le
 800666c:	f1c3 0320 	rsble	r3, r3, #32
 8006670:	fa06 f003 	lslle.w	r0, r6, r3
 8006674:	4318      	orrgt	r0, r3
 8006676:	f7f9 ff4d 	bl	8000514 <__aeabi_ui2d>
 800667a:	2301      	movs	r3, #1
 800667c:	4606      	mov	r6, r0
 800667e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006682:	3d01      	subs	r5, #1
 8006684:	930e      	str	r3, [sp, #56]	; 0x38
 8006686:	e76a      	b.n	800655e <_dtoa_r+0x116>
 8006688:	2301      	movs	r3, #1
 800668a:	e7b2      	b.n	80065f2 <_dtoa_r+0x1aa>
 800668c:	900b      	str	r0, [sp, #44]	; 0x2c
 800668e:	e7b1      	b.n	80065f4 <_dtoa_r+0x1ac>
 8006690:	9b04      	ldr	r3, [sp, #16]
 8006692:	9a00      	ldr	r2, [sp, #0]
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	4253      	negs	r3, r2
 800669a:	9307      	str	r3, [sp, #28]
 800669c:	2300      	movs	r3, #0
 800669e:	930a      	str	r3, [sp, #40]	; 0x28
 80066a0:	e7bf      	b.n	8006622 <_dtoa_r+0x1da>
 80066a2:	2300      	movs	r3, #0
 80066a4:	9308      	str	r3, [sp, #32]
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	dc55      	bgt.n	8006758 <_dtoa_r+0x310>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066b2:	461a      	mov	r2, r3
 80066b4:	9209      	str	r2, [sp, #36]	; 0x24
 80066b6:	e00c      	b.n	80066d2 <_dtoa_r+0x28a>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e7f3      	b.n	80066a4 <_dtoa_r+0x25c>
 80066bc:	2300      	movs	r3, #0
 80066be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c0:	9308      	str	r3, [sp, #32]
 80066c2:	9b00      	ldr	r3, [sp, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	3301      	adds	r3, #1
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	bfb8      	it	lt
 80066d0:	2301      	movlt	r3, #1
 80066d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066d4:	2200      	movs	r2, #0
 80066d6:	6042      	str	r2, [r0, #4]
 80066d8:	2204      	movs	r2, #4
 80066da:	f102 0614 	add.w	r6, r2, #20
 80066de:	429e      	cmp	r6, r3
 80066e0:	6841      	ldr	r1, [r0, #4]
 80066e2:	d93d      	bls.n	8006760 <_dtoa_r+0x318>
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fec9 	bl	800747c <_Balloc>
 80066ea:	9001      	str	r0, [sp, #4]
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d13b      	bne.n	8006768 <_dtoa_r+0x320>
 80066f0:	4b11      	ldr	r3, [pc, #68]	; (8006738 <_dtoa_r+0x2f0>)
 80066f2:	4602      	mov	r2, r0
 80066f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066f8:	e6c0      	b.n	800647c <_dtoa_r+0x34>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e7df      	b.n	80066be <_dtoa_r+0x276>
 80066fe:	bf00      	nop
 8006700:	636f4361 	.word	0x636f4361
 8006704:	3fd287a7 	.word	0x3fd287a7
 8006708:	8b60c8b3 	.word	0x8b60c8b3
 800670c:	3fc68a28 	.word	0x3fc68a28
 8006710:	509f79fb 	.word	0x509f79fb
 8006714:	3fd34413 	.word	0x3fd34413
 8006718:	08008465 	.word	0x08008465
 800671c:	0800847c 	.word	0x0800847c
 8006720:	7ff00000 	.word	0x7ff00000
 8006724:	08008461 	.word	0x08008461
 8006728:	08008458 	.word	0x08008458
 800672c:	08008435 	.word	0x08008435
 8006730:	3ff80000 	.word	0x3ff80000
 8006734:	080085d0 	.word	0x080085d0
 8006738:	080084d7 	.word	0x080084d7
 800673c:	2501      	movs	r5, #1
 800673e:	2300      	movs	r3, #0
 8006740:	9306      	str	r3, [sp, #24]
 8006742:	9508      	str	r5, [sp, #32]
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	2312      	movs	r3, #18
 8006750:	e7b0      	b.n	80066b4 <_dtoa_r+0x26c>
 8006752:	2301      	movs	r3, #1
 8006754:	9308      	str	r3, [sp, #32]
 8006756:	e7f5      	b.n	8006744 <_dtoa_r+0x2fc>
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800675e:	e7b8      	b.n	80066d2 <_dtoa_r+0x28a>
 8006760:	3101      	adds	r1, #1
 8006762:	6041      	str	r1, [r0, #4]
 8006764:	0052      	lsls	r2, r2, #1
 8006766:	e7b8      	b.n	80066da <_dtoa_r+0x292>
 8006768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800676a:	9a01      	ldr	r2, [sp, #4]
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	2b0e      	cmp	r3, #14
 8006772:	f200 809d 	bhi.w	80068b0 <_dtoa_r+0x468>
 8006776:	2d00      	cmp	r5, #0
 8006778:	f000 809a 	beq.w	80068b0 <_dtoa_r+0x468>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	dd32      	ble.n	80067e8 <_dtoa_r+0x3a0>
 8006782:	4ab7      	ldr	r2, [pc, #732]	; (8006a60 <_dtoa_r+0x618>)
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800678c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006790:	9b00      	ldr	r3, [sp, #0]
 8006792:	05d8      	lsls	r0, r3, #23
 8006794:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006798:	d516      	bpl.n	80067c8 <_dtoa_r+0x380>
 800679a:	4bb2      	ldr	r3, [pc, #712]	; (8006a64 <_dtoa_r+0x61c>)
 800679c:	ec51 0b19 	vmov	r0, r1, d9
 80067a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067a4:	f7fa f85a 	bl	800085c <__aeabi_ddiv>
 80067a8:	f007 070f 	and.w	r7, r7, #15
 80067ac:	4682      	mov	sl, r0
 80067ae:	468b      	mov	fp, r1
 80067b0:	2503      	movs	r5, #3
 80067b2:	4eac      	ldr	r6, [pc, #688]	; (8006a64 <_dtoa_r+0x61c>)
 80067b4:	b957      	cbnz	r7, 80067cc <_dtoa_r+0x384>
 80067b6:	4642      	mov	r2, r8
 80067b8:	464b      	mov	r3, r9
 80067ba:	4650      	mov	r0, sl
 80067bc:	4659      	mov	r1, fp
 80067be:	f7fa f84d 	bl	800085c <__aeabi_ddiv>
 80067c2:	4682      	mov	sl, r0
 80067c4:	468b      	mov	fp, r1
 80067c6:	e028      	b.n	800681a <_dtoa_r+0x3d2>
 80067c8:	2502      	movs	r5, #2
 80067ca:	e7f2      	b.n	80067b2 <_dtoa_r+0x36a>
 80067cc:	07f9      	lsls	r1, r7, #31
 80067ce:	d508      	bpl.n	80067e2 <_dtoa_r+0x39a>
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067d8:	f7f9 ff16 	bl	8000608 <__aeabi_dmul>
 80067dc:	3501      	adds	r5, #1
 80067de:	4680      	mov	r8, r0
 80067e0:	4689      	mov	r9, r1
 80067e2:	107f      	asrs	r7, r7, #1
 80067e4:	3608      	adds	r6, #8
 80067e6:	e7e5      	b.n	80067b4 <_dtoa_r+0x36c>
 80067e8:	f000 809b 	beq.w	8006922 <_dtoa_r+0x4da>
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	4f9d      	ldr	r7, [pc, #628]	; (8006a64 <_dtoa_r+0x61c>)
 80067f0:	425e      	negs	r6, r3
 80067f2:	4b9b      	ldr	r3, [pc, #620]	; (8006a60 <_dtoa_r+0x618>)
 80067f4:	f006 020f 	and.w	r2, r6, #15
 80067f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	ec51 0b19 	vmov	r0, r1, d9
 8006804:	f7f9 ff00 	bl	8000608 <__aeabi_dmul>
 8006808:	1136      	asrs	r6, r6, #4
 800680a:	4682      	mov	sl, r0
 800680c:	468b      	mov	fp, r1
 800680e:	2300      	movs	r3, #0
 8006810:	2502      	movs	r5, #2
 8006812:	2e00      	cmp	r6, #0
 8006814:	d17a      	bne.n	800690c <_dtoa_r+0x4c4>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1d3      	bne.n	80067c2 <_dtoa_r+0x37a>
 800681a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8082 	beq.w	8006926 <_dtoa_r+0x4de>
 8006822:	4b91      	ldr	r3, [pc, #580]	; (8006a68 <_dtoa_r+0x620>)
 8006824:	2200      	movs	r2, #0
 8006826:	4650      	mov	r0, sl
 8006828:	4659      	mov	r1, fp
 800682a:	f7fa f95f 	bl	8000aec <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	d079      	beq.n	8006926 <_dtoa_r+0x4de>
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d076      	beq.n	8006926 <_dtoa_r+0x4de>
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dd36      	ble.n	80068ac <_dtoa_r+0x464>
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	4650      	mov	r0, sl
 8006842:	4659      	mov	r1, fp
 8006844:	1e5f      	subs	r7, r3, #1
 8006846:	2200      	movs	r2, #0
 8006848:	4b88      	ldr	r3, [pc, #544]	; (8006a6c <_dtoa_r+0x624>)
 800684a:	f7f9 fedd 	bl	8000608 <__aeabi_dmul>
 800684e:	9e02      	ldr	r6, [sp, #8]
 8006850:	4682      	mov	sl, r0
 8006852:	468b      	mov	fp, r1
 8006854:	3501      	adds	r5, #1
 8006856:	4628      	mov	r0, r5
 8006858:	f7f9 fe6c 	bl	8000534 <__aeabi_i2d>
 800685c:	4652      	mov	r2, sl
 800685e:	465b      	mov	r3, fp
 8006860:	f7f9 fed2 	bl	8000608 <__aeabi_dmul>
 8006864:	4b82      	ldr	r3, [pc, #520]	; (8006a70 <_dtoa_r+0x628>)
 8006866:	2200      	movs	r2, #0
 8006868:	f7f9 fd18 	bl	800029c <__adddf3>
 800686c:	46d0      	mov	r8, sl
 800686e:	46d9      	mov	r9, fp
 8006870:	4682      	mov	sl, r0
 8006872:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006876:	2e00      	cmp	r6, #0
 8006878:	d158      	bne.n	800692c <_dtoa_r+0x4e4>
 800687a:	4b7e      	ldr	r3, [pc, #504]	; (8006a74 <_dtoa_r+0x62c>)
 800687c:	2200      	movs	r2, #0
 800687e:	4640      	mov	r0, r8
 8006880:	4649      	mov	r1, r9
 8006882:	f7f9 fd09 	bl	8000298 <__aeabi_dsub>
 8006886:	4652      	mov	r2, sl
 8006888:	465b      	mov	r3, fp
 800688a:	4680      	mov	r8, r0
 800688c:	4689      	mov	r9, r1
 800688e:	f7fa f94b 	bl	8000b28 <__aeabi_dcmpgt>
 8006892:	2800      	cmp	r0, #0
 8006894:	f040 8295 	bne.w	8006dc2 <_dtoa_r+0x97a>
 8006898:	4652      	mov	r2, sl
 800689a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7fa f923 	bl	8000aec <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f040 8289 	bne.w	8006dbe <_dtoa_r+0x976>
 80068ac:	ec5b ab19 	vmov	sl, fp, d9
 80068b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f2c0 8148 	blt.w	8006b48 <_dtoa_r+0x700>
 80068b8:	9a00      	ldr	r2, [sp, #0]
 80068ba:	2a0e      	cmp	r2, #14
 80068bc:	f300 8144 	bgt.w	8006b48 <_dtoa_r+0x700>
 80068c0:	4b67      	ldr	r3, [pc, #412]	; (8006a60 <_dtoa_r+0x618>)
 80068c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f280 80d5 	bge.w	8006a7c <_dtoa_r+0x634>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f300 80d1 	bgt.w	8006a7c <_dtoa_r+0x634>
 80068da:	f040 826f 	bne.w	8006dbc <_dtoa_r+0x974>
 80068de:	4b65      	ldr	r3, [pc, #404]	; (8006a74 <_dtoa_r+0x62c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 fe8f 	bl	8000608 <__aeabi_dmul>
 80068ea:	4652      	mov	r2, sl
 80068ec:	465b      	mov	r3, fp
 80068ee:	f7fa f911 	bl	8000b14 <__aeabi_dcmpge>
 80068f2:	9e03      	ldr	r6, [sp, #12]
 80068f4:	4637      	mov	r7, r6
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 8245 	bne.w	8006d86 <_dtoa_r+0x93e>
 80068fc:	9d01      	ldr	r5, [sp, #4]
 80068fe:	2331      	movs	r3, #49	; 0x31
 8006900:	f805 3b01 	strb.w	r3, [r5], #1
 8006904:	9b00      	ldr	r3, [sp, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	e240      	b.n	8006d8e <_dtoa_r+0x946>
 800690c:	07f2      	lsls	r2, r6, #31
 800690e:	d505      	bpl.n	800691c <_dtoa_r+0x4d4>
 8006910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006914:	f7f9 fe78 	bl	8000608 <__aeabi_dmul>
 8006918:	3501      	adds	r5, #1
 800691a:	2301      	movs	r3, #1
 800691c:	1076      	asrs	r6, r6, #1
 800691e:	3708      	adds	r7, #8
 8006920:	e777      	b.n	8006812 <_dtoa_r+0x3ca>
 8006922:	2502      	movs	r5, #2
 8006924:	e779      	b.n	800681a <_dtoa_r+0x3d2>
 8006926:	9f00      	ldr	r7, [sp, #0]
 8006928:	9e03      	ldr	r6, [sp, #12]
 800692a:	e794      	b.n	8006856 <_dtoa_r+0x40e>
 800692c:	9901      	ldr	r1, [sp, #4]
 800692e:	4b4c      	ldr	r3, [pc, #304]	; (8006a60 <_dtoa_r+0x618>)
 8006930:	4431      	add	r1, r6
 8006932:	910d      	str	r1, [sp, #52]	; 0x34
 8006934:	9908      	ldr	r1, [sp, #32]
 8006936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800693a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800693e:	2900      	cmp	r1, #0
 8006940:	d043      	beq.n	80069ca <_dtoa_r+0x582>
 8006942:	494d      	ldr	r1, [pc, #308]	; (8006a78 <_dtoa_r+0x630>)
 8006944:	2000      	movs	r0, #0
 8006946:	f7f9 ff89 	bl	800085c <__aeabi_ddiv>
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	f7f9 fca3 	bl	8000298 <__aeabi_dsub>
 8006952:	9d01      	ldr	r5, [sp, #4]
 8006954:	4682      	mov	sl, r0
 8006956:	468b      	mov	fp, r1
 8006958:	4649      	mov	r1, r9
 800695a:	4640      	mov	r0, r8
 800695c:	f7fa f904 	bl	8000b68 <__aeabi_d2iz>
 8006960:	4606      	mov	r6, r0
 8006962:	f7f9 fde7 	bl	8000534 <__aeabi_i2d>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7f9 fc93 	bl	8000298 <__aeabi_dsub>
 8006972:	3630      	adds	r6, #48	; 0x30
 8006974:	f805 6b01 	strb.w	r6, [r5], #1
 8006978:	4652      	mov	r2, sl
 800697a:	465b      	mov	r3, fp
 800697c:	4680      	mov	r8, r0
 800697e:	4689      	mov	r9, r1
 8006980:	f7fa f8b4 	bl	8000aec <__aeabi_dcmplt>
 8006984:	2800      	cmp	r0, #0
 8006986:	d163      	bne.n	8006a50 <_dtoa_r+0x608>
 8006988:	4642      	mov	r2, r8
 800698a:	464b      	mov	r3, r9
 800698c:	4936      	ldr	r1, [pc, #216]	; (8006a68 <_dtoa_r+0x620>)
 800698e:	2000      	movs	r0, #0
 8006990:	f7f9 fc82 	bl	8000298 <__aeabi_dsub>
 8006994:	4652      	mov	r2, sl
 8006996:	465b      	mov	r3, fp
 8006998:	f7fa f8a8 	bl	8000aec <__aeabi_dcmplt>
 800699c:	2800      	cmp	r0, #0
 800699e:	f040 80b5 	bne.w	8006b0c <_dtoa_r+0x6c4>
 80069a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a4:	429d      	cmp	r5, r3
 80069a6:	d081      	beq.n	80068ac <_dtoa_r+0x464>
 80069a8:	4b30      	ldr	r3, [pc, #192]	; (8006a6c <_dtoa_r+0x624>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	4650      	mov	r0, sl
 80069ae:	4659      	mov	r1, fp
 80069b0:	f7f9 fe2a 	bl	8000608 <__aeabi_dmul>
 80069b4:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <_dtoa_r+0x624>)
 80069b6:	4682      	mov	sl, r0
 80069b8:	468b      	mov	fp, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	2200      	movs	r2, #0
 80069c0:	f7f9 fe22 	bl	8000608 <__aeabi_dmul>
 80069c4:	4680      	mov	r8, r0
 80069c6:	4689      	mov	r9, r1
 80069c8:	e7c6      	b.n	8006958 <_dtoa_r+0x510>
 80069ca:	4650      	mov	r0, sl
 80069cc:	4659      	mov	r1, fp
 80069ce:	f7f9 fe1b 	bl	8000608 <__aeabi_dmul>
 80069d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d4:	9d01      	ldr	r5, [sp, #4]
 80069d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069d8:	4682      	mov	sl, r0
 80069da:	468b      	mov	fp, r1
 80069dc:	4649      	mov	r1, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	f7fa f8c2 	bl	8000b68 <__aeabi_d2iz>
 80069e4:	4606      	mov	r6, r0
 80069e6:	f7f9 fda5 	bl	8000534 <__aeabi_i2d>
 80069ea:	3630      	adds	r6, #48	; 0x30
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4640      	mov	r0, r8
 80069f2:	4649      	mov	r1, r9
 80069f4:	f7f9 fc50 	bl	8000298 <__aeabi_dsub>
 80069f8:	f805 6b01 	strb.w	r6, [r5], #1
 80069fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069fe:	429d      	cmp	r5, r3
 8006a00:	4680      	mov	r8, r0
 8006a02:	4689      	mov	r9, r1
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	d124      	bne.n	8006a54 <_dtoa_r+0x60c>
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <_dtoa_r+0x630>)
 8006a0c:	4650      	mov	r0, sl
 8006a0e:	4659      	mov	r1, fp
 8006a10:	f7f9 fc44 	bl	800029c <__adddf3>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7fa f884 	bl	8000b28 <__aeabi_dcmpgt>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d173      	bne.n	8006b0c <_dtoa_r+0x6c4>
 8006a24:	4652      	mov	r2, sl
 8006a26:	465b      	mov	r3, fp
 8006a28:	4913      	ldr	r1, [pc, #76]	; (8006a78 <_dtoa_r+0x630>)
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f7f9 fc34 	bl	8000298 <__aeabi_dsub>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4640      	mov	r0, r8
 8006a36:	4649      	mov	r1, r9
 8006a38:	f7fa f858 	bl	8000aec <__aeabi_dcmplt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f43f af35 	beq.w	80068ac <_dtoa_r+0x464>
 8006a42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a44:	1e6b      	subs	r3, r5, #1
 8006a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d0f8      	beq.n	8006a42 <_dtoa_r+0x5fa>
 8006a50:	9700      	str	r7, [sp, #0]
 8006a52:	e049      	b.n	8006ae8 <_dtoa_r+0x6a0>
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <_dtoa_r+0x624>)
 8006a56:	f7f9 fdd7 	bl	8000608 <__aeabi_dmul>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	4689      	mov	r9, r1
 8006a5e:	e7bd      	b.n	80069dc <_dtoa_r+0x594>
 8006a60:	080085d0 	.word	0x080085d0
 8006a64:	080085a8 	.word	0x080085a8
 8006a68:	3ff00000 	.word	0x3ff00000
 8006a6c:	40240000 	.word	0x40240000
 8006a70:	401c0000 	.word	0x401c0000
 8006a74:	40140000 	.word	0x40140000
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	9d01      	ldr	r5, [sp, #4]
 8006a7e:	4656      	mov	r6, sl
 8006a80:	465f      	mov	r7, fp
 8006a82:	4642      	mov	r2, r8
 8006a84:	464b      	mov	r3, r9
 8006a86:	4630      	mov	r0, r6
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f7f9 fee7 	bl	800085c <__aeabi_ddiv>
 8006a8e:	f7fa f86b 	bl	8000b68 <__aeabi_d2iz>
 8006a92:	4682      	mov	sl, r0
 8006a94:	f7f9 fd4e 	bl	8000534 <__aeabi_i2d>
 8006a98:	4642      	mov	r2, r8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	f7f9 fdb4 	bl	8000608 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006aac:	f7f9 fbf4 	bl	8000298 <__aeabi_dsub>
 8006ab0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ab4:	9e01      	ldr	r6, [sp, #4]
 8006ab6:	9f03      	ldr	r7, [sp, #12]
 8006ab8:	1bae      	subs	r6, r5, r6
 8006aba:	42b7      	cmp	r7, r6
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	d135      	bne.n	8006b2e <_dtoa_r+0x6e6>
 8006ac2:	f7f9 fbeb 	bl	800029c <__adddf3>
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	464b      	mov	r3, r9
 8006aca:	4606      	mov	r6, r0
 8006acc:	460f      	mov	r7, r1
 8006ace:	f7fa f82b 	bl	8000b28 <__aeabi_dcmpgt>
 8006ad2:	b9d0      	cbnz	r0, 8006b0a <_dtoa_r+0x6c2>
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	f7f9 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae0:	b110      	cbz	r0, 8006ae8 <_dtoa_r+0x6a0>
 8006ae2:	f01a 0f01 	tst.w	sl, #1
 8006ae6:	d110      	bne.n	8006b0a <_dtoa_r+0x6c2>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	ee18 1a10 	vmov	r1, s16
 8006aee:	f000 fd05 	bl	80074fc <_Bfree>
 8006af2:	2300      	movs	r3, #0
 8006af4:	9800      	ldr	r0, [sp, #0]
 8006af6:	702b      	strb	r3, [r5, #0]
 8006af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afa:	3001      	adds	r0, #1
 8006afc:	6018      	str	r0, [r3, #0]
 8006afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f43f acf1 	beq.w	80064e8 <_dtoa_r+0xa0>
 8006b06:	601d      	str	r5, [r3, #0]
 8006b08:	e4ee      	b.n	80064e8 <_dtoa_r+0xa0>
 8006b0a:	9f00      	ldr	r7, [sp, #0]
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	461d      	mov	r5, r3
 8006b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b14:	2a39      	cmp	r2, #57	; 0x39
 8006b16:	d106      	bne.n	8006b26 <_dtoa_r+0x6de>
 8006b18:	9a01      	ldr	r2, [sp, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d1f7      	bne.n	8006b0e <_dtoa_r+0x6c6>
 8006b1e:	9901      	ldr	r1, [sp, #4]
 8006b20:	2230      	movs	r2, #48	; 0x30
 8006b22:	3701      	adds	r7, #1
 8006b24:	700a      	strb	r2, [r1, #0]
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	3201      	adds	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	e790      	b.n	8006a50 <_dtoa_r+0x608>
 8006b2e:	4ba6      	ldr	r3, [pc, #664]	; (8006dc8 <_dtoa_r+0x980>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	f7f9 fd69 	bl	8000608 <__aeabi_dmul>
 8006b36:	2200      	movs	r2, #0
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	f7f9 ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d09d      	beq.n	8006a82 <_dtoa_r+0x63a>
 8006b46:	e7cf      	b.n	8006ae8 <_dtoa_r+0x6a0>
 8006b48:	9a08      	ldr	r2, [sp, #32]
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	f000 80d7 	beq.w	8006cfe <_dtoa_r+0x8b6>
 8006b50:	9a06      	ldr	r2, [sp, #24]
 8006b52:	2a01      	cmp	r2, #1
 8006b54:	f300 80ba 	bgt.w	8006ccc <_dtoa_r+0x884>
 8006b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	f000 80b2 	beq.w	8006cc4 <_dtoa_r+0x87c>
 8006b60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b64:	9e07      	ldr	r6, [sp, #28]
 8006b66:	9d04      	ldr	r5, [sp, #16]
 8006b68:	9a04      	ldr	r2, [sp, #16]
 8006b6a:	441a      	add	r2, r3
 8006b6c:	9204      	str	r2, [sp, #16]
 8006b6e:	9a05      	ldr	r2, [sp, #20]
 8006b70:	2101      	movs	r1, #1
 8006b72:	441a      	add	r2, r3
 8006b74:	4620      	mov	r0, r4
 8006b76:	9205      	str	r2, [sp, #20]
 8006b78:	f000 fd78 	bl	800766c <__i2b>
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	2d00      	cmp	r5, #0
 8006b80:	dd0c      	ble.n	8006b9c <_dtoa_r+0x754>
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dd09      	ble.n	8006b9c <_dtoa_r+0x754>
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	9a04      	ldr	r2, [sp, #16]
 8006b8c:	bfa8      	it	ge
 8006b8e:	462b      	movge	r3, r5
 8006b90:	1ad2      	subs	r2, r2, r3
 8006b92:	9204      	str	r2, [sp, #16]
 8006b94:	9a05      	ldr	r2, [sp, #20]
 8006b96:	1aed      	subs	r5, r5, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	b31b      	cbz	r3, 8006be8 <_dtoa_r+0x7a0>
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 80af 	beq.w	8006d06 <_dtoa_r+0x8be>
 8006ba8:	2e00      	cmp	r6, #0
 8006baa:	dd13      	ble.n	8006bd4 <_dtoa_r+0x78c>
 8006bac:	4639      	mov	r1, r7
 8006bae:	4632      	mov	r2, r6
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fe1b 	bl	80077ec <__pow5mult>
 8006bb6:	ee18 2a10 	vmov	r2, s16
 8006bba:	4601      	mov	r1, r0
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fd6a 	bl	8007698 <__multiply>
 8006bc4:	ee18 1a10 	vmov	r1, s16
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 fc96 	bl	80074fc <_Bfree>
 8006bd0:	ee08 8a10 	vmov	s16, r8
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	1b9a      	subs	r2, r3, r6
 8006bd8:	d006      	beq.n	8006be8 <_dtoa_r+0x7a0>
 8006bda:	ee18 1a10 	vmov	r1, s16
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fe04 	bl	80077ec <__pow5mult>
 8006be4:	ee08 0a10 	vmov	s16, r0
 8006be8:	2101      	movs	r1, #1
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 fd3e 	bl	800766c <__i2b>
 8006bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	f340 8088 	ble.w	8006d0a <_dtoa_r+0x8c2>
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4601      	mov	r1, r0
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fdf4 	bl	80077ec <__pow5mult>
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	4606      	mov	r6, r0
 8006c0a:	f340 8081 	ble.w	8006d10 <_dtoa_r+0x8c8>
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	6933      	ldr	r3, [r6, #16]
 8006c14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c18:	6918      	ldr	r0, [r3, #16]
 8006c1a:	f000 fcd7 	bl	80075cc <__hi0bits>
 8006c1e:	f1c0 0020 	rsb	r0, r0, #32
 8006c22:	9b05      	ldr	r3, [sp, #20]
 8006c24:	4418      	add	r0, r3
 8006c26:	f010 001f 	ands.w	r0, r0, #31
 8006c2a:	f000 8092 	beq.w	8006d52 <_dtoa_r+0x90a>
 8006c2e:	f1c0 0320 	rsb	r3, r0, #32
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	f340 808a 	ble.w	8006d4c <_dtoa_r+0x904>
 8006c38:	f1c0 001c 	rsb	r0, r0, #28
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	4403      	add	r3, r0
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	9b05      	ldr	r3, [sp, #20]
 8006c44:	4403      	add	r3, r0
 8006c46:	4405      	add	r5, r0
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd07      	ble.n	8006c60 <_dtoa_r+0x818>
 8006c50:	ee18 1a10 	vmov	r1, s16
 8006c54:	461a      	mov	r2, r3
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fe22 	bl	80078a0 <__lshift>
 8006c5c:	ee08 0a10 	vmov	s16, r0
 8006c60:	9b05      	ldr	r3, [sp, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dd05      	ble.n	8006c72 <_dtoa_r+0x82a>
 8006c66:	4631      	mov	r1, r6
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fe18 	bl	80078a0 <__lshift>
 8006c70:	4606      	mov	r6, r0
 8006c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d06e      	beq.n	8006d56 <_dtoa_r+0x90e>
 8006c78:	ee18 0a10 	vmov	r0, s16
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	f000 fe7f 	bl	8007980 <__mcmp>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	da67      	bge.n	8006d56 <_dtoa_r+0x90e>
 8006c86:	9b00      	ldr	r3, [sp, #0]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	ee18 1a10 	vmov	r1, s16
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	220a      	movs	r2, #10
 8006c92:	2300      	movs	r3, #0
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fc53 	bl	8007540 <__multadd>
 8006c9a:	9b08      	ldr	r3, [sp, #32]
 8006c9c:	ee08 0a10 	vmov	s16, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 81b1 	beq.w	8007008 <_dtoa_r+0xbc0>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4639      	mov	r1, r7
 8006caa:	220a      	movs	r2, #10
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 fc47 	bl	8007540 <__multadd>
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	f300 808e 	bgt.w	8006dd8 <_dtoa_r+0x990>
 8006cbc:	9b06      	ldr	r3, [sp, #24]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	dc51      	bgt.n	8006d66 <_dtoa_r+0x91e>
 8006cc2:	e089      	b.n	8006dd8 <_dtoa_r+0x990>
 8006cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cca:	e74b      	b.n	8006b64 <_dtoa_r+0x71c>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1e5e      	subs	r6, r3, #1
 8006cd0:	9b07      	ldr	r3, [sp, #28]
 8006cd2:	42b3      	cmp	r3, r6
 8006cd4:	bfbf      	itttt	lt
 8006cd6:	9b07      	ldrlt	r3, [sp, #28]
 8006cd8:	9607      	strlt	r6, [sp, #28]
 8006cda:	1af2      	sublt	r2, r6, r3
 8006cdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cde:	bfb6      	itet	lt
 8006ce0:	189b      	addlt	r3, r3, r2
 8006ce2:	1b9e      	subge	r6, r3, r6
 8006ce4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	bfb8      	it	lt
 8006cea:	2600      	movlt	r6, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bfb7      	itett	lt
 8006cf0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006cf4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006cf8:	1a9d      	sublt	r5, r3, r2
 8006cfa:	2300      	movlt	r3, #0
 8006cfc:	e734      	b.n	8006b68 <_dtoa_r+0x720>
 8006cfe:	9e07      	ldr	r6, [sp, #28]
 8006d00:	9d04      	ldr	r5, [sp, #16]
 8006d02:	9f08      	ldr	r7, [sp, #32]
 8006d04:	e73b      	b.n	8006b7e <_dtoa_r+0x736>
 8006d06:	9a07      	ldr	r2, [sp, #28]
 8006d08:	e767      	b.n	8006bda <_dtoa_r+0x792>
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	dc18      	bgt.n	8006d42 <_dtoa_r+0x8fa>
 8006d10:	f1ba 0f00 	cmp.w	sl, #0
 8006d14:	d115      	bne.n	8006d42 <_dtoa_r+0x8fa>
 8006d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d1a:	b993      	cbnz	r3, 8006d42 <_dtoa_r+0x8fa>
 8006d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d20:	0d1b      	lsrs	r3, r3, #20
 8006d22:	051b      	lsls	r3, r3, #20
 8006d24:	b183      	cbz	r3, 8006d48 <_dtoa_r+0x900>
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	9b05      	ldr	r3, [sp, #20]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	9305      	str	r3, [sp, #20]
 8006d32:	f04f 0801 	mov.w	r8, #1
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f47f af6a 	bne.w	8006c12 <_dtoa_r+0x7ca>
 8006d3e:	2001      	movs	r0, #1
 8006d40:	e76f      	b.n	8006c22 <_dtoa_r+0x7da>
 8006d42:	f04f 0800 	mov.w	r8, #0
 8006d46:	e7f6      	b.n	8006d36 <_dtoa_r+0x8ee>
 8006d48:	4698      	mov	r8, r3
 8006d4a:	e7f4      	b.n	8006d36 <_dtoa_r+0x8ee>
 8006d4c:	f43f af7d 	beq.w	8006c4a <_dtoa_r+0x802>
 8006d50:	4618      	mov	r0, r3
 8006d52:	301c      	adds	r0, #28
 8006d54:	e772      	b.n	8006c3c <_dtoa_r+0x7f4>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc37      	bgt.n	8006dcc <_dtoa_r+0x984>
 8006d5c:	9b06      	ldr	r3, [sp, #24]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	dd34      	ble.n	8006dcc <_dtoa_r+0x984>
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	9302      	str	r3, [sp, #8]
 8006d66:	9b02      	ldr	r3, [sp, #8]
 8006d68:	b96b      	cbnz	r3, 8006d86 <_dtoa_r+0x93e>
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 fbe6 	bl	8007540 <__multadd>
 8006d74:	4601      	mov	r1, r0
 8006d76:	4606      	mov	r6, r0
 8006d78:	ee18 0a10 	vmov	r0, s16
 8006d7c:	f000 fe00 	bl	8007980 <__mcmp>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f73f adbb 	bgt.w	80068fc <_dtoa_r+0x4b4>
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	9d01      	ldr	r5, [sp, #4]
 8006d8a:	43db      	mvns	r3, r3
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	4631      	mov	r1, r6
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fbb1 	bl	80074fc <_Bfree>
 8006d9a:	2f00      	cmp	r7, #0
 8006d9c:	f43f aea4 	beq.w	8006ae8 <_dtoa_r+0x6a0>
 8006da0:	f1b8 0f00 	cmp.w	r8, #0
 8006da4:	d005      	beq.n	8006db2 <_dtoa_r+0x96a>
 8006da6:	45b8      	cmp	r8, r7
 8006da8:	d003      	beq.n	8006db2 <_dtoa_r+0x96a>
 8006daa:	4641      	mov	r1, r8
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fba5 	bl	80074fc <_Bfree>
 8006db2:	4639      	mov	r1, r7
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fba1 	bl	80074fc <_Bfree>
 8006dba:	e695      	b.n	8006ae8 <_dtoa_r+0x6a0>
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	4637      	mov	r7, r6
 8006dc0:	e7e1      	b.n	8006d86 <_dtoa_r+0x93e>
 8006dc2:	9700      	str	r7, [sp, #0]
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	e599      	b.n	80068fc <_dtoa_r+0x4b4>
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80ca 	beq.w	8006f68 <_dtoa_r+0xb20>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	dd05      	ble.n	8006de8 <_dtoa_r+0x9a0>
 8006ddc:	4639      	mov	r1, r7
 8006dde:	462a      	mov	r2, r5
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fd5d 	bl	80078a0 <__lshift>
 8006de6:	4607      	mov	r7, r0
 8006de8:	f1b8 0f00 	cmp.w	r8, #0
 8006dec:	d05b      	beq.n	8006ea6 <_dtoa_r+0xa5e>
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 fb43 	bl	800747c <_Balloc>
 8006df6:	4605      	mov	r5, r0
 8006df8:	b928      	cbnz	r0, 8006e06 <_dtoa_r+0x9be>
 8006dfa:	4b87      	ldr	r3, [pc, #540]	; (8007018 <_dtoa_r+0xbd0>)
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e02:	f7ff bb3b 	b.w	800647c <_dtoa_r+0x34>
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	3202      	adds	r2, #2
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	f107 010c 	add.w	r1, r7, #12
 8006e10:	300c      	adds	r0, #12
 8006e12:	f7fe fcbd 	bl	8005790 <memcpy>
 8006e16:	2201      	movs	r2, #1
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fd40 	bl	80078a0 <__lshift>
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	f103 0901 	add.w	r9, r3, #1
 8006e26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	9305      	str	r3, [sp, #20]
 8006e2e:	f00a 0301 	and.w	r3, sl, #1
 8006e32:	46b8      	mov	r8, r7
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	4607      	mov	r7, r0
 8006e38:	4631      	mov	r1, r6
 8006e3a:	ee18 0a10 	vmov	r0, s16
 8006e3e:	f7ff fa75 	bl	800632c <quorem>
 8006e42:	4641      	mov	r1, r8
 8006e44:	9002      	str	r0, [sp, #8]
 8006e46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e4a:	ee18 0a10 	vmov	r0, s16
 8006e4e:	f000 fd97 	bl	8007980 <__mcmp>
 8006e52:	463a      	mov	r2, r7
 8006e54:	9003      	str	r0, [sp, #12]
 8006e56:	4631      	mov	r1, r6
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fdad 	bl	80079b8 <__mdiff>
 8006e5e:	68c2      	ldr	r2, [r0, #12]
 8006e60:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e64:	4605      	mov	r5, r0
 8006e66:	bb02      	cbnz	r2, 8006eaa <_dtoa_r+0xa62>
 8006e68:	4601      	mov	r1, r0
 8006e6a:	ee18 0a10 	vmov	r0, s16
 8006e6e:	f000 fd87 	bl	8007980 <__mcmp>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4629      	mov	r1, r5
 8006e76:	4620      	mov	r0, r4
 8006e78:	9207      	str	r2, [sp, #28]
 8006e7a:	f000 fb3f 	bl	80074fc <_Bfree>
 8006e7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e82:	ea43 0102 	orr.w	r1, r3, r2
 8006e86:	9b04      	ldr	r3, [sp, #16]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	464d      	mov	r5, r9
 8006e8c:	d10f      	bne.n	8006eae <_dtoa_r+0xa66>
 8006e8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e92:	d02a      	beq.n	8006eea <_dtoa_r+0xaa2>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dd02      	ble.n	8006ea0 <_dtoa_r+0xa58>
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ea0:	f88b a000 	strb.w	sl, [fp]
 8006ea4:	e775      	b.n	8006d92 <_dtoa_r+0x94a>
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	e7ba      	b.n	8006e20 <_dtoa_r+0x9d8>
 8006eaa:	2201      	movs	r2, #1
 8006eac:	e7e2      	b.n	8006e74 <_dtoa_r+0xa2c>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db04      	blt.n	8006ebe <_dtoa_r+0xa76>
 8006eb4:	9906      	ldr	r1, [sp, #24]
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	9904      	ldr	r1, [sp, #16]
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	d122      	bne.n	8006f04 <_dtoa_r+0xabc>
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	ddee      	ble.n	8006ea0 <_dtoa_r+0xa58>
 8006ec2:	ee18 1a10 	vmov	r1, s16
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fce9 	bl	80078a0 <__lshift>
 8006ece:	4631      	mov	r1, r6
 8006ed0:	ee08 0a10 	vmov	s16, r0
 8006ed4:	f000 fd54 	bl	8007980 <__mcmp>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dc03      	bgt.n	8006ee4 <_dtoa_r+0xa9c>
 8006edc:	d1e0      	bne.n	8006ea0 <_dtoa_r+0xa58>
 8006ede:	f01a 0f01 	tst.w	sl, #1
 8006ee2:	d0dd      	beq.n	8006ea0 <_dtoa_r+0xa58>
 8006ee4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ee8:	d1d7      	bne.n	8006e9a <_dtoa_r+0xa52>
 8006eea:	2339      	movs	r3, #57	; 0x39
 8006eec:	f88b 3000 	strb.w	r3, [fp]
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006efa:	2a39      	cmp	r2, #57	; 0x39
 8006efc:	d071      	beq.n	8006fe2 <_dtoa_r+0xb9a>
 8006efe:	3201      	adds	r2, #1
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	e746      	b.n	8006d92 <_dtoa_r+0x94a>
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	dd07      	ble.n	8006f18 <_dtoa_r+0xad0>
 8006f08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f0c:	d0ed      	beq.n	8006eea <_dtoa_r+0xaa2>
 8006f0e:	f10a 0301 	add.w	r3, sl, #1
 8006f12:	f88b 3000 	strb.w	r3, [fp]
 8006f16:	e73c      	b.n	8006d92 <_dtoa_r+0x94a>
 8006f18:	9b05      	ldr	r3, [sp, #20]
 8006f1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f1e:	4599      	cmp	r9, r3
 8006f20:	d047      	beq.n	8006fb2 <_dtoa_r+0xb6a>
 8006f22:	ee18 1a10 	vmov	r1, s16
 8006f26:	2300      	movs	r3, #0
 8006f28:	220a      	movs	r2, #10
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 fb08 	bl	8007540 <__multadd>
 8006f30:	45b8      	cmp	r8, r7
 8006f32:	ee08 0a10 	vmov	s16, r0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f04f 020a 	mov.w	r2, #10
 8006f3e:	4641      	mov	r1, r8
 8006f40:	4620      	mov	r0, r4
 8006f42:	d106      	bne.n	8006f52 <_dtoa_r+0xb0a>
 8006f44:	f000 fafc 	bl	8007540 <__multadd>
 8006f48:	4680      	mov	r8, r0
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	f109 0901 	add.w	r9, r9, #1
 8006f50:	e772      	b.n	8006e38 <_dtoa_r+0x9f0>
 8006f52:	f000 faf5 	bl	8007540 <__multadd>
 8006f56:	4639      	mov	r1, r7
 8006f58:	4680      	mov	r8, r0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 faee 	bl	8007540 <__multadd>
 8006f64:	4607      	mov	r7, r0
 8006f66:	e7f1      	b.n	8006f4c <_dtoa_r+0xb04>
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	9302      	str	r3, [sp, #8]
 8006f6c:	9d01      	ldr	r5, [sp, #4]
 8006f6e:	ee18 0a10 	vmov	r0, s16
 8006f72:	4631      	mov	r1, r6
 8006f74:	f7ff f9da 	bl	800632c <quorem>
 8006f78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	f805 ab01 	strb.w	sl, [r5], #1
 8006f82:	1aea      	subs	r2, r5, r3
 8006f84:	9b02      	ldr	r3, [sp, #8]
 8006f86:	4293      	cmp	r3, r2
 8006f88:	dd09      	ble.n	8006f9e <_dtoa_r+0xb56>
 8006f8a:	ee18 1a10 	vmov	r1, s16
 8006f8e:	2300      	movs	r3, #0
 8006f90:	220a      	movs	r2, #10
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fad4 	bl	8007540 <__multadd>
 8006f98:	ee08 0a10 	vmov	s16, r0
 8006f9c:	e7e7      	b.n	8006f6e <_dtoa_r+0xb26>
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfc8      	it	gt
 8006fa4:	461d      	movgt	r5, r3
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	bfd8      	it	le
 8006faa:	2501      	movle	r5, #1
 8006fac:	441d      	add	r5, r3
 8006fae:	f04f 0800 	mov.w	r8, #0
 8006fb2:	ee18 1a10 	vmov	r1, s16
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fc71 	bl	80078a0 <__lshift>
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	ee08 0a10 	vmov	s16, r0
 8006fc4:	f000 fcdc 	bl	8007980 <__mcmp>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	dc91      	bgt.n	8006ef0 <_dtoa_r+0xaa8>
 8006fcc:	d102      	bne.n	8006fd4 <_dtoa_r+0xb8c>
 8006fce:	f01a 0f01 	tst.w	sl, #1
 8006fd2:	d18d      	bne.n	8006ef0 <_dtoa_r+0xaa8>
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	461d      	mov	r5, r3
 8006fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fdc:	2a30      	cmp	r2, #48	; 0x30
 8006fde:	d0fa      	beq.n	8006fd6 <_dtoa_r+0xb8e>
 8006fe0:	e6d7      	b.n	8006d92 <_dtoa_r+0x94a>
 8006fe2:	9a01      	ldr	r2, [sp, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d184      	bne.n	8006ef2 <_dtoa_r+0xaaa>
 8006fe8:	9b00      	ldr	r3, [sp, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	2331      	movs	r3, #49	; 0x31
 8006ff0:	7013      	strb	r3, [r2, #0]
 8006ff2:	e6ce      	b.n	8006d92 <_dtoa_r+0x94a>
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <_dtoa_r+0xbd4>)
 8006ff6:	f7ff ba95 	b.w	8006524 <_dtoa_r+0xdc>
 8006ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f aa6e 	bne.w	80064de <_dtoa_r+0x96>
 8007002:	4b07      	ldr	r3, [pc, #28]	; (8007020 <_dtoa_r+0xbd8>)
 8007004:	f7ff ba8e 	b.w	8006524 <_dtoa_r+0xdc>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dcae      	bgt.n	8006f6c <_dtoa_r+0xb24>
 800700e:	9b06      	ldr	r3, [sp, #24]
 8007010:	2b02      	cmp	r3, #2
 8007012:	f73f aea8 	bgt.w	8006d66 <_dtoa_r+0x91e>
 8007016:	e7a9      	b.n	8006f6c <_dtoa_r+0xb24>
 8007018:	080084d7 	.word	0x080084d7
 800701c:	08008434 	.word	0x08008434
 8007020:	08008458 	.word	0x08008458

08007024 <__sflush_r>:
 8007024:	898a      	ldrh	r2, [r1, #12]
 8007026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	0710      	lsls	r0, r2, #28
 800702e:	460c      	mov	r4, r1
 8007030:	d458      	bmi.n	80070e4 <__sflush_r+0xc0>
 8007032:	684b      	ldr	r3, [r1, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dc05      	bgt.n	8007044 <__sflush_r+0x20>
 8007038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	dc02      	bgt.n	8007044 <__sflush_r+0x20>
 800703e:	2000      	movs	r0, #0
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007046:	2e00      	cmp	r6, #0
 8007048:	d0f9      	beq.n	800703e <__sflush_r+0x1a>
 800704a:	2300      	movs	r3, #0
 800704c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007050:	682f      	ldr	r7, [r5, #0]
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	d032      	beq.n	80070bc <__sflush_r+0x98>
 8007056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	075a      	lsls	r2, r3, #29
 800705c:	d505      	bpl.n	800706a <__sflush_r+0x46>
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	1ac0      	subs	r0, r0, r3
 8007062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007064:	b10b      	cbz	r3, 800706a <__sflush_r+0x46>
 8007066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007068:	1ac0      	subs	r0, r0, r3
 800706a:	2300      	movs	r3, #0
 800706c:	4602      	mov	r2, r0
 800706e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007070:	6a21      	ldr	r1, [r4, #32]
 8007072:	4628      	mov	r0, r5
 8007074:	47b0      	blx	r6
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	d106      	bne.n	800708a <__sflush_r+0x66>
 800707c:	6829      	ldr	r1, [r5, #0]
 800707e:	291d      	cmp	r1, #29
 8007080:	d82c      	bhi.n	80070dc <__sflush_r+0xb8>
 8007082:	4a2a      	ldr	r2, [pc, #168]	; (800712c <__sflush_r+0x108>)
 8007084:	40ca      	lsrs	r2, r1
 8007086:	07d6      	lsls	r6, r2, #31
 8007088:	d528      	bpl.n	80070dc <__sflush_r+0xb8>
 800708a:	2200      	movs	r2, #0
 800708c:	6062      	str	r2, [r4, #4]
 800708e:	04d9      	lsls	r1, r3, #19
 8007090:	6922      	ldr	r2, [r4, #16]
 8007092:	6022      	str	r2, [r4, #0]
 8007094:	d504      	bpl.n	80070a0 <__sflush_r+0x7c>
 8007096:	1c42      	adds	r2, r0, #1
 8007098:	d101      	bne.n	800709e <__sflush_r+0x7a>
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	b903      	cbnz	r3, 80070a0 <__sflush_r+0x7c>
 800709e:	6560      	str	r0, [r4, #84]	; 0x54
 80070a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a2:	602f      	str	r7, [r5, #0]
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d0ca      	beq.n	800703e <__sflush_r+0x1a>
 80070a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ac:	4299      	cmp	r1, r3
 80070ae:	d002      	beq.n	80070b6 <__sflush_r+0x92>
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 fd7d 	bl	8007bb0 <_free_r>
 80070b6:	2000      	movs	r0, #0
 80070b8:	6360      	str	r0, [r4, #52]	; 0x34
 80070ba:	e7c1      	b.n	8007040 <__sflush_r+0x1c>
 80070bc:	6a21      	ldr	r1, [r4, #32]
 80070be:	2301      	movs	r3, #1
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	1c41      	adds	r1, r0, #1
 80070c6:	d1c7      	bne.n	8007058 <__sflush_r+0x34>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0c4      	beq.n	8007058 <__sflush_r+0x34>
 80070ce:	2b1d      	cmp	r3, #29
 80070d0:	d001      	beq.n	80070d6 <__sflush_r+0xb2>
 80070d2:	2b16      	cmp	r3, #22
 80070d4:	d101      	bne.n	80070da <__sflush_r+0xb6>
 80070d6:	602f      	str	r7, [r5, #0]
 80070d8:	e7b1      	b.n	800703e <__sflush_r+0x1a>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	e7ad      	b.n	8007040 <__sflush_r+0x1c>
 80070e4:	690f      	ldr	r7, [r1, #16]
 80070e6:	2f00      	cmp	r7, #0
 80070e8:	d0a9      	beq.n	800703e <__sflush_r+0x1a>
 80070ea:	0793      	lsls	r3, r2, #30
 80070ec:	680e      	ldr	r6, [r1, #0]
 80070ee:	bf08      	it	eq
 80070f0:	694b      	ldreq	r3, [r1, #20]
 80070f2:	600f      	str	r7, [r1, #0]
 80070f4:	bf18      	it	ne
 80070f6:	2300      	movne	r3, #0
 80070f8:	eba6 0807 	sub.w	r8, r6, r7
 80070fc:	608b      	str	r3, [r1, #8]
 80070fe:	f1b8 0f00 	cmp.w	r8, #0
 8007102:	dd9c      	ble.n	800703e <__sflush_r+0x1a>
 8007104:	6a21      	ldr	r1, [r4, #32]
 8007106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007108:	4643      	mov	r3, r8
 800710a:	463a      	mov	r2, r7
 800710c:	4628      	mov	r0, r5
 800710e:	47b0      	blx	r6
 8007110:	2800      	cmp	r0, #0
 8007112:	dc06      	bgt.n	8007122 <__sflush_r+0xfe>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800711a:	81a3      	strh	r3, [r4, #12]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e78e      	b.n	8007040 <__sflush_r+0x1c>
 8007122:	4407      	add	r7, r0
 8007124:	eba8 0800 	sub.w	r8, r8, r0
 8007128:	e7e9      	b.n	80070fe <__sflush_r+0xda>
 800712a:	bf00      	nop
 800712c:	20400001 	.word	0x20400001

08007130 <_fflush_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	690b      	ldr	r3, [r1, #16]
 8007134:	4605      	mov	r5, r0
 8007136:	460c      	mov	r4, r1
 8007138:	b913      	cbnz	r3, 8007140 <_fflush_r+0x10>
 800713a:	2500      	movs	r5, #0
 800713c:	4628      	mov	r0, r5
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	b118      	cbz	r0, 800714a <_fflush_r+0x1a>
 8007142:	6983      	ldr	r3, [r0, #24]
 8007144:	b90b      	cbnz	r3, 800714a <_fflush_r+0x1a>
 8007146:	f000 f887 	bl	8007258 <__sinit>
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <_fflush_r+0x6c>)
 800714c:	429c      	cmp	r4, r3
 800714e:	d11b      	bne.n	8007188 <_fflush_r+0x58>
 8007150:	686c      	ldr	r4, [r5, #4]
 8007152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0ef      	beq.n	800713a <_fflush_r+0xa>
 800715a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800715c:	07d0      	lsls	r0, r2, #31
 800715e:	d404      	bmi.n	800716a <_fflush_r+0x3a>
 8007160:	0599      	lsls	r1, r3, #22
 8007162:	d402      	bmi.n	800716a <_fflush_r+0x3a>
 8007164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007166:	f000 f91a 	bl	800739e <__retarget_lock_acquire_recursive>
 800716a:	4628      	mov	r0, r5
 800716c:	4621      	mov	r1, r4
 800716e:	f7ff ff59 	bl	8007024 <__sflush_r>
 8007172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007174:	07da      	lsls	r2, r3, #31
 8007176:	4605      	mov	r5, r0
 8007178:	d4e0      	bmi.n	800713c <_fflush_r+0xc>
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	059b      	lsls	r3, r3, #22
 800717e:	d4dd      	bmi.n	800713c <_fflush_r+0xc>
 8007180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007182:	f000 f90d 	bl	80073a0 <__retarget_lock_release_recursive>
 8007186:	e7d9      	b.n	800713c <_fflush_r+0xc>
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <_fflush_r+0x70>)
 800718a:	429c      	cmp	r4, r3
 800718c:	d101      	bne.n	8007192 <_fflush_r+0x62>
 800718e:	68ac      	ldr	r4, [r5, #8]
 8007190:	e7df      	b.n	8007152 <_fflush_r+0x22>
 8007192:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <_fflush_r+0x74>)
 8007194:	429c      	cmp	r4, r3
 8007196:	bf08      	it	eq
 8007198:	68ec      	ldreq	r4, [r5, #12]
 800719a:	e7da      	b.n	8007152 <_fflush_r+0x22>
 800719c:	08008508 	.word	0x08008508
 80071a0:	08008528 	.word	0x08008528
 80071a4:	080084e8 	.word	0x080084e8

080071a8 <std>:
 80071a8:	2300      	movs	r3, #0
 80071aa:	b510      	push	{r4, lr}
 80071ac:	4604      	mov	r4, r0
 80071ae:	e9c0 3300 	strd	r3, r3, [r0]
 80071b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071b6:	6083      	str	r3, [r0, #8]
 80071b8:	8181      	strh	r1, [r0, #12]
 80071ba:	6643      	str	r3, [r0, #100]	; 0x64
 80071bc:	81c2      	strh	r2, [r0, #14]
 80071be:	6183      	str	r3, [r0, #24]
 80071c0:	4619      	mov	r1, r3
 80071c2:	2208      	movs	r2, #8
 80071c4:	305c      	adds	r0, #92	; 0x5c
 80071c6:	f7fe faf1 	bl	80057ac <memset>
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x38>)
 80071cc:	6263      	str	r3, [r4, #36]	; 0x24
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <std+0x3c>)
 80071d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071d2:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <std+0x40>)
 80071d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <std+0x44>)
 80071d8:	6224      	str	r4, [r4, #32]
 80071da:	6323      	str	r3, [r4, #48]	; 0x30
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	bf00      	nop
 80071e0:	08008045 	.word	0x08008045
 80071e4:	08008067 	.word	0x08008067
 80071e8:	0800809f 	.word	0x0800809f
 80071ec:	080080c3 	.word	0x080080c3

080071f0 <_cleanup_r>:
 80071f0:	4901      	ldr	r1, [pc, #4]	; (80071f8 <_cleanup_r+0x8>)
 80071f2:	f000 b8af 	b.w	8007354 <_fwalk_reent>
 80071f6:	bf00      	nop
 80071f8:	08007131 	.word	0x08007131

080071fc <__sfmoreglue>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	2268      	movs	r2, #104	; 0x68
 8007200:	1e4d      	subs	r5, r1, #1
 8007202:	4355      	muls	r5, r2
 8007204:	460e      	mov	r6, r1
 8007206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800720a:	f000 fd3d 	bl	8007c88 <_malloc_r>
 800720e:	4604      	mov	r4, r0
 8007210:	b140      	cbz	r0, 8007224 <__sfmoreglue+0x28>
 8007212:	2100      	movs	r1, #0
 8007214:	e9c0 1600 	strd	r1, r6, [r0]
 8007218:	300c      	adds	r0, #12
 800721a:	60a0      	str	r0, [r4, #8]
 800721c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007220:	f7fe fac4 	bl	80057ac <memset>
 8007224:	4620      	mov	r0, r4
 8007226:	bd70      	pop	{r4, r5, r6, pc}

08007228 <__sfp_lock_acquire>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sfp_lock_acquire+0x8>)
 800722a:	f000 b8b8 	b.w	800739e <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	200003ed 	.word	0x200003ed

08007234 <__sfp_lock_release>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__sfp_lock_release+0x8>)
 8007236:	f000 b8b3 	b.w	80073a0 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	200003ed 	.word	0x200003ed

08007240 <__sinit_lock_acquire>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__sinit_lock_acquire+0x8>)
 8007242:	f000 b8ac 	b.w	800739e <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	200003ee 	.word	0x200003ee

0800724c <__sinit_lock_release>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__sinit_lock_release+0x8>)
 800724e:	f000 b8a7 	b.w	80073a0 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	200003ee 	.word	0x200003ee

08007258 <__sinit>:
 8007258:	b510      	push	{r4, lr}
 800725a:	4604      	mov	r4, r0
 800725c:	f7ff fff0 	bl	8007240 <__sinit_lock_acquire>
 8007260:	69a3      	ldr	r3, [r4, #24]
 8007262:	b11b      	cbz	r3, 800726c <__sinit+0x14>
 8007264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007268:	f7ff bff0 	b.w	800724c <__sinit_lock_release>
 800726c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007270:	6523      	str	r3, [r4, #80]	; 0x50
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <__sinit+0x68>)
 8007274:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <__sinit+0x6c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	62a2      	str	r2, [r4, #40]	; 0x28
 800727a:	42a3      	cmp	r3, r4
 800727c:	bf04      	itt	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	61a3      	streq	r3, [r4, #24]
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f820 	bl	80072c8 <__sfp>
 8007288:	6060      	str	r0, [r4, #4]
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f81c 	bl	80072c8 <__sfp>
 8007290:	60a0      	str	r0, [r4, #8]
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f818 	bl	80072c8 <__sfp>
 8007298:	2200      	movs	r2, #0
 800729a:	60e0      	str	r0, [r4, #12]
 800729c:	2104      	movs	r1, #4
 800729e:	6860      	ldr	r0, [r4, #4]
 80072a0:	f7ff ff82 	bl	80071a8 <std>
 80072a4:	68a0      	ldr	r0, [r4, #8]
 80072a6:	2201      	movs	r2, #1
 80072a8:	2109      	movs	r1, #9
 80072aa:	f7ff ff7d 	bl	80071a8 <std>
 80072ae:	68e0      	ldr	r0, [r4, #12]
 80072b0:	2202      	movs	r2, #2
 80072b2:	2112      	movs	r1, #18
 80072b4:	f7ff ff78 	bl	80071a8 <std>
 80072b8:	2301      	movs	r3, #1
 80072ba:	61a3      	str	r3, [r4, #24]
 80072bc:	e7d2      	b.n	8007264 <__sinit+0xc>
 80072be:	bf00      	nop
 80072c0:	08008420 	.word	0x08008420
 80072c4:	080071f1 	.word	0x080071f1

080072c8 <__sfp>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	4607      	mov	r7, r0
 80072cc:	f7ff ffac 	bl	8007228 <__sfp_lock_acquire>
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <__sfp+0x84>)
 80072d2:	681e      	ldr	r6, [r3, #0]
 80072d4:	69b3      	ldr	r3, [r6, #24]
 80072d6:	b913      	cbnz	r3, 80072de <__sfp+0x16>
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff ffbd 	bl	8007258 <__sinit>
 80072de:	3648      	adds	r6, #72	; 0x48
 80072e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	d503      	bpl.n	80072f0 <__sfp+0x28>
 80072e8:	6833      	ldr	r3, [r6, #0]
 80072ea:	b30b      	cbz	r3, 8007330 <__sfp+0x68>
 80072ec:	6836      	ldr	r6, [r6, #0]
 80072ee:	e7f7      	b.n	80072e0 <__sfp+0x18>
 80072f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072f4:	b9d5      	cbnz	r5, 800732c <__sfp+0x64>
 80072f6:	4b16      	ldr	r3, [pc, #88]	; (8007350 <__sfp+0x88>)
 80072f8:	60e3      	str	r3, [r4, #12]
 80072fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007300:	f000 f84c 	bl	800739c <__retarget_lock_init_recursive>
 8007304:	f7ff ff96 	bl	8007234 <__sfp_lock_release>
 8007308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800730c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007310:	6025      	str	r5, [r4, #0]
 8007312:	61a5      	str	r5, [r4, #24]
 8007314:	2208      	movs	r2, #8
 8007316:	4629      	mov	r1, r5
 8007318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800731c:	f7fe fa46 	bl	80057ac <memset>
 8007320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007328:	4620      	mov	r0, r4
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732c:	3468      	adds	r4, #104	; 0x68
 800732e:	e7d9      	b.n	80072e4 <__sfp+0x1c>
 8007330:	2104      	movs	r1, #4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff62 	bl	80071fc <__sfmoreglue>
 8007338:	4604      	mov	r4, r0
 800733a:	6030      	str	r0, [r6, #0]
 800733c:	2800      	cmp	r0, #0
 800733e:	d1d5      	bne.n	80072ec <__sfp+0x24>
 8007340:	f7ff ff78 	bl	8007234 <__sfp_lock_release>
 8007344:	230c      	movs	r3, #12
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	e7ee      	b.n	8007328 <__sfp+0x60>
 800734a:	bf00      	nop
 800734c:	08008420 	.word	0x08008420
 8007350:	ffff0001 	.word	0xffff0001

08007354 <_fwalk_reent>:
 8007354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007358:	4606      	mov	r6, r0
 800735a:	4688      	mov	r8, r1
 800735c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007360:	2700      	movs	r7, #0
 8007362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007366:	f1b9 0901 	subs.w	r9, r9, #1
 800736a:	d505      	bpl.n	8007378 <_fwalk_reent+0x24>
 800736c:	6824      	ldr	r4, [r4, #0]
 800736e:	2c00      	cmp	r4, #0
 8007370:	d1f7      	bne.n	8007362 <_fwalk_reent+0xe>
 8007372:	4638      	mov	r0, r7
 8007374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007378:	89ab      	ldrh	r3, [r5, #12]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d907      	bls.n	800738e <_fwalk_reent+0x3a>
 800737e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007382:	3301      	adds	r3, #1
 8007384:	d003      	beq.n	800738e <_fwalk_reent+0x3a>
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	47c0      	blx	r8
 800738c:	4307      	orrs	r7, r0
 800738e:	3568      	adds	r5, #104	; 0x68
 8007390:	e7e9      	b.n	8007366 <_fwalk_reent+0x12>
	...

08007394 <_localeconv_r>:
 8007394:	4800      	ldr	r0, [pc, #0]	; (8007398 <_localeconv_r+0x4>)
 8007396:	4770      	bx	lr
 8007398:	20000160 	.word	0x20000160

0800739c <__retarget_lock_init_recursive>:
 800739c:	4770      	bx	lr

0800739e <__retarget_lock_acquire_recursive>:
 800739e:	4770      	bx	lr

080073a0 <__retarget_lock_release_recursive>:
 80073a0:	4770      	bx	lr

080073a2 <__swhatbuf_r>:
 80073a2:	b570      	push	{r4, r5, r6, lr}
 80073a4:	460e      	mov	r6, r1
 80073a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073aa:	2900      	cmp	r1, #0
 80073ac:	b096      	sub	sp, #88	; 0x58
 80073ae:	4614      	mov	r4, r2
 80073b0:	461d      	mov	r5, r3
 80073b2:	da08      	bge.n	80073c6 <__swhatbuf_r+0x24>
 80073b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	602a      	str	r2, [r5, #0]
 80073bc:	061a      	lsls	r2, r3, #24
 80073be:	d410      	bmi.n	80073e2 <__swhatbuf_r+0x40>
 80073c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c4:	e00e      	b.n	80073e4 <__swhatbuf_r+0x42>
 80073c6:	466a      	mov	r2, sp
 80073c8:	f000 fed2 	bl	8008170 <_fstat_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	dbf1      	blt.n	80073b4 <__swhatbuf_r+0x12>
 80073d0:	9a01      	ldr	r2, [sp, #4]
 80073d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073da:	425a      	negs	r2, r3
 80073dc:	415a      	adcs	r2, r3
 80073de:	602a      	str	r2, [r5, #0]
 80073e0:	e7ee      	b.n	80073c0 <__swhatbuf_r+0x1e>
 80073e2:	2340      	movs	r3, #64	; 0x40
 80073e4:	2000      	movs	r0, #0
 80073e6:	6023      	str	r3, [r4, #0]
 80073e8:	b016      	add	sp, #88	; 0x58
 80073ea:	bd70      	pop	{r4, r5, r6, pc}

080073ec <__smakebuf_r>:
 80073ec:	898b      	ldrh	r3, [r1, #12]
 80073ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073f0:	079d      	lsls	r5, r3, #30
 80073f2:	4606      	mov	r6, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	d507      	bpl.n	8007408 <__smakebuf_r+0x1c>
 80073f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	2301      	movs	r3, #1
 8007402:	6163      	str	r3, [r4, #20]
 8007404:	b002      	add	sp, #8
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	ab01      	add	r3, sp, #4
 800740a:	466a      	mov	r2, sp
 800740c:	f7ff ffc9 	bl	80073a2 <__swhatbuf_r>
 8007410:	9900      	ldr	r1, [sp, #0]
 8007412:	4605      	mov	r5, r0
 8007414:	4630      	mov	r0, r6
 8007416:	f000 fc37 	bl	8007c88 <_malloc_r>
 800741a:	b948      	cbnz	r0, 8007430 <__smakebuf_r+0x44>
 800741c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007420:	059a      	lsls	r2, r3, #22
 8007422:	d4ef      	bmi.n	8007404 <__smakebuf_r+0x18>
 8007424:	f023 0303 	bic.w	r3, r3, #3
 8007428:	f043 0302 	orr.w	r3, r3, #2
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	e7e3      	b.n	80073f8 <__smakebuf_r+0xc>
 8007430:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <__smakebuf_r+0x7c>)
 8007432:	62b3      	str	r3, [r6, #40]	; 0x28
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	6020      	str	r0, [r4, #0]
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	9b00      	ldr	r3, [sp, #0]
 8007440:	6163      	str	r3, [r4, #20]
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	6120      	str	r0, [r4, #16]
 8007446:	b15b      	cbz	r3, 8007460 <__smakebuf_r+0x74>
 8007448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800744c:	4630      	mov	r0, r6
 800744e:	f000 fea1 	bl	8008194 <_isatty_r>
 8007452:	b128      	cbz	r0, 8007460 <__smakebuf_r+0x74>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	89a0      	ldrh	r0, [r4, #12]
 8007462:	4305      	orrs	r5, r0
 8007464:	81a5      	strh	r5, [r4, #12]
 8007466:	e7cd      	b.n	8007404 <__smakebuf_r+0x18>
 8007468:	080071f1 	.word	0x080071f1

0800746c <malloc>:
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <malloc+0xc>)
 800746e:	4601      	mov	r1, r0
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	f000 bc09 	b.w	8007c88 <_malloc_r>
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c

0800747c <_Balloc>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007480:	4604      	mov	r4, r0
 8007482:	460d      	mov	r5, r1
 8007484:	b976      	cbnz	r6, 80074a4 <_Balloc+0x28>
 8007486:	2010      	movs	r0, #16
 8007488:	f7ff fff0 	bl	800746c <malloc>
 800748c:	4602      	mov	r2, r0
 800748e:	6260      	str	r0, [r4, #36]	; 0x24
 8007490:	b920      	cbnz	r0, 800749c <_Balloc+0x20>
 8007492:	4b18      	ldr	r3, [pc, #96]	; (80074f4 <_Balloc+0x78>)
 8007494:	4818      	ldr	r0, [pc, #96]	; (80074f8 <_Balloc+0x7c>)
 8007496:	2166      	movs	r1, #102	; 0x66
 8007498:	f000 fe2a 	bl	80080f0 <__assert_func>
 800749c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a0:	6006      	str	r6, [r0, #0]
 80074a2:	60c6      	str	r6, [r0, #12]
 80074a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074a6:	68f3      	ldr	r3, [r6, #12]
 80074a8:	b183      	cbz	r3, 80074cc <_Balloc+0x50>
 80074aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074b2:	b9b8      	cbnz	r0, 80074e4 <_Balloc+0x68>
 80074b4:	2101      	movs	r1, #1
 80074b6:	fa01 f605 	lsl.w	r6, r1, r5
 80074ba:	1d72      	adds	r2, r6, #5
 80074bc:	0092      	lsls	r2, r2, #2
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 fb60 	bl	8007b84 <_calloc_r>
 80074c4:	b160      	cbz	r0, 80074e0 <_Balloc+0x64>
 80074c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ca:	e00e      	b.n	80074ea <_Balloc+0x6e>
 80074cc:	2221      	movs	r2, #33	; 0x21
 80074ce:	2104      	movs	r1, #4
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fb57 	bl	8007b84 <_calloc_r>
 80074d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d8:	60f0      	str	r0, [r6, #12]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e4      	bne.n	80074aa <_Balloc+0x2e>
 80074e0:	2000      	movs	r0, #0
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	6802      	ldr	r2, [r0, #0]
 80074e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ea:	2300      	movs	r3, #0
 80074ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074f0:	e7f7      	b.n	80074e2 <_Balloc+0x66>
 80074f2:	bf00      	nop
 80074f4:	08008465 	.word	0x08008465
 80074f8:	08008548 	.word	0x08008548

080074fc <_Bfree>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007500:	4605      	mov	r5, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b976      	cbnz	r6, 8007524 <_Bfree+0x28>
 8007506:	2010      	movs	r0, #16
 8007508:	f7ff ffb0 	bl	800746c <malloc>
 800750c:	4602      	mov	r2, r0
 800750e:	6268      	str	r0, [r5, #36]	; 0x24
 8007510:	b920      	cbnz	r0, 800751c <_Bfree+0x20>
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <_Bfree+0x3c>)
 8007514:	4809      	ldr	r0, [pc, #36]	; (800753c <_Bfree+0x40>)
 8007516:	218a      	movs	r1, #138	; 0x8a
 8007518:	f000 fdea 	bl	80080f0 <__assert_func>
 800751c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007520:	6006      	str	r6, [r0, #0]
 8007522:	60c6      	str	r6, [r0, #12]
 8007524:	b13c      	cbz	r4, 8007536 <_Bfree+0x3a>
 8007526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007528:	6862      	ldr	r2, [r4, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007530:	6021      	str	r1, [r4, #0]
 8007532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	08008465 	.word	0x08008465
 800753c:	08008548 	.word	0x08008548

08007540 <__multadd>:
 8007540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007544:	690d      	ldr	r5, [r1, #16]
 8007546:	4607      	mov	r7, r0
 8007548:	460c      	mov	r4, r1
 800754a:	461e      	mov	r6, r3
 800754c:	f101 0c14 	add.w	ip, r1, #20
 8007550:	2000      	movs	r0, #0
 8007552:	f8dc 3000 	ldr.w	r3, [ip]
 8007556:	b299      	uxth	r1, r3
 8007558:	fb02 6101 	mla	r1, r2, r1, r6
 800755c:	0c1e      	lsrs	r6, r3, #16
 800755e:	0c0b      	lsrs	r3, r1, #16
 8007560:	fb02 3306 	mla	r3, r2, r6, r3
 8007564:	b289      	uxth	r1, r1
 8007566:	3001      	adds	r0, #1
 8007568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800756c:	4285      	cmp	r5, r0
 800756e:	f84c 1b04 	str.w	r1, [ip], #4
 8007572:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007576:	dcec      	bgt.n	8007552 <__multadd+0x12>
 8007578:	b30e      	cbz	r6, 80075be <__multadd+0x7e>
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	42ab      	cmp	r3, r5
 800757e:	dc19      	bgt.n	80075b4 <__multadd+0x74>
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	4638      	mov	r0, r7
 8007584:	3101      	adds	r1, #1
 8007586:	f7ff ff79 	bl	800747c <_Balloc>
 800758a:	4680      	mov	r8, r0
 800758c:	b928      	cbnz	r0, 800759a <__multadd+0x5a>
 800758e:	4602      	mov	r2, r0
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <__multadd+0x84>)
 8007592:	480d      	ldr	r0, [pc, #52]	; (80075c8 <__multadd+0x88>)
 8007594:	21b5      	movs	r1, #181	; 0xb5
 8007596:	f000 fdab 	bl	80080f0 <__assert_func>
 800759a:	6922      	ldr	r2, [r4, #16]
 800759c:	3202      	adds	r2, #2
 800759e:	f104 010c 	add.w	r1, r4, #12
 80075a2:	0092      	lsls	r2, r2, #2
 80075a4:	300c      	adds	r0, #12
 80075a6:	f7fe f8f3 	bl	8005790 <memcpy>
 80075aa:	4621      	mov	r1, r4
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff ffa5 	bl	80074fc <_Bfree>
 80075b2:	4644      	mov	r4, r8
 80075b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075b8:	3501      	adds	r5, #1
 80075ba:	615e      	str	r6, [r3, #20]
 80075bc:	6125      	str	r5, [r4, #16]
 80075be:	4620      	mov	r0, r4
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	080084d7 	.word	0x080084d7
 80075c8:	08008548 	.word	0x08008548

080075cc <__hi0bits>:
 80075cc:	0c03      	lsrs	r3, r0, #16
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	b9d3      	cbnz	r3, 8007608 <__hi0bits+0x3c>
 80075d2:	0400      	lsls	r0, r0, #16
 80075d4:	2310      	movs	r3, #16
 80075d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075da:	bf04      	itt	eq
 80075dc:	0200      	lsleq	r0, r0, #8
 80075de:	3308      	addeq	r3, #8
 80075e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075e4:	bf04      	itt	eq
 80075e6:	0100      	lsleq	r0, r0, #4
 80075e8:	3304      	addeq	r3, #4
 80075ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075ee:	bf04      	itt	eq
 80075f0:	0080      	lsleq	r0, r0, #2
 80075f2:	3302      	addeq	r3, #2
 80075f4:	2800      	cmp	r0, #0
 80075f6:	db05      	blt.n	8007604 <__hi0bits+0x38>
 80075f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075fc:	f103 0301 	add.w	r3, r3, #1
 8007600:	bf08      	it	eq
 8007602:	2320      	moveq	r3, #32
 8007604:	4618      	mov	r0, r3
 8007606:	4770      	bx	lr
 8007608:	2300      	movs	r3, #0
 800760a:	e7e4      	b.n	80075d6 <__hi0bits+0xa>

0800760c <__lo0bits>:
 800760c:	6803      	ldr	r3, [r0, #0]
 800760e:	f013 0207 	ands.w	r2, r3, #7
 8007612:	4601      	mov	r1, r0
 8007614:	d00b      	beq.n	800762e <__lo0bits+0x22>
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d423      	bmi.n	8007662 <__lo0bits+0x56>
 800761a:	0798      	lsls	r0, r3, #30
 800761c:	bf49      	itett	mi
 800761e:	085b      	lsrmi	r3, r3, #1
 8007620:	089b      	lsrpl	r3, r3, #2
 8007622:	2001      	movmi	r0, #1
 8007624:	600b      	strmi	r3, [r1, #0]
 8007626:	bf5c      	itt	pl
 8007628:	600b      	strpl	r3, [r1, #0]
 800762a:	2002      	movpl	r0, #2
 800762c:	4770      	bx	lr
 800762e:	b298      	uxth	r0, r3
 8007630:	b9a8      	cbnz	r0, 800765e <__lo0bits+0x52>
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	2010      	movs	r0, #16
 8007636:	b2da      	uxtb	r2, r3
 8007638:	b90a      	cbnz	r2, 800763e <__lo0bits+0x32>
 800763a:	3008      	adds	r0, #8
 800763c:	0a1b      	lsrs	r3, r3, #8
 800763e:	071a      	lsls	r2, r3, #28
 8007640:	bf04      	itt	eq
 8007642:	091b      	lsreq	r3, r3, #4
 8007644:	3004      	addeq	r0, #4
 8007646:	079a      	lsls	r2, r3, #30
 8007648:	bf04      	itt	eq
 800764a:	089b      	lsreq	r3, r3, #2
 800764c:	3002      	addeq	r0, #2
 800764e:	07da      	lsls	r2, r3, #31
 8007650:	d403      	bmi.n	800765a <__lo0bits+0x4e>
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	f100 0001 	add.w	r0, r0, #1
 8007658:	d005      	beq.n	8007666 <__lo0bits+0x5a>
 800765a:	600b      	str	r3, [r1, #0]
 800765c:	4770      	bx	lr
 800765e:	4610      	mov	r0, r2
 8007660:	e7e9      	b.n	8007636 <__lo0bits+0x2a>
 8007662:	2000      	movs	r0, #0
 8007664:	4770      	bx	lr
 8007666:	2020      	movs	r0, #32
 8007668:	4770      	bx	lr
	...

0800766c <__i2b>:
 800766c:	b510      	push	{r4, lr}
 800766e:	460c      	mov	r4, r1
 8007670:	2101      	movs	r1, #1
 8007672:	f7ff ff03 	bl	800747c <_Balloc>
 8007676:	4602      	mov	r2, r0
 8007678:	b928      	cbnz	r0, 8007686 <__i2b+0x1a>
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <__i2b+0x24>)
 800767c:	4805      	ldr	r0, [pc, #20]	; (8007694 <__i2b+0x28>)
 800767e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007682:	f000 fd35 	bl	80080f0 <__assert_func>
 8007686:	2301      	movs	r3, #1
 8007688:	6144      	str	r4, [r0, #20]
 800768a:	6103      	str	r3, [r0, #16]
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop
 8007690:	080084d7 	.word	0x080084d7
 8007694:	08008548 	.word	0x08008548

08007698 <__multiply>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	4691      	mov	r9, r2
 800769e:	690a      	ldr	r2, [r1, #16]
 80076a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	bfb8      	it	lt
 80076a8:	460b      	movlt	r3, r1
 80076aa:	460c      	mov	r4, r1
 80076ac:	bfbc      	itt	lt
 80076ae:	464c      	movlt	r4, r9
 80076b0:	4699      	movlt	r9, r3
 80076b2:	6927      	ldr	r7, [r4, #16]
 80076b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076b8:	68a3      	ldr	r3, [r4, #8]
 80076ba:	6861      	ldr	r1, [r4, #4]
 80076bc:	eb07 060a 	add.w	r6, r7, sl
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	b085      	sub	sp, #20
 80076c4:	bfb8      	it	lt
 80076c6:	3101      	addlt	r1, #1
 80076c8:	f7ff fed8 	bl	800747c <_Balloc>
 80076cc:	b930      	cbnz	r0, 80076dc <__multiply+0x44>
 80076ce:	4602      	mov	r2, r0
 80076d0:	4b44      	ldr	r3, [pc, #272]	; (80077e4 <__multiply+0x14c>)
 80076d2:	4845      	ldr	r0, [pc, #276]	; (80077e8 <__multiply+0x150>)
 80076d4:	f240 115d 	movw	r1, #349	; 0x15d
 80076d8:	f000 fd0a 	bl	80080f0 <__assert_func>
 80076dc:	f100 0514 	add.w	r5, r0, #20
 80076e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076e4:	462b      	mov	r3, r5
 80076e6:	2200      	movs	r2, #0
 80076e8:	4543      	cmp	r3, r8
 80076ea:	d321      	bcc.n	8007730 <__multiply+0x98>
 80076ec:	f104 0314 	add.w	r3, r4, #20
 80076f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076f4:	f109 0314 	add.w	r3, r9, #20
 80076f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	1b3a      	subs	r2, r7, r4
 8007700:	3a15      	subs	r2, #21
 8007702:	f022 0203 	bic.w	r2, r2, #3
 8007706:	3204      	adds	r2, #4
 8007708:	f104 0115 	add.w	r1, r4, #21
 800770c:	428f      	cmp	r7, r1
 800770e:	bf38      	it	cc
 8007710:	2204      	movcc	r2, #4
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9a02      	ldr	r2, [sp, #8]
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	429a      	cmp	r2, r3
 800771a:	d80c      	bhi.n	8007736 <__multiply+0x9e>
 800771c:	2e00      	cmp	r6, #0
 800771e:	dd03      	ble.n	8007728 <__multiply+0x90>
 8007720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007724:	2b00      	cmp	r3, #0
 8007726:	d05a      	beq.n	80077de <__multiply+0x146>
 8007728:	6106      	str	r6, [r0, #16]
 800772a:	b005      	add	sp, #20
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	f843 2b04 	str.w	r2, [r3], #4
 8007734:	e7d8      	b.n	80076e8 <__multiply+0x50>
 8007736:	f8b3 a000 	ldrh.w	sl, [r3]
 800773a:	f1ba 0f00 	cmp.w	sl, #0
 800773e:	d024      	beq.n	800778a <__multiply+0xf2>
 8007740:	f104 0e14 	add.w	lr, r4, #20
 8007744:	46a9      	mov	r9, r5
 8007746:	f04f 0c00 	mov.w	ip, #0
 800774a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800774e:	f8d9 1000 	ldr.w	r1, [r9]
 8007752:	fa1f fb82 	uxth.w	fp, r2
 8007756:	b289      	uxth	r1, r1
 8007758:	fb0a 110b 	mla	r1, sl, fp, r1
 800775c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007760:	f8d9 2000 	ldr.w	r2, [r9]
 8007764:	4461      	add	r1, ip
 8007766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800776a:	fb0a c20b 	mla	r2, sl, fp, ip
 800776e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007772:	b289      	uxth	r1, r1
 8007774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007778:	4577      	cmp	r7, lr
 800777a:	f849 1b04 	str.w	r1, [r9], #4
 800777e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007782:	d8e2      	bhi.n	800774a <__multiply+0xb2>
 8007784:	9a01      	ldr	r2, [sp, #4]
 8007786:	f845 c002 	str.w	ip, [r5, r2]
 800778a:	9a03      	ldr	r2, [sp, #12]
 800778c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007790:	3304      	adds	r3, #4
 8007792:	f1b9 0f00 	cmp.w	r9, #0
 8007796:	d020      	beq.n	80077da <__multiply+0x142>
 8007798:	6829      	ldr	r1, [r5, #0]
 800779a:	f104 0c14 	add.w	ip, r4, #20
 800779e:	46ae      	mov	lr, r5
 80077a0:	f04f 0a00 	mov.w	sl, #0
 80077a4:	f8bc b000 	ldrh.w	fp, [ip]
 80077a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077ac:	fb09 220b 	mla	r2, r9, fp, r2
 80077b0:	4492      	add	sl, r2
 80077b2:	b289      	uxth	r1, r1
 80077b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077b8:	f84e 1b04 	str.w	r1, [lr], #4
 80077bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077c0:	f8be 1000 	ldrh.w	r1, [lr]
 80077c4:	0c12      	lsrs	r2, r2, #16
 80077c6:	fb09 1102 	mla	r1, r9, r2, r1
 80077ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077ce:	4567      	cmp	r7, ip
 80077d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077d4:	d8e6      	bhi.n	80077a4 <__multiply+0x10c>
 80077d6:	9a01      	ldr	r2, [sp, #4]
 80077d8:	50a9      	str	r1, [r5, r2]
 80077da:	3504      	adds	r5, #4
 80077dc:	e79a      	b.n	8007714 <__multiply+0x7c>
 80077de:	3e01      	subs	r6, #1
 80077e0:	e79c      	b.n	800771c <__multiply+0x84>
 80077e2:	bf00      	nop
 80077e4:	080084d7 	.word	0x080084d7
 80077e8:	08008548 	.word	0x08008548

080077ec <__pow5mult>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	4615      	mov	r5, r2
 80077f2:	f012 0203 	ands.w	r2, r2, #3
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	d007      	beq.n	800780c <__pow5mult+0x20>
 80077fc:	4c25      	ldr	r4, [pc, #148]	; (8007894 <__pow5mult+0xa8>)
 80077fe:	3a01      	subs	r2, #1
 8007800:	2300      	movs	r3, #0
 8007802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007806:	f7ff fe9b 	bl	8007540 <__multadd>
 800780a:	4607      	mov	r7, r0
 800780c:	10ad      	asrs	r5, r5, #2
 800780e:	d03d      	beq.n	800788c <__pow5mult+0xa0>
 8007810:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007812:	b97c      	cbnz	r4, 8007834 <__pow5mult+0x48>
 8007814:	2010      	movs	r0, #16
 8007816:	f7ff fe29 	bl	800746c <malloc>
 800781a:	4602      	mov	r2, r0
 800781c:	6270      	str	r0, [r6, #36]	; 0x24
 800781e:	b928      	cbnz	r0, 800782c <__pow5mult+0x40>
 8007820:	4b1d      	ldr	r3, [pc, #116]	; (8007898 <__pow5mult+0xac>)
 8007822:	481e      	ldr	r0, [pc, #120]	; (800789c <__pow5mult+0xb0>)
 8007824:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007828:	f000 fc62 	bl	80080f0 <__assert_func>
 800782c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007830:	6004      	str	r4, [r0, #0]
 8007832:	60c4      	str	r4, [r0, #12]
 8007834:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800783c:	b94c      	cbnz	r4, 8007852 <__pow5mult+0x66>
 800783e:	f240 2171 	movw	r1, #625	; 0x271
 8007842:	4630      	mov	r0, r6
 8007844:	f7ff ff12 	bl	800766c <__i2b>
 8007848:	2300      	movs	r3, #0
 800784a:	f8c8 0008 	str.w	r0, [r8, #8]
 800784e:	4604      	mov	r4, r0
 8007850:	6003      	str	r3, [r0, #0]
 8007852:	f04f 0900 	mov.w	r9, #0
 8007856:	07eb      	lsls	r3, r5, #31
 8007858:	d50a      	bpl.n	8007870 <__pow5mult+0x84>
 800785a:	4639      	mov	r1, r7
 800785c:	4622      	mov	r2, r4
 800785e:	4630      	mov	r0, r6
 8007860:	f7ff ff1a 	bl	8007698 <__multiply>
 8007864:	4639      	mov	r1, r7
 8007866:	4680      	mov	r8, r0
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff fe47 	bl	80074fc <_Bfree>
 800786e:	4647      	mov	r7, r8
 8007870:	106d      	asrs	r5, r5, #1
 8007872:	d00b      	beq.n	800788c <__pow5mult+0xa0>
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	b938      	cbnz	r0, 8007888 <__pow5mult+0x9c>
 8007878:	4622      	mov	r2, r4
 800787a:	4621      	mov	r1, r4
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff ff0b 	bl	8007698 <__multiply>
 8007882:	6020      	str	r0, [r4, #0]
 8007884:	f8c0 9000 	str.w	r9, [r0]
 8007888:	4604      	mov	r4, r0
 800788a:	e7e4      	b.n	8007856 <__pow5mult+0x6a>
 800788c:	4638      	mov	r0, r7
 800788e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007892:	bf00      	nop
 8007894:	08008698 	.word	0x08008698
 8007898:	08008465 	.word	0x08008465
 800789c:	08008548 	.word	0x08008548

080078a0 <__lshift>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	460c      	mov	r4, r1
 80078a6:	6849      	ldr	r1, [r1, #4]
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ae:	68a3      	ldr	r3, [r4, #8]
 80078b0:	4607      	mov	r7, r0
 80078b2:	4691      	mov	r9, r2
 80078b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078b8:	f108 0601 	add.w	r6, r8, #1
 80078bc:	42b3      	cmp	r3, r6
 80078be:	db0b      	blt.n	80078d8 <__lshift+0x38>
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff fddb 	bl	800747c <_Balloc>
 80078c6:	4605      	mov	r5, r0
 80078c8:	b948      	cbnz	r0, 80078de <__lshift+0x3e>
 80078ca:	4602      	mov	r2, r0
 80078cc:	4b2a      	ldr	r3, [pc, #168]	; (8007978 <__lshift+0xd8>)
 80078ce:	482b      	ldr	r0, [pc, #172]	; (800797c <__lshift+0xdc>)
 80078d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078d4:	f000 fc0c 	bl	80080f0 <__assert_func>
 80078d8:	3101      	adds	r1, #1
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	e7ee      	b.n	80078bc <__lshift+0x1c>
 80078de:	2300      	movs	r3, #0
 80078e0:	f100 0114 	add.w	r1, r0, #20
 80078e4:	f100 0210 	add.w	r2, r0, #16
 80078e8:	4618      	mov	r0, r3
 80078ea:	4553      	cmp	r3, sl
 80078ec:	db37      	blt.n	800795e <__lshift+0xbe>
 80078ee:	6920      	ldr	r0, [r4, #16]
 80078f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078f4:	f104 0314 	add.w	r3, r4, #20
 80078f8:	f019 091f 	ands.w	r9, r9, #31
 80078fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007900:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007904:	d02f      	beq.n	8007966 <__lshift+0xc6>
 8007906:	f1c9 0e20 	rsb	lr, r9, #32
 800790a:	468a      	mov	sl, r1
 800790c:	f04f 0c00 	mov.w	ip, #0
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	fa02 f209 	lsl.w	r2, r2, r9
 8007916:	ea42 020c 	orr.w	r2, r2, ip
 800791a:	f84a 2b04 	str.w	r2, [sl], #4
 800791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007922:	4298      	cmp	r0, r3
 8007924:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007928:	d8f2      	bhi.n	8007910 <__lshift+0x70>
 800792a:	1b03      	subs	r3, r0, r4
 800792c:	3b15      	subs	r3, #21
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	3304      	adds	r3, #4
 8007934:	f104 0215 	add.w	r2, r4, #21
 8007938:	4290      	cmp	r0, r2
 800793a:	bf38      	it	cc
 800793c:	2304      	movcc	r3, #4
 800793e:	f841 c003 	str.w	ip, [r1, r3]
 8007942:	f1bc 0f00 	cmp.w	ip, #0
 8007946:	d001      	beq.n	800794c <__lshift+0xac>
 8007948:	f108 0602 	add.w	r6, r8, #2
 800794c:	3e01      	subs	r6, #1
 800794e:	4638      	mov	r0, r7
 8007950:	612e      	str	r6, [r5, #16]
 8007952:	4621      	mov	r1, r4
 8007954:	f7ff fdd2 	bl	80074fc <_Bfree>
 8007958:	4628      	mov	r0, r5
 800795a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007962:	3301      	adds	r3, #1
 8007964:	e7c1      	b.n	80078ea <__lshift+0x4a>
 8007966:	3904      	subs	r1, #4
 8007968:	f853 2b04 	ldr.w	r2, [r3], #4
 800796c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007970:	4298      	cmp	r0, r3
 8007972:	d8f9      	bhi.n	8007968 <__lshift+0xc8>
 8007974:	e7ea      	b.n	800794c <__lshift+0xac>
 8007976:	bf00      	nop
 8007978:	080084d7 	.word	0x080084d7
 800797c:	08008548 	.word	0x08008548

08007980 <__mcmp>:
 8007980:	b530      	push	{r4, r5, lr}
 8007982:	6902      	ldr	r2, [r0, #16]
 8007984:	690c      	ldr	r4, [r1, #16]
 8007986:	1b12      	subs	r2, r2, r4
 8007988:	d10e      	bne.n	80079a8 <__mcmp+0x28>
 800798a:	f100 0314 	add.w	r3, r0, #20
 800798e:	3114      	adds	r1, #20
 8007990:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007994:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007998:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800799c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079a0:	42a5      	cmp	r5, r4
 80079a2:	d003      	beq.n	80079ac <__mcmp+0x2c>
 80079a4:	d305      	bcc.n	80079b2 <__mcmp+0x32>
 80079a6:	2201      	movs	r2, #1
 80079a8:	4610      	mov	r0, r2
 80079aa:	bd30      	pop	{r4, r5, pc}
 80079ac:	4283      	cmp	r3, r0
 80079ae:	d3f3      	bcc.n	8007998 <__mcmp+0x18>
 80079b0:	e7fa      	b.n	80079a8 <__mcmp+0x28>
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	e7f7      	b.n	80079a8 <__mcmp+0x28>

080079b8 <__mdiff>:
 80079b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	460c      	mov	r4, r1
 80079be:	4606      	mov	r6, r0
 80079c0:	4611      	mov	r1, r2
 80079c2:	4620      	mov	r0, r4
 80079c4:	4690      	mov	r8, r2
 80079c6:	f7ff ffdb 	bl	8007980 <__mcmp>
 80079ca:	1e05      	subs	r5, r0, #0
 80079cc:	d110      	bne.n	80079f0 <__mdiff+0x38>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff fd53 	bl	800747c <_Balloc>
 80079d6:	b930      	cbnz	r0, 80079e6 <__mdiff+0x2e>
 80079d8:	4b3a      	ldr	r3, [pc, #232]	; (8007ac4 <__mdiff+0x10c>)
 80079da:	4602      	mov	r2, r0
 80079dc:	f240 2132 	movw	r1, #562	; 0x232
 80079e0:	4839      	ldr	r0, [pc, #228]	; (8007ac8 <__mdiff+0x110>)
 80079e2:	f000 fb85 	bl	80080f0 <__assert_func>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f0:	bfa4      	itt	ge
 80079f2:	4643      	movge	r3, r8
 80079f4:	46a0      	movge	r8, r4
 80079f6:	4630      	mov	r0, r6
 80079f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079fc:	bfa6      	itte	ge
 80079fe:	461c      	movge	r4, r3
 8007a00:	2500      	movge	r5, #0
 8007a02:	2501      	movlt	r5, #1
 8007a04:	f7ff fd3a 	bl	800747c <_Balloc>
 8007a08:	b920      	cbnz	r0, 8007a14 <__mdiff+0x5c>
 8007a0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ac4 <__mdiff+0x10c>)
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a12:	e7e5      	b.n	80079e0 <__mdiff+0x28>
 8007a14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a18:	6926      	ldr	r6, [r4, #16]
 8007a1a:	60c5      	str	r5, [r0, #12]
 8007a1c:	f104 0914 	add.w	r9, r4, #20
 8007a20:	f108 0514 	add.w	r5, r8, #20
 8007a24:	f100 0e14 	add.w	lr, r0, #20
 8007a28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a30:	f108 0210 	add.w	r2, r8, #16
 8007a34:	46f2      	mov	sl, lr
 8007a36:	2100      	movs	r1, #0
 8007a38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a40:	fa1f f883 	uxth.w	r8, r3
 8007a44:	fa11 f18b 	uxtah	r1, r1, fp
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	eba1 0808 	sub.w	r8, r1, r8
 8007a4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a56:	fa1f f888 	uxth.w	r8, r8
 8007a5a:	1419      	asrs	r1, r3, #16
 8007a5c:	454e      	cmp	r6, r9
 8007a5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a62:	f84a 3b04 	str.w	r3, [sl], #4
 8007a66:	d8e7      	bhi.n	8007a38 <__mdiff+0x80>
 8007a68:	1b33      	subs	r3, r6, r4
 8007a6a:	3b15      	subs	r3, #21
 8007a6c:	f023 0303 	bic.w	r3, r3, #3
 8007a70:	3304      	adds	r3, #4
 8007a72:	3415      	adds	r4, #21
 8007a74:	42a6      	cmp	r6, r4
 8007a76:	bf38      	it	cc
 8007a78:	2304      	movcc	r3, #4
 8007a7a:	441d      	add	r5, r3
 8007a7c:	4473      	add	r3, lr
 8007a7e:	469e      	mov	lr, r3
 8007a80:	462e      	mov	r6, r5
 8007a82:	4566      	cmp	r6, ip
 8007a84:	d30e      	bcc.n	8007aa4 <__mdiff+0xec>
 8007a86:	f10c 0203 	add.w	r2, ip, #3
 8007a8a:	1b52      	subs	r2, r2, r5
 8007a8c:	f022 0203 	bic.w	r2, r2, #3
 8007a90:	3d03      	subs	r5, #3
 8007a92:	45ac      	cmp	ip, r5
 8007a94:	bf38      	it	cc
 8007a96:	2200      	movcc	r2, #0
 8007a98:	441a      	add	r2, r3
 8007a9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a9e:	b17b      	cbz	r3, 8007ac0 <__mdiff+0x108>
 8007aa0:	6107      	str	r7, [r0, #16]
 8007aa2:	e7a3      	b.n	80079ec <__mdiff+0x34>
 8007aa4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007aa8:	fa11 f288 	uxtah	r2, r1, r8
 8007aac:	1414      	asrs	r4, r2, #16
 8007aae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ab2:	b292      	uxth	r2, r2
 8007ab4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ab8:	f84e 2b04 	str.w	r2, [lr], #4
 8007abc:	1421      	asrs	r1, r4, #16
 8007abe:	e7e0      	b.n	8007a82 <__mdiff+0xca>
 8007ac0:	3f01      	subs	r7, #1
 8007ac2:	e7ea      	b.n	8007a9a <__mdiff+0xe2>
 8007ac4:	080084d7 	.word	0x080084d7
 8007ac8:	08008548 	.word	0x08008548

08007acc <__d2b>:
 8007acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	4689      	mov	r9, r1
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	ec57 6b10 	vmov	r6, r7, d0
 8007ad8:	4690      	mov	r8, r2
 8007ada:	f7ff fccf 	bl	800747c <_Balloc>
 8007ade:	4604      	mov	r4, r0
 8007ae0:	b930      	cbnz	r0, 8007af0 <__d2b+0x24>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <__d2b+0xb0>)
 8007ae6:	4826      	ldr	r0, [pc, #152]	; (8007b80 <__d2b+0xb4>)
 8007ae8:	f240 310a 	movw	r1, #778	; 0x30a
 8007aec:	f000 fb00 	bl	80080f0 <__assert_func>
 8007af0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007af4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007af8:	bb35      	cbnz	r5, 8007b48 <__d2b+0x7c>
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	d028      	beq.n	8007b52 <__d2b+0x86>
 8007b00:	4668      	mov	r0, sp
 8007b02:	9600      	str	r6, [sp, #0]
 8007b04:	f7ff fd82 	bl	800760c <__lo0bits>
 8007b08:	9900      	ldr	r1, [sp, #0]
 8007b0a:	b300      	cbz	r0, 8007b4e <__d2b+0x82>
 8007b0c:	9a01      	ldr	r2, [sp, #4]
 8007b0e:	f1c0 0320 	rsb	r3, r0, #32
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	430b      	orrs	r3, r1
 8007b18:	40c2      	lsrs	r2, r0
 8007b1a:	6163      	str	r3, [r4, #20]
 8007b1c:	9201      	str	r2, [sp, #4]
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	61a3      	str	r3, [r4, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf14      	ite	ne
 8007b26:	2202      	movne	r2, #2
 8007b28:	2201      	moveq	r2, #1
 8007b2a:	6122      	str	r2, [r4, #16]
 8007b2c:	b1d5      	cbz	r5, 8007b64 <__d2b+0x98>
 8007b2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b32:	4405      	add	r5, r0
 8007b34:	f8c9 5000 	str.w	r5, [r9]
 8007b38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b3c:	f8c8 0000 	str.w	r0, [r8]
 8007b40:	4620      	mov	r0, r4
 8007b42:	b003      	add	sp, #12
 8007b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b4c:	e7d5      	b.n	8007afa <__d2b+0x2e>
 8007b4e:	6161      	str	r1, [r4, #20]
 8007b50:	e7e5      	b.n	8007b1e <__d2b+0x52>
 8007b52:	a801      	add	r0, sp, #4
 8007b54:	f7ff fd5a 	bl	800760c <__lo0bits>
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	6163      	str	r3, [r4, #20]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	6122      	str	r2, [r4, #16]
 8007b60:	3020      	adds	r0, #32
 8007b62:	e7e3      	b.n	8007b2c <__d2b+0x60>
 8007b64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b6c:	f8c9 0000 	str.w	r0, [r9]
 8007b70:	6918      	ldr	r0, [r3, #16]
 8007b72:	f7ff fd2b 	bl	80075cc <__hi0bits>
 8007b76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b7a:	e7df      	b.n	8007b3c <__d2b+0x70>
 8007b7c:	080084d7 	.word	0x080084d7
 8007b80:	08008548 	.word	0x08008548

08007b84 <_calloc_r>:
 8007b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b86:	fba1 2402 	umull	r2, r4, r1, r2
 8007b8a:	b94c      	cbnz	r4, 8007ba0 <_calloc_r+0x1c>
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	f000 f87a 	bl	8007c88 <_malloc_r>
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	4605      	mov	r5, r0
 8007b98:	b930      	cbnz	r0, 8007ba8 <_calloc_r+0x24>
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	b003      	add	sp, #12
 8007b9e:	bd30      	pop	{r4, r5, pc}
 8007ba0:	220c      	movs	r2, #12
 8007ba2:	6002      	str	r2, [r0, #0]
 8007ba4:	2500      	movs	r5, #0
 8007ba6:	e7f8      	b.n	8007b9a <_calloc_r+0x16>
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f7fd fdff 	bl	80057ac <memset>
 8007bae:	e7f4      	b.n	8007b9a <_calloc_r+0x16>

08007bb0 <_free_r>:
 8007bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d044      	beq.n	8007c40 <_free_r+0x90>
 8007bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bba:	9001      	str	r0, [sp, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8007bc2:	bfb8      	it	lt
 8007bc4:	18e4      	addlt	r4, r4, r3
 8007bc6:	f000 fb19 	bl	80081fc <__malloc_lock>
 8007bca:	4a1e      	ldr	r2, [pc, #120]	; (8007c44 <_free_r+0x94>)
 8007bcc:	9801      	ldr	r0, [sp, #4]
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	b933      	cbnz	r3, 8007be0 <_free_r+0x30>
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	6014      	str	r4, [r2, #0]
 8007bd6:	b003      	add	sp, #12
 8007bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bdc:	f000 bb14 	b.w	8008208 <__malloc_unlock>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d908      	bls.n	8007bf6 <_free_r+0x46>
 8007be4:	6825      	ldr	r5, [r4, #0]
 8007be6:	1961      	adds	r1, r4, r5
 8007be8:	428b      	cmp	r3, r1
 8007bea:	bf01      	itttt	eq
 8007bec:	6819      	ldreq	r1, [r3, #0]
 8007bee:	685b      	ldreq	r3, [r3, #4]
 8007bf0:	1949      	addeq	r1, r1, r5
 8007bf2:	6021      	streq	r1, [r4, #0]
 8007bf4:	e7ed      	b.n	8007bd2 <_free_r+0x22>
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	b10b      	cbz	r3, 8007c00 <_free_r+0x50>
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	d9fa      	bls.n	8007bf6 <_free_r+0x46>
 8007c00:	6811      	ldr	r1, [r2, #0]
 8007c02:	1855      	adds	r5, r2, r1
 8007c04:	42a5      	cmp	r5, r4
 8007c06:	d10b      	bne.n	8007c20 <_free_r+0x70>
 8007c08:	6824      	ldr	r4, [r4, #0]
 8007c0a:	4421      	add	r1, r4
 8007c0c:	1854      	adds	r4, r2, r1
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	6011      	str	r1, [r2, #0]
 8007c12:	d1e0      	bne.n	8007bd6 <_free_r+0x26>
 8007c14:	681c      	ldr	r4, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	6053      	str	r3, [r2, #4]
 8007c1a:	4421      	add	r1, r4
 8007c1c:	6011      	str	r1, [r2, #0]
 8007c1e:	e7da      	b.n	8007bd6 <_free_r+0x26>
 8007c20:	d902      	bls.n	8007c28 <_free_r+0x78>
 8007c22:	230c      	movs	r3, #12
 8007c24:	6003      	str	r3, [r0, #0]
 8007c26:	e7d6      	b.n	8007bd6 <_free_r+0x26>
 8007c28:	6825      	ldr	r5, [r4, #0]
 8007c2a:	1961      	adds	r1, r4, r5
 8007c2c:	428b      	cmp	r3, r1
 8007c2e:	bf04      	itt	eq
 8007c30:	6819      	ldreq	r1, [r3, #0]
 8007c32:	685b      	ldreq	r3, [r3, #4]
 8007c34:	6063      	str	r3, [r4, #4]
 8007c36:	bf04      	itt	eq
 8007c38:	1949      	addeq	r1, r1, r5
 8007c3a:	6021      	streq	r1, [r4, #0]
 8007c3c:	6054      	str	r4, [r2, #4]
 8007c3e:	e7ca      	b.n	8007bd6 <_free_r+0x26>
 8007c40:	b003      	add	sp, #12
 8007c42:	bd30      	pop	{r4, r5, pc}
 8007c44:	200003f0 	.word	0x200003f0

08007c48 <sbrk_aligned>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4e0e      	ldr	r6, [pc, #56]	; (8007c84 <sbrk_aligned+0x3c>)
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	6831      	ldr	r1, [r6, #0]
 8007c50:	4605      	mov	r5, r0
 8007c52:	b911      	cbnz	r1, 8007c5a <sbrk_aligned+0x12>
 8007c54:	f000 f9e6 	bl	8008024 <_sbrk_r>
 8007c58:	6030      	str	r0, [r6, #0]
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 f9e1 	bl	8008024 <_sbrk_r>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d00a      	beq.n	8007c7c <sbrk_aligned+0x34>
 8007c66:	1cc4      	adds	r4, r0, #3
 8007c68:	f024 0403 	bic.w	r4, r4, #3
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d007      	beq.n	8007c80 <sbrk_aligned+0x38>
 8007c70:	1a21      	subs	r1, r4, r0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 f9d6 	bl	8008024 <_sbrk_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d101      	bne.n	8007c80 <sbrk_aligned+0x38>
 8007c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c80:	4620      	mov	r0, r4
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	200003f4 	.word	0x200003f4

08007c88 <_malloc_r>:
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	1ccd      	adds	r5, r1, #3
 8007c8e:	f025 0503 	bic.w	r5, r5, #3
 8007c92:	3508      	adds	r5, #8
 8007c94:	2d0c      	cmp	r5, #12
 8007c96:	bf38      	it	cc
 8007c98:	250c      	movcc	r5, #12
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	db01      	blt.n	8007ca4 <_malloc_r+0x1c>
 8007ca0:	42a9      	cmp	r1, r5
 8007ca2:	d905      	bls.n	8007cb0 <_malloc_r+0x28>
 8007ca4:	230c      	movs	r3, #12
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	2600      	movs	r6, #0
 8007caa:	4630      	mov	r0, r6
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	4e2e      	ldr	r6, [pc, #184]	; (8007d6c <_malloc_r+0xe4>)
 8007cb2:	f000 faa3 	bl	80081fc <__malloc_lock>
 8007cb6:	6833      	ldr	r3, [r6, #0]
 8007cb8:	461c      	mov	r4, r3
 8007cba:	bb34      	cbnz	r4, 8007d0a <_malloc_r+0x82>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7ff ffc2 	bl	8007c48 <sbrk_aligned>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	d14d      	bne.n	8007d66 <_malloc_r+0xde>
 8007cca:	6834      	ldr	r4, [r6, #0]
 8007ccc:	4626      	mov	r6, r4
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d140      	bne.n	8007d54 <_malloc_r+0xcc>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	eb04 0803 	add.w	r8, r4, r3
 8007cdc:	f000 f9a2 	bl	8008024 <_sbrk_r>
 8007ce0:	4580      	cmp	r8, r0
 8007ce2:	d13a      	bne.n	8007d5a <_malloc_r+0xd2>
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	3503      	adds	r5, #3
 8007ce8:	1a6d      	subs	r5, r5, r1
 8007cea:	f025 0503 	bic.w	r5, r5, #3
 8007cee:	3508      	adds	r5, #8
 8007cf0:	2d0c      	cmp	r5, #12
 8007cf2:	bf38      	it	cc
 8007cf4:	250c      	movcc	r5, #12
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff ffa5 	bl	8007c48 <sbrk_aligned>
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d02b      	beq.n	8007d5a <_malloc_r+0xd2>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	442b      	add	r3, r5
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	e00e      	b.n	8007d28 <_malloc_r+0xa0>
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	1b52      	subs	r2, r2, r5
 8007d0e:	d41e      	bmi.n	8007d4e <_malloc_r+0xc6>
 8007d10:	2a0b      	cmp	r2, #11
 8007d12:	d916      	bls.n	8007d42 <_malloc_r+0xba>
 8007d14:	1961      	adds	r1, r4, r5
 8007d16:	42a3      	cmp	r3, r4
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	bf18      	it	ne
 8007d1c:	6059      	strne	r1, [r3, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	bf08      	it	eq
 8007d22:	6031      	streq	r1, [r6, #0]
 8007d24:	5162      	str	r2, [r4, r5]
 8007d26:	604b      	str	r3, [r1, #4]
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f104 060b 	add.w	r6, r4, #11
 8007d2e:	f000 fa6b 	bl	8008208 <__malloc_unlock>
 8007d32:	f026 0607 	bic.w	r6, r6, #7
 8007d36:	1d23      	adds	r3, r4, #4
 8007d38:	1af2      	subs	r2, r6, r3
 8007d3a:	d0b6      	beq.n	8007caa <_malloc_r+0x22>
 8007d3c:	1b9b      	subs	r3, r3, r6
 8007d3e:	50a3      	str	r3, [r4, r2]
 8007d40:	e7b3      	b.n	8007caa <_malloc_r+0x22>
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	bf0c      	ite	eq
 8007d48:	6032      	streq	r2, [r6, #0]
 8007d4a:	605a      	strne	r2, [r3, #4]
 8007d4c:	e7ec      	b.n	8007d28 <_malloc_r+0xa0>
 8007d4e:	4623      	mov	r3, r4
 8007d50:	6864      	ldr	r4, [r4, #4]
 8007d52:	e7b2      	b.n	8007cba <_malloc_r+0x32>
 8007d54:	4634      	mov	r4, r6
 8007d56:	6876      	ldr	r6, [r6, #4]
 8007d58:	e7b9      	b.n	8007cce <_malloc_r+0x46>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	4638      	mov	r0, r7
 8007d60:	f000 fa52 	bl	8008208 <__malloc_unlock>
 8007d64:	e7a1      	b.n	8007caa <_malloc_r+0x22>
 8007d66:	6025      	str	r5, [r4, #0]
 8007d68:	e7de      	b.n	8007d28 <_malloc_r+0xa0>
 8007d6a:	bf00      	nop
 8007d6c:	200003f0 	.word	0x200003f0

08007d70 <__sfputc_r>:
 8007d70:	6893      	ldr	r3, [r2, #8]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	b410      	push	{r4}
 8007d78:	6093      	str	r3, [r2, #8]
 8007d7a:	da08      	bge.n	8007d8e <__sfputc_r+0x1e>
 8007d7c:	6994      	ldr	r4, [r2, #24]
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	db01      	blt.n	8007d86 <__sfputc_r+0x16>
 8007d82:	290a      	cmp	r1, #10
 8007d84:	d103      	bne.n	8007d8e <__sfputc_r+0x1e>
 8007d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8a:	f7fe ba0f 	b.w	80061ac <__swbuf_r>
 8007d8e:	6813      	ldr	r3, [r2, #0]
 8007d90:	1c58      	adds	r0, r3, #1
 8007d92:	6010      	str	r0, [r2, #0]
 8007d94:	7019      	strb	r1, [r3, #0]
 8007d96:	4608      	mov	r0, r1
 8007d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <__sfputs_r>:
 8007d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da0:	4606      	mov	r6, r0
 8007da2:	460f      	mov	r7, r1
 8007da4:	4614      	mov	r4, r2
 8007da6:	18d5      	adds	r5, r2, r3
 8007da8:	42ac      	cmp	r4, r5
 8007daa:	d101      	bne.n	8007db0 <__sfputs_r+0x12>
 8007dac:	2000      	movs	r0, #0
 8007dae:	e007      	b.n	8007dc0 <__sfputs_r+0x22>
 8007db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db4:	463a      	mov	r2, r7
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ffda 	bl	8007d70 <__sfputc_r>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d1f3      	bne.n	8007da8 <__sfputs_r+0xa>
 8007dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dc4 <_vfiprintf_r>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	460d      	mov	r5, r1
 8007dca:	b09d      	sub	sp, #116	; 0x74
 8007dcc:	4614      	mov	r4, r2
 8007dce:	4698      	mov	r8, r3
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	b118      	cbz	r0, 8007ddc <_vfiprintf_r+0x18>
 8007dd4:	6983      	ldr	r3, [r0, #24]
 8007dd6:	b90b      	cbnz	r3, 8007ddc <_vfiprintf_r+0x18>
 8007dd8:	f7ff fa3e 	bl	8007258 <__sinit>
 8007ddc:	4b89      	ldr	r3, [pc, #548]	; (8008004 <_vfiprintf_r+0x240>)
 8007dde:	429d      	cmp	r5, r3
 8007de0:	d11b      	bne.n	8007e1a <_vfiprintf_r+0x56>
 8007de2:	6875      	ldr	r5, [r6, #4]
 8007de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007de6:	07d9      	lsls	r1, r3, #31
 8007de8:	d405      	bmi.n	8007df6 <_vfiprintf_r+0x32>
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	059a      	lsls	r2, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_vfiprintf_r+0x32>
 8007df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007df2:	f7ff fad4 	bl	800739e <__retarget_lock_acquire_recursive>
 8007df6:	89ab      	ldrh	r3, [r5, #12]
 8007df8:	071b      	lsls	r3, r3, #28
 8007dfa:	d501      	bpl.n	8007e00 <_vfiprintf_r+0x3c>
 8007dfc:	692b      	ldr	r3, [r5, #16]
 8007dfe:	b9eb      	cbnz	r3, 8007e3c <_vfiprintf_r+0x78>
 8007e00:	4629      	mov	r1, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7fe fa24 	bl	8006250 <__swsetup_r>
 8007e08:	b1c0      	cbz	r0, 8007e3c <_vfiprintf_r+0x78>
 8007e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0c:	07dc      	lsls	r4, r3, #31
 8007e0e:	d50e      	bpl.n	8007e2e <_vfiprintf_r+0x6a>
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	b01d      	add	sp, #116	; 0x74
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	4b7b      	ldr	r3, [pc, #492]	; (8008008 <_vfiprintf_r+0x244>)
 8007e1c:	429d      	cmp	r5, r3
 8007e1e:	d101      	bne.n	8007e24 <_vfiprintf_r+0x60>
 8007e20:	68b5      	ldr	r5, [r6, #8]
 8007e22:	e7df      	b.n	8007de4 <_vfiprintf_r+0x20>
 8007e24:	4b79      	ldr	r3, [pc, #484]	; (800800c <_vfiprintf_r+0x248>)
 8007e26:	429d      	cmp	r5, r3
 8007e28:	bf08      	it	eq
 8007e2a:	68f5      	ldreq	r5, [r6, #12]
 8007e2c:	e7da      	b.n	8007de4 <_vfiprintf_r+0x20>
 8007e2e:	89ab      	ldrh	r3, [r5, #12]
 8007e30:	0598      	lsls	r0, r3, #22
 8007e32:	d4ed      	bmi.n	8007e10 <_vfiprintf_r+0x4c>
 8007e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e36:	f7ff fab3 	bl	80073a0 <__retarget_lock_release_recursive>
 8007e3a:	e7e9      	b.n	8007e10 <_vfiprintf_r+0x4c>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e40:	2320      	movs	r3, #32
 8007e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4a:	2330      	movs	r3, #48	; 0x30
 8007e4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008010 <_vfiprintf_r+0x24c>
 8007e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e54:	f04f 0901 	mov.w	r9, #1
 8007e58:	4623      	mov	r3, r4
 8007e5a:	469a      	mov	sl, r3
 8007e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e60:	b10a      	cbz	r2, 8007e66 <_vfiprintf_r+0xa2>
 8007e62:	2a25      	cmp	r2, #37	; 0x25
 8007e64:	d1f9      	bne.n	8007e5a <_vfiprintf_r+0x96>
 8007e66:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6a:	d00b      	beq.n	8007e84 <_vfiprintf_r+0xc0>
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	4622      	mov	r2, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ff93 	bl	8007d9e <__sfputs_r>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f000 80aa 	beq.w	8007fd2 <_vfiprintf_r+0x20e>
 8007e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e80:	445a      	add	r2, fp
 8007e82:	9209      	str	r2, [sp, #36]	; 0x24
 8007e84:	f89a 3000 	ldrb.w	r3, [sl]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80a2 	beq.w	8007fd2 <_vfiprintf_r+0x20e>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f04f 32ff 	mov.w	r2, #4294967295
 8007e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e98:	f10a 0a01 	add.w	sl, sl, #1
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	9307      	str	r3, [sp, #28]
 8007ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea6:	4654      	mov	r4, sl
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eae:	4858      	ldr	r0, [pc, #352]	; (8008010 <_vfiprintf_r+0x24c>)
 8007eb0:	f7f8 f99e 	bl	80001f0 <memchr>
 8007eb4:	9a04      	ldr	r2, [sp, #16]
 8007eb6:	b9d8      	cbnz	r0, 8007ef0 <_vfiprintf_r+0x12c>
 8007eb8:	06d1      	lsls	r1, r2, #27
 8007eba:	bf44      	itt	mi
 8007ebc:	2320      	movmi	r3, #32
 8007ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec2:	0713      	lsls	r3, r2, #28
 8007ec4:	bf44      	itt	mi
 8007ec6:	232b      	movmi	r3, #43	; 0x2b
 8007ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed2:	d015      	beq.n	8007f00 <_vfiprintf_r+0x13c>
 8007ed4:	9a07      	ldr	r2, [sp, #28]
 8007ed6:	4654      	mov	r4, sl
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4621      	mov	r1, r4
 8007ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee4:	3b30      	subs	r3, #48	; 0x30
 8007ee6:	2b09      	cmp	r3, #9
 8007ee8:	d94e      	bls.n	8007f88 <_vfiprintf_r+0x1c4>
 8007eea:	b1b0      	cbz	r0, 8007f1a <_vfiprintf_r+0x156>
 8007eec:	9207      	str	r2, [sp, #28]
 8007eee:	e014      	b.n	8007f1a <_vfiprintf_r+0x156>
 8007ef0:	eba0 0308 	sub.w	r3, r0, r8
 8007ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	46a2      	mov	sl, r4
 8007efe:	e7d2      	b.n	8007ea6 <_vfiprintf_r+0xe2>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	1d19      	adds	r1, r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	9103      	str	r1, [sp, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbb      	ittet	lt
 8007f0c:	425b      	neglt	r3, r3
 8007f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f12:	9307      	strge	r3, [sp, #28]
 8007f14:	9307      	strlt	r3, [sp, #28]
 8007f16:	bfb8      	it	lt
 8007f18:	9204      	strlt	r2, [sp, #16]
 8007f1a:	7823      	ldrb	r3, [r4, #0]
 8007f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f1e:	d10c      	bne.n	8007f3a <_vfiprintf_r+0x176>
 8007f20:	7863      	ldrb	r3, [r4, #1]
 8007f22:	2b2a      	cmp	r3, #42	; 0x2a
 8007f24:	d135      	bne.n	8007f92 <_vfiprintf_r+0x1ce>
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	9203      	str	r2, [sp, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bfb8      	it	lt
 8007f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f36:	3402      	adds	r4, #2
 8007f38:	9305      	str	r3, [sp, #20]
 8007f3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008020 <_vfiprintf_r+0x25c>
 8007f3e:	7821      	ldrb	r1, [r4, #0]
 8007f40:	2203      	movs	r2, #3
 8007f42:	4650      	mov	r0, sl
 8007f44:	f7f8 f954 	bl	80001f0 <memchr>
 8007f48:	b140      	cbz	r0, 8007f5c <_vfiprintf_r+0x198>
 8007f4a:	2340      	movs	r3, #64	; 0x40
 8007f4c:	eba0 000a 	sub.w	r0, r0, sl
 8007f50:	fa03 f000 	lsl.w	r0, r3, r0
 8007f54:	9b04      	ldr	r3, [sp, #16]
 8007f56:	4303      	orrs	r3, r0
 8007f58:	3401      	adds	r4, #1
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f60:	482c      	ldr	r0, [pc, #176]	; (8008014 <_vfiprintf_r+0x250>)
 8007f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f66:	2206      	movs	r2, #6
 8007f68:	f7f8 f942 	bl	80001f0 <memchr>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d03f      	beq.n	8007ff0 <_vfiprintf_r+0x22c>
 8007f70:	4b29      	ldr	r3, [pc, #164]	; (8008018 <_vfiprintf_r+0x254>)
 8007f72:	bb1b      	cbnz	r3, 8007fbc <_vfiprintf_r+0x1f8>
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	3307      	adds	r3, #7
 8007f78:	f023 0307 	bic.w	r3, r3, #7
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f82:	443b      	add	r3, r7
 8007f84:	9309      	str	r3, [sp, #36]	; 0x24
 8007f86:	e767      	b.n	8007e58 <_vfiprintf_r+0x94>
 8007f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	2001      	movs	r0, #1
 8007f90:	e7a5      	b.n	8007ede <_vfiprintf_r+0x11a>
 8007f92:	2300      	movs	r3, #0
 8007f94:	3401      	adds	r4, #1
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	f04f 0c0a 	mov.w	ip, #10
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa4:	3a30      	subs	r2, #48	; 0x30
 8007fa6:	2a09      	cmp	r2, #9
 8007fa8:	d903      	bls.n	8007fb2 <_vfiprintf_r+0x1ee>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0c5      	beq.n	8007f3a <_vfiprintf_r+0x176>
 8007fae:	9105      	str	r1, [sp, #20]
 8007fb0:	e7c3      	b.n	8007f3a <_vfiprintf_r+0x176>
 8007fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e7f0      	b.n	8007f9e <_vfiprintf_r+0x1da>
 8007fbc:	ab03      	add	r3, sp, #12
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	4b16      	ldr	r3, [pc, #88]	; (800801c <_vfiprintf_r+0x258>)
 8007fc4:	a904      	add	r1, sp, #16
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7fd fc98 	bl	80058fc <_printf_float>
 8007fcc:	4607      	mov	r7, r0
 8007fce:	1c78      	adds	r0, r7, #1
 8007fd0:	d1d6      	bne.n	8007f80 <_vfiprintf_r+0x1bc>
 8007fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fd4:	07d9      	lsls	r1, r3, #31
 8007fd6:	d405      	bmi.n	8007fe4 <_vfiprintf_r+0x220>
 8007fd8:	89ab      	ldrh	r3, [r5, #12]
 8007fda:	059a      	lsls	r2, r3, #22
 8007fdc:	d402      	bmi.n	8007fe4 <_vfiprintf_r+0x220>
 8007fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fe0:	f7ff f9de 	bl	80073a0 <__retarget_lock_release_recursive>
 8007fe4:	89ab      	ldrh	r3, [r5, #12]
 8007fe6:	065b      	lsls	r3, r3, #25
 8007fe8:	f53f af12 	bmi.w	8007e10 <_vfiprintf_r+0x4c>
 8007fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fee:	e711      	b.n	8007e14 <_vfiprintf_r+0x50>
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <_vfiprintf_r+0x258>)
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7fd ff22 	bl	8005e44 <_printf_i>
 8008000:	e7e4      	b.n	8007fcc <_vfiprintf_r+0x208>
 8008002:	bf00      	nop
 8008004:	08008508 	.word	0x08008508
 8008008:	08008528 	.word	0x08008528
 800800c:	080084e8 	.word	0x080084e8
 8008010:	080086a4 	.word	0x080086a4
 8008014:	080086ae 	.word	0x080086ae
 8008018:	080058fd 	.word	0x080058fd
 800801c:	08007d9f 	.word	0x08007d9f
 8008020:	080086aa 	.word	0x080086aa

08008024 <_sbrk_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d06      	ldr	r5, [pc, #24]	; (8008040 <_sbrk_r+0x1c>)
 8008028:	2300      	movs	r3, #0
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	f7fa f8e2 	bl	80021f8 <_sbrk>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_sbrk_r+0x1a>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_sbrk_r+0x1a>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	200003f8 	.word	0x200003f8

08008044 <__sread>:
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804c:	f000 f8e2 	bl	8008214 <_read_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	bfab      	itete	ge
 8008054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008056:	89a3      	ldrhlt	r3, [r4, #12]
 8008058:	181b      	addge	r3, r3, r0
 800805a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800805e:	bfac      	ite	ge
 8008060:	6563      	strge	r3, [r4, #84]	; 0x54
 8008062:	81a3      	strhlt	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__swrite>:
 8008066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806a:	461f      	mov	r7, r3
 800806c:	898b      	ldrh	r3, [r1, #12]
 800806e:	05db      	lsls	r3, r3, #23
 8008070:	4605      	mov	r5, r0
 8008072:	460c      	mov	r4, r1
 8008074:	4616      	mov	r6, r2
 8008076:	d505      	bpl.n	8008084 <__swrite+0x1e>
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	2302      	movs	r3, #2
 800807e:	2200      	movs	r2, #0
 8008080:	f000 f898 	bl	80081b4 <_lseek_r>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	4632      	mov	r2, r6
 8008092:	463b      	mov	r3, r7
 8008094:	4628      	mov	r0, r5
 8008096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	f000 b817 	b.w	80080cc <_write_r>

0800809e <__sseek>:
 800809e:	b510      	push	{r4, lr}
 80080a0:	460c      	mov	r4, r1
 80080a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a6:	f000 f885 	bl	80081b4 <_lseek_r>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	bf15      	itete	ne
 80080b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ba:	81a3      	strheq	r3, [r4, #12]
 80080bc:	bf18      	it	ne
 80080be:	81a3      	strhne	r3, [r4, #12]
 80080c0:	bd10      	pop	{r4, pc}

080080c2 <__sclose>:
 80080c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c6:	f000 b831 	b.w	800812c <_close_r>
	...

080080cc <_write_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_write_r+0x20>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	602a      	str	r2, [r5, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f7fa f83b 	bl	8002156 <_write>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_write_r+0x1e>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_write_r+0x1e>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	200003f8 	.word	0x200003f8

080080f0 <__assert_func>:
 80080f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080f2:	4614      	mov	r4, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <__assert_func+0x2c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4605      	mov	r5, r0
 80080fc:	68d8      	ldr	r0, [r3, #12]
 80080fe:	b14c      	cbz	r4, 8008114 <__assert_func+0x24>
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <__assert_func+0x30>)
 8008102:	9100      	str	r1, [sp, #0]
 8008104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008108:	4906      	ldr	r1, [pc, #24]	; (8008124 <__assert_func+0x34>)
 800810a:	462b      	mov	r3, r5
 800810c:	f000 f81e 	bl	800814c <fiprintf>
 8008110:	f000 f89f 	bl	8008252 <abort>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__assert_func+0x38>)
 8008116:	461c      	mov	r4, r3
 8008118:	e7f3      	b.n	8008102 <__assert_func+0x12>
 800811a:	bf00      	nop
 800811c:	2000000c 	.word	0x2000000c
 8008120:	080086b5 	.word	0x080086b5
 8008124:	080086c2 	.word	0x080086c2
 8008128:	080086f0 	.word	0x080086f0

0800812c <_close_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_close_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7fa f829 	bl	800218e <_close>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_close_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_close_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200003f8 	.word	0x200003f8

0800814c <fiprintf>:
 800814c:	b40e      	push	{r1, r2, r3}
 800814e:	b503      	push	{r0, r1, lr}
 8008150:	4601      	mov	r1, r0
 8008152:	ab03      	add	r3, sp, #12
 8008154:	4805      	ldr	r0, [pc, #20]	; (800816c <fiprintf+0x20>)
 8008156:	f853 2b04 	ldr.w	r2, [r3], #4
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f7ff fe31 	bl	8007dc4 <_vfiprintf_r>
 8008162:	b002      	add	sp, #8
 8008164:	f85d eb04 	ldr.w	lr, [sp], #4
 8008168:	b003      	add	sp, #12
 800816a:	4770      	bx	lr
 800816c:	2000000c 	.word	0x2000000c

08008170 <_fstat_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_fstat_r+0x20>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f7fa f812 	bl	80021a6 <_fstat>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d102      	bne.n	800818c <_fstat_r+0x1c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	b103      	cbz	r3, 800818c <_fstat_r+0x1c>
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	200003f8 	.word	0x200003f8

08008194 <_isatty_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_isatty_r+0x1c>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7fa f811 	bl	80021c6 <_isatty>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_isatty_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_isatty_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	200003f8 	.word	0x200003f8

080081b4 <_lseek_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_lseek_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7fa f80a 	bl	80021dc <_lseek>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_lseek_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_lseek_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	200003f8 	.word	0x200003f8

080081d8 <__ascii_mbtowc>:
 80081d8:	b082      	sub	sp, #8
 80081da:	b901      	cbnz	r1, 80081de <__ascii_mbtowc+0x6>
 80081dc:	a901      	add	r1, sp, #4
 80081de:	b142      	cbz	r2, 80081f2 <__ascii_mbtowc+0x1a>
 80081e0:	b14b      	cbz	r3, 80081f6 <__ascii_mbtowc+0x1e>
 80081e2:	7813      	ldrb	r3, [r2, #0]
 80081e4:	600b      	str	r3, [r1, #0]
 80081e6:	7812      	ldrb	r2, [r2, #0]
 80081e8:	1e10      	subs	r0, r2, #0
 80081ea:	bf18      	it	ne
 80081ec:	2001      	movne	r0, #1
 80081ee:	b002      	add	sp, #8
 80081f0:	4770      	bx	lr
 80081f2:	4610      	mov	r0, r2
 80081f4:	e7fb      	b.n	80081ee <__ascii_mbtowc+0x16>
 80081f6:	f06f 0001 	mvn.w	r0, #1
 80081fa:	e7f8      	b.n	80081ee <__ascii_mbtowc+0x16>

080081fc <__malloc_lock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__malloc_lock+0x8>)
 80081fe:	f7ff b8ce 	b.w	800739e <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	200003ec 	.word	0x200003ec

08008208 <__malloc_unlock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_unlock+0x8>)
 800820a:	f7ff b8c9 	b.w	80073a0 <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	200003ec 	.word	0x200003ec

08008214 <_read_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	; (8008234 <_read_r+0x20>)
 8008218:	4604      	mov	r4, r0
 800821a:	4608      	mov	r0, r1
 800821c:	4611      	mov	r1, r2
 800821e:	2200      	movs	r2, #0
 8008220:	602a      	str	r2, [r5, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f7f9 ff7a 	bl	800211c <_read>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_read_r+0x1e>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_read_r+0x1e>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	200003f8 	.word	0x200003f8

08008238 <__ascii_wctomb>:
 8008238:	b149      	cbz	r1, 800824e <__ascii_wctomb+0x16>
 800823a:	2aff      	cmp	r2, #255	; 0xff
 800823c:	bf85      	ittet	hi
 800823e:	238a      	movhi	r3, #138	; 0x8a
 8008240:	6003      	strhi	r3, [r0, #0]
 8008242:	700a      	strbls	r2, [r1, #0]
 8008244:	f04f 30ff 	movhi.w	r0, #4294967295
 8008248:	bf98      	it	ls
 800824a:	2001      	movls	r0, #1
 800824c:	4770      	bx	lr
 800824e:	4608      	mov	r0, r1
 8008250:	4770      	bx	lr

08008252 <abort>:
 8008252:	b508      	push	{r3, lr}
 8008254:	2006      	movs	r0, #6
 8008256:	f000 f82b 	bl	80082b0 <raise>
 800825a:	2001      	movs	r0, #1
 800825c:	f7f9 ff54 	bl	8002108 <_exit>

08008260 <_raise_r>:
 8008260:	291f      	cmp	r1, #31
 8008262:	b538      	push	{r3, r4, r5, lr}
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	d904      	bls.n	8008274 <_raise_r+0x14>
 800826a:	2316      	movs	r3, #22
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	f04f 30ff 	mov.w	r0, #4294967295
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008276:	b112      	cbz	r2, 800827e <_raise_r+0x1e>
 8008278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800827c:	b94b      	cbnz	r3, 8008292 <_raise_r+0x32>
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f830 	bl	80082e4 <_getpid_r>
 8008284:	462a      	mov	r2, r5
 8008286:	4601      	mov	r1, r0
 8008288:	4620      	mov	r0, r4
 800828a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828e:	f000 b817 	b.w	80082c0 <_kill_r>
 8008292:	2b01      	cmp	r3, #1
 8008294:	d00a      	beq.n	80082ac <_raise_r+0x4c>
 8008296:	1c59      	adds	r1, r3, #1
 8008298:	d103      	bne.n	80082a2 <_raise_r+0x42>
 800829a:	2316      	movs	r3, #22
 800829c:	6003      	str	r3, [r0, #0]
 800829e:	2001      	movs	r0, #1
 80082a0:	e7e7      	b.n	8008272 <_raise_r+0x12>
 80082a2:	2400      	movs	r4, #0
 80082a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082a8:	4628      	mov	r0, r5
 80082aa:	4798      	blx	r3
 80082ac:	2000      	movs	r0, #0
 80082ae:	e7e0      	b.n	8008272 <_raise_r+0x12>

080082b0 <raise>:
 80082b0:	4b02      	ldr	r3, [pc, #8]	; (80082bc <raise+0xc>)
 80082b2:	4601      	mov	r1, r0
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	f7ff bfd3 	b.w	8008260 <_raise_r>
 80082ba:	bf00      	nop
 80082bc:	2000000c 	.word	0x2000000c

080082c0 <_kill_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d07      	ldr	r5, [pc, #28]	; (80082e0 <_kill_r+0x20>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	f7f9 ff0b 	bl	80020e8 <_kill>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d102      	bne.n	80082dc <_kill_r+0x1c>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b103      	cbz	r3, 80082dc <_kill_r+0x1c>
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	bf00      	nop
 80082e0:	200003f8 	.word	0x200003f8

080082e4 <_getpid_r>:
 80082e4:	f7f9 bef8 	b.w	80020d8 <_getpid>

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
